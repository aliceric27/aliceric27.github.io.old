{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/20230228_155412.jpg","path":"images/20230228_155412.jpg","modified":1,"renderable":0},{"_id":"source/images/20230228_155443.jpg","path":"images/20230228_155443.jpg","modified":1,"renderable":0},{"_id":"source/images/20230228_155557.jpg","path":"images/20230228_155557.jpg","modified":1,"renderable":0},{"_id":"source/images/Pingfun.woff","path":"images/Pingfun.woff","modified":1,"renderable":0},{"_id":"source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":0},{"_id":"source/images/push-pin.png","path":"images/push-pin.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/2023-01-31-自傳履歷.md","hash":"320de0774ee07aee80646d8876ff409fa2c3af78","modified":1731002760279},{"_id":"source/_posts/2024-09-03-Vue 從模板傳值到 CSS 偽元素 content 內容.md","hash":"26e8d80f5d516638dd94c5a82e6472331ba69012","modified":1731002760279},{"_id":"source/_posts/2024-09-10-js-event-loop.md","hash":"a71347912032dcd32a2ebf69b136aba04b257f29","modified":1731002760279},{"_id":"source/_posts/2024-10-11-事件冒泡.md","hash":"16813181fbb739c50dd81d6120c50bf4815de205","modified":1731002760279},{"_id":"source/_posts/2024-09-15-this.md","hash":"31e876013d075d4158805d8a0669590f5824ee98","modified":1731002760279},{"_id":"source/_posts/2024-09-17-型別比較==.md","hash":"f0df26851b6fc7d7b57e686b5356ad0200f493f7","modified":1731002760279},{"_id":"source/_posts/2024-10-11-網址取值.md","hash":"77122c6a6df0757af753dbb8070a422aec31f59b","modified":1731002760279},{"_id":"source/_posts/2024-10-18-一位女性殺人犯的素描.md","hash":"5cfbbf3cf81835f119d873ee6e634f1712781f2b","modified":1731002760279},{"_id":"source/_posts/2024-11-07-使用CloudFlare-Work架設telegram-bot.md","hash":"3818c69267b8a3f9af6eaf73604872ddd647607e","modified":1731002760279},{"_id":"source/categories/index.md","hash":"7f1a2bca0c48531b2c418289c310884276dbb2a7","modified":1731002760294},{"_id":"source/images/loading.svg","hash":"03e5faf4eb953a1443d93a707476d64dcbbf2642","modified":1731002760325},{"_id":"source/images/push-pin.png","hash":"26ff9acf3d5e44b5613f363a0b20f73607cdcf24","modified":1731002760325},{"_id":"source/tags/index.md","hash":"a7217e5c09432ee650d30b18e27e284f6ab55e8a","modified":1731002760325},{"_id":"source/favicon.ico","hash":"1deac0c425ff8493d691d0c714464015dff2d4a2","modified":1731002760294},{"_id":"themes/cactus/source/css/_custom/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1731000870321},{"_id":"themes/cactus/.stylintrc","hash":"8bbbee5eae70fbe7dd53c9ce43d244b47d58385b","modified":1731000101902},{"_id":"themes/cactus/.jshintrc","hash":"d6ee46102ed2ff00acb555557f47241b701e99a4","modified":1731000101901},{"_id":"themes/cactus/.gitignore","hash":"044711463cfff978c57dbe9612deeb221269890e","modified":1731000101899},{"_id":"themes/cactus/languages/ar.yml","hash":"2f1258875dbffa89d192a1d6481c4bd3c337126b","modified":1731000101905},{"_id":"themes/cactus/LICENSE","hash":"06806c75801c9ae870a1b47d588ef8e00d3c7c94","modified":1731000101902},{"_id":"themes/cactus/README.md","hash":"78c23f149de6869b91e4e1bb9067915f6520d6fc","modified":1731000101903},{"_id":"themes/cactus/_config.yml","hash":"e8937fe8c65eb148145307b9acad068fca009ef3","modified":1731002450371},{"_id":"themes/cactus/languages/de.yml","hash":"0734bfc33861585a12327142bf52489c882ad34f","modified":1731000101906},{"_id":"themes/cactus/gulpfile.js","hash":"23b5f0ea4c4d4319dfa8c3d3eaecb7bd70d90336","modified":1731000101904},{"_id":"themes/cactus/package.json","hash":"768e4f07b7bc6406d37b84878e1d34be668f5ea4","modified":1731000101927},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1731000101906},{"_id":"themes/cactus/languages/es.yml","hash":"56ddfd9081641c45272bdc2df750e41ab8b600bf","modified":1731000101907},{"_id":"themes/cactus/languages/it.yml","hash":"501bfc9aed86964ee75354a805378740a02af799","modified":1731000101909},{"_id":"themes/cactus/languages/ca.yml","hash":"6f9897fe8c7b7bf23be7fa58c530602217aea898","modified":1731000101905},{"_id":"themes/cactus/languages/en.yml","hash":"491c87ff300815df52220f6cead8e28edea129df","modified":1731000101907},{"_id":"themes/cactus/languages/pt-br.yml","hash":"417d25e3dae260a2503ec6a8f1b590fa00534b14","modified":1731000101911},{"_id":"themes/cactus/languages/fr.yml","hash":"4604fc8f94d98f6d53c80535fbae78814f88f32d","modified":1731000101908},{"_id":"themes/cactus/languages/pl.yml","hash":"3677b782edd98986bb82568c6ff6c8b77140b75a","modified":1731000101910},{"_id":"themes/cactus/languages/fa.yml","hash":"05fb8dad765af2b9eec32582f5d277eb2735ffc3","modified":1731000101908},{"_id":"themes/cactus/languages/nl.yml","hash":"4c36921322e782775ccff9aec78d4261153cf5e5","modified":1731000101910},{"_id":"themes/cactus/languages/kr.yml","hash":"ab5be04a1b4c4d87e164b1a045e220f855e85a38","modified":1731000101909},{"_id":"themes/cactus/languages/ua.yml","hash":"983d0acd3ce19858ec14c641da135a562541c778","modified":1731000101912},{"_id":"themes/cactus/layout/404.ejs","hash":"c04829c5ddc417d0b9a66cad55a838cc7eed997b","modified":1731000101917},{"_id":"themes/cactus/languages/tr.yml","hash":"fcde93b8a92117706b019b51a95385c940e29190","modified":1731000101912},{"_id":"themes/cactus/languages/vi.yml","hash":"1a1dfc60e952c3429c038f69a9e0ca2057784fca","modified":1731000101913},{"_id":"themes/cactus/languages/ru.yml","hash":"47fb1672f36d5adadf2f6c3a5c4d1714f5bd563b","modified":1731000101911},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d163690e48de5cf03914d69a99462d72eb040ad3","modified":1731000101914},{"_id":"themes/cactus/layout/index.ejs","hash":"6e3a63db6bc43f6e4091361c52df5bcfd5be3339","modified":1731000101925},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"fa5923f53f6174b044255e2d1655136168ff59c0","modified":1731000101916},{"_id":"themes/cactus/layout/archive.ejs","hash":"cda7b4d3f3615a9a591d7610f9e40b615ca68c73","modified":1731000101925},{"_id":"themes/cactus/scripts/cdn.js","hash":"6037ad2ddbdc4d87195d91b3bd9f197c1b40467a","modified":1731000101928},{"_id":"themes/cactus/layout/layout.ejs","hash":"c7b73f887d62fad9f14507504c4a2c036860e76c","modified":1731000101926},{"_id":"themes/cactus/layout/page.ejs","hash":"1700d4f434170e1eeb0e2a9470fc3c0732b2ba7e","modified":1731000101926},{"_id":"themes/cactus/layout/post.ejs","hash":"9b8e937375f56053f497f437c06d527761b98d1c","modified":1731000101927},{"_id":"themes/cactus/scripts/error_404.js","hash":"099d428e1b96b9c219a789da60b87703c509b2bb","modified":1731000101928},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1731000101929},{"_id":"themes/cactus/scripts/meta.js","hash":"96b1a52af341adc741a5581ddc7335105abe780e","modified":1731000101929},{"_id":"themes/cactus/scripts/page_title.js","hash":"03b5c8b6215f0b305327e8d9b5d49add83b4b95f","modified":1731000101929},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"98b79403945fa7f8dc177e6da283681677d02567","modified":1731000101928},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"2336c1eb473fea860f4c3e309c50bc32544d0b4e","modified":1731000101918},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"ea8692715a8ea49624638dbd7bfb911af58887ee","modified":1731000101920},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"162fb8592903605789f516be2cd9c678a1a2d207","modified":1731000101918},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cac3ef9de11b14825599efe69b0939f42d368e25","modified":1731000101919},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"82372a68455c05fa6a07c5ecb8defe11f769da7c","modified":1731000101918},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"3eae6c39852c3d7cba8978ad93a5570d20580924","modified":1731000101919},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"5a39772aa121652f9d54619282fe880006b2a677","modified":1731000101925},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"46ad130a7a741ca44928116479c2004180979e40","modified":1731000101923},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"12dba799ae5736dfbf1548e1923bbb7447de8a6d","modified":1731000101924},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"5c1727836f5d6076a65cf91dbbeaba8d16b5132b","modified":1731000101934},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"42fd45758d8f8e814bfdd8b26eb676d87b8465b2","modified":1731000101924},{"_id":"themes/cactus/source/css/rtl.styl","hash":"105284f992de848968d818f6200d2ebbdd5342d0","modified":1731000101965},{"_id":"themes/cactus/source/css/_extend.styl","hash":"1b9b2c69b894343068f3384000581a6092c4e868","modified":1731000101933},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"37093d2a554283ab652b59e5e0ff9b542edced0f","modified":1731000101958},{"_id":"themes/cactus/source/css/_variables.styl","hash":"5dcbf89bd23d9dd3c45d07049a1448b0ae95426b","modified":1731000101965},{"_id":"themes/cactus/source/css/_util.styl","hash":"1c7bed7376f04d7b77d817e132aee08cf65e6395","modified":1731000101964},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1731000101967},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1731000101967},{"_id":"themes/cactus/source/css/style.styl","hash":"27c64e07f1091f0c7928889238fd112fc2499067","modified":1731000867525},{"_id":"themes/cactus/source/js/main.js","hash":"adc9e8e86e82f6bce527d5674df0a9b298ac71a0","modified":1731000101970},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1731000101968},{"_id":"themes/cactus/source/js/search.js","hash":"0d2933fa97c4036805011cc219fcc43ae578e230","modified":1731000101970},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"53d0225501f4c33abda7059293f00aa22e3d4364","modified":1731000101920},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"62fd0bb73eef411ae0b2d6f529a273d54fd0d277","modified":1731000101921},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"2170a51e5b2637ef55651f29637cafcd111242b2","modified":1731000101921},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1731000101922},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"b64d37f8a2cdb3990a5f4cd686b4fa3f2607b5bb","modified":1731000101922},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"3d6c91b03ade77daf1ceb11c5dad48b0e35ac353","modified":1731000101930},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"524ad82e6d52b91d20cded8224efb76f2fdacf0b","modified":1731000101923},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"6b037d536ef89c1e7b488f34c20fa977389ae744","modified":1731000101922},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"a20de63c1cd7ccf25b8313e2d211866a20e86fbe","modified":1731000101933},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"424029d2d8e6c51c7370c5f8aabc21799418d3f1","modified":1731000101923},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1731000101934},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"9b156c15c855677a50c4a27de17a8cb377b69802","modified":1731000101931},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"d2978cb0035ba1da0a58db2ed947a72b0bd41042","modified":1731000101931},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1731000101938},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1731000101935},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1731000101937},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1731000101936},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1731000101937},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1731000101938},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1731000101940},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1731000101939},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1731000101938},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1731000101940},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1731000101939},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1731000101939},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1731000101941},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1731000101940},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1731000101940},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1731000101941},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1731000101942},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1731000101941},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1731000101942},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1731000101942},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1731000101943},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1731000101942},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1731000101943},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1731000101943},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1731000101944},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1731000101944},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1731000101944},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1731000101945},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1731000101945},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1731000101945},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1731000101946},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1731000101946},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1731000101946},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1731000101947},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1731000101947},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1731000101947},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1731000101947},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1731000101950},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1731000101950},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1731000101949},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1731000101950},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1731000101951},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1731000101951},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1731000101951},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1731000101951},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1731000101952},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1731000101952},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1731000101952},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1731000101954},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1731000101953},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1731000101953},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1731000101953},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1731000101954},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1731000101954},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1731000101955},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1731000101954},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1731000101954},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1731000101955},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4d4a9360c35f3c5a0c5b9b49a1f2284e7e21317b","modified":1731000101955},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1731000101955},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1731000101956},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1731000101956},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1731000101956},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1731000101957},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1731000101956},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1731000101956},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1731000101957},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1731000101957},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"301bf71b6878c965b3ea49dc19aba3f1c111cd3a","modified":1731000101959},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1731000101958},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1731000101957},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1731000101958},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1731000101958},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"6e839bae0ddc11447579c34541e79b50d3670bbd","modified":1731000101959},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"92fffe2baacb9d19021b3d120d2038417ca466df","modified":1731000101959},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"abdbf82d71c7ec89c2f3ebaf8cc0606ab4ec1e03","modified":1731000101959},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"5bc59fd8cadd7cff06d989c9c7e8e4eb0d0872d8","modified":1731000101960},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"f08c8bd685ddced854cdf2183684013c0644527c","modified":1731000101960},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"4ff9755163aae6039bb72eac8360bc1c50fa26b6","modified":1731000101961},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"4a0da5d7052204b23d390a7f76cdc903b9eef52b","modified":1731000101960},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"680ea535e5a20c01a31bee4d3eb680b86267a281","modified":1731000101963},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"6cb13a9f4a7c01aa7ab8f73739a7d385377c5465","modified":1731000101964},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"7a2f9051b21bce525ecb71799d37c4b65a4f9171","modified":1731000101964},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"d62dcb0905e038e69ff24ab9eef9e3306d45535e","modified":1731000101971},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1731000102024},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1731000102023},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1731000102027},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1731000102027},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1731000102030},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1731000102031},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1731000102034},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1731000102034},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1731000102036},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1731000102036},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1731000102039},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1731000102039},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1731000102042},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1731000102042},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"a3dca7ea2f1fedafc2dfb687884d8ac792d15947","modified":1731000102042},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"c25ccdd505ca1b7c74a7fb2365ad2c262f8025ba","modified":1731000101961},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"b06410ed34b5ecbcac11357aa359149e1f827aa6","modified":1731000101962},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"4a8d364c99df8471c6a0c7192710631e605af635","modified":1731000101982},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1731000101975},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1731000101975},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1731000101980},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1731000101981},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"8d7e041394387fd523991bf827d417ade2747e35","modified":1731000101983},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1731000101982},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1731000102022},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1731000102025},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1731000102023},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1731000102026},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1731000102029},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1731000102030},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1731000102032},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1731000102033},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1731000102035},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1731000102035},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1731000102037},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1731000102038},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1731000102040},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1731000102041},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"2bf056f1697bf3afdf49e56573d63b114374661e","modified":1731000101972},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1731000101974},{"_id":"source/images/20230228_155412.jpg","hash":"fd0717ea3a69e97dfbbd5ed5d5ae8e4ad3c9499c","modified":1731002760294},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1731000101974},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1731000101980},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1731000101970},{"_id":"source/images/20230228_155557.jpg","hash":"eabb51d3f4d1e24b6b9fa198853e083ff2f19a8c","modified":1731002760294},{"_id":"source/images/20230228_155443.jpg","hash":"74c56e7710eb988256450e4b373aad0645d851bc","modified":1731002760294},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1731000101979},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1731000101994},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1731000102008},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1731000102016},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1731000101991},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1731000101987},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1731000101998},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1731000102001},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1731000102014},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1731000102004},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1731000102010},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1731000102012},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1731000102018},{"_id":"source/images/Pingfun.woff","hash":"e67c62fb88fb8767a9a3f40bdb54290f10f08669","modified":1731002760325},{"_id":"public/categories/index.html","hash":"2a20299a0eddddf33d48be95316f48817573b8a1","modified":1731002954844},{"_id":"public/tags/index.html","hash":"9211d3bfc5f9b61789347087466200d31deb6b79","modified":1731002954844},{"_id":"public/2024/10/18/2024-10-18-一位女性殺人犯的素描/index.html","hash":"ebc066fdef1970f057d1fb3f54a2538611df04ad","modified":1731002954844},{"_id":"public/2024/11/07/2024-11-07-使用CloudFlare-Work架設telegram-bot/index.html","hash":"96d990b7f493245eac512afd53d634725225edf9","modified":1731002954844},{"_id":"public/2024/10/11/2024-10-11-事件冒泡/index.html","hash":"92198f3f7c37f90bcedc080b8724ca5974e779d1","modified":1731002954844},{"_id":"public/2024/10/11/2024-10-11-網址取值/index.html","hash":"8894f3eb021b9b06218d690adee5137db0f8d907","modified":1731002954844},{"_id":"public/2024/09/17/2024-09-17-型別比較==/index.html","hash":"d55309cfd69d73c0a6140653bf50eaffba6e2134","modified":1731002954844},{"_id":"public/2024/09/15/2024-09-15-this/index.html","hash":"3f171872336a8d90360989044719ac36fabfcfa9","modified":1731002954844},{"_id":"public/2024/09/10/2024-09-10-js-event-loop/index.html","hash":"a971f75d2e21d0351bc70ee7eeeed4e7fb81cb57","modified":1731002954844},{"_id":"public/2024/09/03/2024-09-03-Vue 從模板傳值到 CSS 偽元素 content 內容/index.html","hash":"5bdc105bebefc08d0f5dd87ce7ebb00ac5188e5e","modified":1731002954844},{"_id":"public/2023/01/31/2023-01-31-自傳履歷/index.html","hash":"e23c0a2cfeb75ae2fa57f6d3c9fea54b5e77bc32","modified":1731002954844},{"_id":"public/categories/Job/index.html","hash":"beaa4f0c9cdb10c72e440436acea3972f3ab86bf","modified":1731002954844},{"_id":"public/categories/Front-end/index.html","hash":"26312e4c006421e1a67187e40b7e0a1464cebe45","modified":1731002954844},{"_id":"public/archives/index.html","hash":"fa934874219786f95382d936050695ffdfd7225d","modified":1731002954844},{"_id":"public/categories/Tools/index.html","hash":"68434576aecebfdb28081ac48bb29005e2343505","modified":1731002954844},{"_id":"public/categories/Book/index.html","hash":"52cac491d23bd8457b48e4e588d6b0083b6ceb6c","modified":1731002954844},{"_id":"public/archives/2023/index.html","hash":"0e8bd55cfd686a15fc4b947b63aa4d63ba130d84","modified":1731002954844},{"_id":"public/archives/2023/01/index.html","hash":"2c0c3013b52f38d856795a72eba964ab39090ce7","modified":1731002954844},{"_id":"public/archives/2024/index.html","hash":"6ceecf18ba16fac5a6adeb313403f6fbadb1d56f","modified":1731002954844},{"_id":"public/archives/2024/09/index.html","hash":"c5f3f0e365cf7247637d5fa418023871563fe516","modified":1731002954844},{"_id":"public/archives/2024/10/index.html","hash":"ac0ae24676bdbfeb1d38c74024d426554bb1a01f","modified":1731002954844},{"_id":"public/tags/Job/index.html","hash":"da7086317322f8da587a25454dce3bfebeafb089","modified":1731002954844},{"_id":"public/archives/2024/11/index.html","hash":"74af6211695438ce355a53e99f70a1252b0df020","modified":1731002954844},{"_id":"public/tags/Front-end/index.html","hash":"0f0f2e3f7e97c7cfe31bfe97129ee15beb2a731b","modified":1731002954844},{"_id":"public/tags/Tools/index.html","hash":"b6e219a6d5280eab655dd5ced53e4ecfb4aa3914","modified":1731002954844},{"_id":"public/index.html","hash":"40e9410426b802ee79d7222735c11ddb9b9062ec","modified":1731002954844},{"_id":"public/tags/Book/index.html","hash":"3aa8cc5f6a1f07642a56b296a16d1cee813b2e36","modified":1731002954844},{"_id":"public/404.html","hash":"79553a77d8839438cf4a3c2bf3568615ef593804","modified":1731002954844},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1731002954844},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1731002954844},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1731002954844},{"_id":"public/images/loading.svg","hash":"03e5faf4eb953a1443d93a707476d64dcbbf2642","modified":1731002954844},{"_id":"public/images/push-pin.png","hash":"26ff9acf3d5e44b5613f363a0b20f73607cdcf24","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1731002954844},{"_id":"public/css/style.css","hash":"775c8fa6860f020f1bd5ebdc2d8346998602138a","modified":1731002954844},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1731002954844},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1731002954844},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1731002954844},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1731002954844},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1731002954844},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1731002954844},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1731002954844},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1731002954844},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1731002954844},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1731002954844},{"_id":"public/favicon.ico","hash":"1deac0c425ff8493d691d0c714464015dff2d4a2","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1731002954844},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1731002954844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1731002954844},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1731002954844},{"_id":"public/images/20230228_155412.jpg","hash":"fd0717ea3a69e97dfbbd5ed5d5ae8e4ad3c9499c","modified":1731002954844},{"_id":"public/images/20230228_155557.jpg","hash":"eabb51d3f4d1e24b6b9fa198853e083ff2f19a8c","modified":1731002954844},{"_id":"public/images/20230228_155443.jpg","hash":"74c56e7710eb988256450e4b373aad0645d851bc","modified":1731002954844},{"_id":"public/images/Pingfun.woff","hash":"e67c62fb88fb8767a9a3f40bdb54290f10f08669","modified":1731002954844}],"Category":[{"name":"Job","_id":"cm37mgsk90006qoud47dv0lsv"},{"name":"Front-end","_id":"cm37mgsk90009qoudgx8v0ale"},{"name":"Tools","_id":"cm37mgskd000wqoudddn667jd"},{"name":"Book","_id":"cm37mgskd0010qoud6uxcgi3g"}],"Data":[],"Page":[{"title":"分類","date":"2023-03-11T11:00:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2023-03-11 19:00:38\ntype: categories\n---\n","updated":"2024-11-07T18:06:00.294Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm37mgsk40000qoud3jty3mcz","content":"","excerpt":"","more":""},{"title":"標籤","date":"2023-03-11T11:00:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2023-03-11 19:00:25\ntype: tags\n---\n","updated":"2024-11-07T18:06:00.325Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm37mgsk70002qoudemik6o43","content":"","excerpt":"","more":""}],"Post":[{"title":"自傳履歷","date":"2023-01-31T03:45:08.000Z","_content":"\n\n\n嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。\n\n<!-- more -->\n\n## 學歷\n\n**樹德科技大學 - 資訊管理系 2013/09-2017/09**\n\n## 經歷\n\n### 微樂應用科技有限公司 2024.3 - \n#### 前端工程師\n\n- 前端頁面切版、調整\n- 後端 API 串接測試\n- Vue.js 模板撰寫\n\n\n### 日易人工智慧有限公司 2023.10 - 2024.02\n#### 前端工程師\n\n- 前端切版\n- 前端 Nuxt 框架規劃\n- 前端 API 資料串接\n- Socket 資料串接\n\n### 冠宇數位科技股份有限公司 2023.03 - 2023.08\n#### 前端工程師\n\n- 後臺前端維護建置 Typescript + Vue +  Element UI 架構\n- 遊戲官網獨立架設並串接 API 採 Vue 3 + Vite 打包工具\n- 前端切版與規劃，配合SCSS框架工具與Tailwind進行開發\n\n\n### 資策會-全端工程師就業養成班 2022.10 - 2023.02\n\n#### 培訓技能\n\n- Html、CSS ，前端頁面切版設計\n- JavaScript，網站與使用者互動之程式語言\n- PHP，撰寫簡易後端 API\n- MySQL， 關聯式資料庫架設、 CRUD 指令取得資料\n- ReactJS，前端網頁框架\n\n### 本能娛樂工作室 2019.10-2022.08\n\n#### 遊戲企劃\n\n- 規劃 Android 遊戲流程與計畫，協調工程師修改至符合規格\n- 撰寫遊戲文件、測試遊戲內容、協助處理上架與用戶反饋\n- 公司硬體設備維修與維護\n\n## 簡介\n\nDear Reviewer， 你好！ 黃育緯，1994/12/15，畢業於國立岡山高中與樹德科技大學-資訊管理系，具企劃及程式設計之技術。\n\n大學製作的畢業專題為 Wordpress 電商網站，使用 WooCommerce 套件製作，出社會後輾轉做了許多的行業，曾在3C 賣場銷售過，也曾經到科技廠擔任 QC 品管人員，有幸見到不同的人事物，也讓我對人生未來的價值觀有一定的影響，最後落腳的工作是在台中，在這二年多的學習，讓我對程式開發流程有滿深的影響，也參與了大小專案的開發過程。\n\n離開上一份工作並尋找轉職的原因是我評估下自己具備的條件，讓我不滿足止步於企劃與溝通，現階段我的追求是\"至少讓自己\"不要裹足不前，進而在公司期滿後選擇進修前後端技術。\n\n在進修學習的過程中不斷的學到新技術的同時，可以感受到自己在學習上的優勢，以往曾經自行架設遊戲伺服器擅長蒐集資料與閱讀英文文件的習慣讓我尋找資料與解決問題的的經驗要相較其他同學多，在上一份工作團隊使用的技術在我學習的過程中漸漸明白當初與同事溝通之間所使用的工具實際上是如何運作的。\n\n很慶幸自己是在資訊發達的年代出生，運用網路上的資訊解決問題也改變了每個人的生活習慣，對於計算機網路的喜愛也讓我在轉職學習的過程中漸漸找到成就感與樂趣，使用工具不斷解決現有問題就是資訊發展得意義，對於求職路上也期許自己可以不斷精進自己的技能，對於每份工作盡力做到完美。\n\n\n《工作經歷》\n\n**本能工作室 (2019.10-2022.8)**\n\n在本能工作室初期，主要擔任助理工程師一職，負責協同工程師業務需求與團隊人事招募等相關工作，並協助處理完成的程式功能之測試，而團隊人數招募漸滿後被指派到遊戲團隊擔任遊戲企劃，團隊內主要開發 Android App 遊戲，而我在這個職務內負責的內容為企劃發想、溝通協調需求、協助 App 上架等相關事宜，最後遊戲開發完成也有成功上架到 Google Store 上，最後離開原因為公司縮編。\n\n------\n\n**資策會全端班(2022.8-2023.2)**\n\n在上一份工作中，因考量未來職涯發展，故報名資策會全端班級進修技能，在此期間學習到了前端基本切版的技能、與前端 Javascript 程式邏輯撰寫、並且學習了後端語言 PHP ，MySQL資料庫等後端應用，在學習後期也學習了 React 框架，最終和同學組成團隊完成一項專案，而我在這個專案內所負則的部分為購物車的功能頁面包含前端切版與後端資料庫串接等，而我也閱讀了綠界相關 API 文件使用 PHP 完成測試的金流串接。\n\n------\n\n**冠宇數位科技股份有限公司 (2023.3-2023.8)**\n\n冠宇是我的第一份工程師工作，擔任的是前端工程師，在入職初期主要負責後端的相關功能維護與修復功能，在這時碰到的新技術為 Vue 框架、Typescript 等在學習時沒有碰到的相關技術，在下班時會抽空查閱相關文件與其使用方式，在一個禮拜內就上手專案與相關功能新增維護。\n\n在職期間後期，被指派為主導開發 Startluo 遊戲官方網站的前端主工程師，專案前端均由我架構、切版、製作，架構時我採用的是 SPA 方式與 Vue 3 和 Vite 建構工具打包，也學習使用新的 CSS 框架 Tailwind 等相關技術，在架構與製作時一邊使用與學習，主要與美術配合負責前端頁面切版，與後端工程師協同 API 等相關功能串接，其中包含會員功能使用 Firebase OAuth 驗證、金流則與 MyCard 等第三方金流做串接。\n\n最後離開原因為主動離職。\n\n------\n\n**日易人工智慧有限公司 (2023.10-2024.2)**\n\n在日易主要擔任前端工程師一職，負責開發後台介面，主要協同美術進行切版與後端工程師進行 API 資料串接．因開發後台沒有一個主要架構，所以在職的前端開發專案也是由我負責架構、撰寫功能，我在專案中使用較新的 Nuxt 框架，採用 Vue 撰寫，在架構與撰寫中學習與使用，而後碰到新的串接函式庫 socket.io 並學習 socket 相關功能串接。\n\n最後離職原因為主動離職。\n\n------\n\n**微樂應用科技有限公司 (2024.3-)**\n\n目前在職中主要專精 JS 語言開發，與後端 API 串接，VueJs前端模板撰寫\n\n------\n\n《自我期許》\n\n在每一份工作中，我都期待接受新的挑戰，也不會排斥使用新的技術以及學習新的技術，最害怕的是職場太安逸，讓人沒有進步的空間與動力，期許自己可以在每份工作中都可以有一點收穫與回饋，不斷成長精進自己。\n\n## 電商網站 Lu-Shopping - 大學期末專題\n\n使用 Wordpress 搭配 WooCommerce 建置\n\n  <img src=\"https://i.imgur.com/dW00fox.png\" alt=\"DSC_0253\" style=\"zoom: 40%;\"/>\n\n  <img src=\"https://i.imgur.com/9uOOeFf.jpg\" alt=\"DSC_0254\" style=\"zoom:30%;\" />\n\n## 氣炸廚房 - 資策會全端培訓專題\n\n### 緣由\n\n因為平常有運動與飲食控制的習慣，也鑑於此餐廳的形象網站較為簡陋，因此假想此餐廳為用戶，並提出改進形象網站需求而製作此專題。\n\n### 摘要\n\n本專題使用原生 HTML、CSS、Javascript 製作而成。\n使用套件有包含 Chart.js、Swiper 等\n使用 Git 作為版控、並部署到 Github Pages 上\n\n![image-20230205164022292](https://i.imgur.com/OoF0QKA.png)\n\n[網站連結](https://aliceric27.github.io/littleweb/)\n\n## SelectGo - 資策會全端培訓專題\n\n### 緣由\n\n因日本代購盛行，且比較沒有冷門的商品代購，為此而開發的網站，每個用戶可以根據自己需求到許願池發佈文章並且加入購物車購買。\n\n### 摘要\n\n本專題使用原生 React 前端框架與 HTML、CSS、Javascript、製作而成，後端採用 PHP 與 MySQL 實現 API 資料抓取與處理。\n\n我負責得部分為購物車與結帳頁面製作，並串接第三方金流 API ，完成站內購買。\n\n#### 特色功能\n\n- 從資料庫使用 API 獲得用戶購物車資料\n- 前端 UX 設計 ，讓使用者精確知道金額異動\n- 使用匯率 API 獲取即時匯率，並提供快速轉換金額功能\n- 在購物車新增、移除商品資料\n- 折扣碼輸入與改變金額\n- 送出表單錯誤判定\n- 串接第三方金流送出表單資料，並跳轉回網站取得成功或失敗付款提示\n\n[Source](https://aliceric27.github.io/littleweb/)\n\n[演示影片](https://www.youtube.com/watch?v=ud2W5ibur4U)\n\n<img src=\"https://i.imgur.com/KINoMrc.png\" alt=\"image-20230205174410740\" style=\"zoom:50%;\" />\n\n\n## Startluo 官網 - 冠宇數位科技股份有限公司\n\n### 摘要\n\n主要替遊戲設計一個網站、該網站包含排行榜、用戶資料、儲值金額等功能\n\n<img src=\"https://i.imgur.com/ZTfMxMu.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n- 與美術協同Figma網站規劃切版、功能撰寫\n- 釐清PM與用戶需求並完成、新增功能\n- 採用Vue3撰寫功能、Vite打包工具、Pinia狀態管理\n- 採用SCSS、Tailwind框架\n- 第三方Firebase登入驗證\n- Axios做API後端資料串接與整理\n\n## 中央控制系統 - 日易人工智慧有限公司\n\n### 摘要\n\n飯店內的中央控制系統，可於頁面上查看設備資訊，並控制設備開關\n\n<img src=\"https://i.imgur.com/6RTpJr4.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n- Nuxt3、Vue3 框架撰寫\n- Figma 與美術對稿切版\n- Socket.io 套件串接 Socket 協議資料\n- Tailwind SCSS 等前端開發開套件進行樣式切版\n\n[Source](https://github.com/aliceric27/FloramosHotel)\n**為公司隱私設為私人專案，可於線下展示**\n\n------","source":"_posts/2023-01-31-自傳履歷.md","raw":"---\ntitle: 自傳履歷\ndate: 2023-01-31 11:45:08\ntags:\n  - [Job]\ncategories:\n  - [Job]\n---\n\n\n\n嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。\n\n<!-- more -->\n\n## 學歷\n\n**樹德科技大學 - 資訊管理系 2013/09-2017/09**\n\n## 經歷\n\n### 微樂應用科技有限公司 2024.3 - \n#### 前端工程師\n\n- 前端頁面切版、調整\n- 後端 API 串接測試\n- Vue.js 模板撰寫\n\n\n### 日易人工智慧有限公司 2023.10 - 2024.02\n#### 前端工程師\n\n- 前端切版\n- 前端 Nuxt 框架規劃\n- 前端 API 資料串接\n- Socket 資料串接\n\n### 冠宇數位科技股份有限公司 2023.03 - 2023.08\n#### 前端工程師\n\n- 後臺前端維護建置 Typescript + Vue +  Element UI 架構\n- 遊戲官網獨立架設並串接 API 採 Vue 3 + Vite 打包工具\n- 前端切版與規劃，配合SCSS框架工具與Tailwind進行開發\n\n\n### 資策會-全端工程師就業養成班 2022.10 - 2023.02\n\n#### 培訓技能\n\n- Html、CSS ，前端頁面切版設計\n- JavaScript，網站與使用者互動之程式語言\n- PHP，撰寫簡易後端 API\n- MySQL， 關聯式資料庫架設、 CRUD 指令取得資料\n- ReactJS，前端網頁框架\n\n### 本能娛樂工作室 2019.10-2022.08\n\n#### 遊戲企劃\n\n- 規劃 Android 遊戲流程與計畫，協調工程師修改至符合規格\n- 撰寫遊戲文件、測試遊戲內容、協助處理上架與用戶反饋\n- 公司硬體設備維修與維護\n\n## 簡介\n\nDear Reviewer， 你好！ 黃育緯，1994/12/15，畢業於國立岡山高中與樹德科技大學-資訊管理系，具企劃及程式設計之技術。\n\n大學製作的畢業專題為 Wordpress 電商網站，使用 WooCommerce 套件製作，出社會後輾轉做了許多的行業，曾在3C 賣場銷售過，也曾經到科技廠擔任 QC 品管人員，有幸見到不同的人事物，也讓我對人生未來的價值觀有一定的影響，最後落腳的工作是在台中，在這二年多的學習，讓我對程式開發流程有滿深的影響，也參與了大小專案的開發過程。\n\n離開上一份工作並尋找轉職的原因是我評估下自己具備的條件，讓我不滿足止步於企劃與溝通，現階段我的追求是\"至少讓自己\"不要裹足不前，進而在公司期滿後選擇進修前後端技術。\n\n在進修學習的過程中不斷的學到新技術的同時，可以感受到自己在學習上的優勢，以往曾經自行架設遊戲伺服器擅長蒐集資料與閱讀英文文件的習慣讓我尋找資料與解決問題的的經驗要相較其他同學多，在上一份工作團隊使用的技術在我學習的過程中漸漸明白當初與同事溝通之間所使用的工具實際上是如何運作的。\n\n很慶幸自己是在資訊發達的年代出生，運用網路上的資訊解決問題也改變了每個人的生活習慣，對於計算機網路的喜愛也讓我在轉職學習的過程中漸漸找到成就感與樂趣，使用工具不斷解決現有問題就是資訊發展得意義，對於求職路上也期許自己可以不斷精進自己的技能，對於每份工作盡力做到完美。\n\n\n《工作經歷》\n\n**本能工作室 (2019.10-2022.8)**\n\n在本能工作室初期，主要擔任助理工程師一職，負責協同工程師業務需求與團隊人事招募等相關工作，並協助處理完成的程式功能之測試，而團隊人數招募漸滿後被指派到遊戲團隊擔任遊戲企劃，團隊內主要開發 Android App 遊戲，而我在這個職務內負責的內容為企劃發想、溝通協調需求、協助 App 上架等相關事宜，最後遊戲開發完成也有成功上架到 Google Store 上，最後離開原因為公司縮編。\n\n------\n\n**資策會全端班(2022.8-2023.2)**\n\n在上一份工作中，因考量未來職涯發展，故報名資策會全端班級進修技能，在此期間學習到了前端基本切版的技能、與前端 Javascript 程式邏輯撰寫、並且學習了後端語言 PHP ，MySQL資料庫等後端應用，在學習後期也學習了 React 框架，最終和同學組成團隊完成一項專案，而我在這個專案內所負則的部分為購物車的功能頁面包含前端切版與後端資料庫串接等，而我也閱讀了綠界相關 API 文件使用 PHP 完成測試的金流串接。\n\n------\n\n**冠宇數位科技股份有限公司 (2023.3-2023.8)**\n\n冠宇是我的第一份工程師工作，擔任的是前端工程師，在入職初期主要負責後端的相關功能維護與修復功能，在這時碰到的新技術為 Vue 框架、Typescript 等在學習時沒有碰到的相關技術，在下班時會抽空查閱相關文件與其使用方式，在一個禮拜內就上手專案與相關功能新增維護。\n\n在職期間後期，被指派為主導開發 Startluo 遊戲官方網站的前端主工程師，專案前端均由我架構、切版、製作，架構時我採用的是 SPA 方式與 Vue 3 和 Vite 建構工具打包，也學習使用新的 CSS 框架 Tailwind 等相關技術，在架構與製作時一邊使用與學習，主要與美術配合負責前端頁面切版，與後端工程師協同 API 等相關功能串接，其中包含會員功能使用 Firebase OAuth 驗證、金流則與 MyCard 等第三方金流做串接。\n\n最後離開原因為主動離職。\n\n------\n\n**日易人工智慧有限公司 (2023.10-2024.2)**\n\n在日易主要擔任前端工程師一職，負責開發後台介面，主要協同美術進行切版與後端工程師進行 API 資料串接．因開發後台沒有一個主要架構，所以在職的前端開發專案也是由我負責架構、撰寫功能，我在專案中使用較新的 Nuxt 框架，採用 Vue 撰寫，在架構與撰寫中學習與使用，而後碰到新的串接函式庫 socket.io 並學習 socket 相關功能串接。\n\n最後離職原因為主動離職。\n\n------\n\n**微樂應用科技有限公司 (2024.3-)**\n\n目前在職中主要專精 JS 語言開發，與後端 API 串接，VueJs前端模板撰寫\n\n------\n\n《自我期許》\n\n在每一份工作中，我都期待接受新的挑戰，也不會排斥使用新的技術以及學習新的技術，最害怕的是職場太安逸，讓人沒有進步的空間與動力，期許自己可以在每份工作中都可以有一點收穫與回饋，不斷成長精進自己。\n\n## 電商網站 Lu-Shopping - 大學期末專題\n\n使用 Wordpress 搭配 WooCommerce 建置\n\n  <img src=\"https://i.imgur.com/dW00fox.png\" alt=\"DSC_0253\" style=\"zoom: 40%;\"/>\n\n  <img src=\"https://i.imgur.com/9uOOeFf.jpg\" alt=\"DSC_0254\" style=\"zoom:30%;\" />\n\n## 氣炸廚房 - 資策會全端培訓專題\n\n### 緣由\n\n因為平常有運動與飲食控制的習慣，也鑑於此餐廳的形象網站較為簡陋，因此假想此餐廳為用戶，並提出改進形象網站需求而製作此專題。\n\n### 摘要\n\n本專題使用原生 HTML、CSS、Javascript 製作而成。\n使用套件有包含 Chart.js、Swiper 等\n使用 Git 作為版控、並部署到 Github Pages 上\n\n![image-20230205164022292](https://i.imgur.com/OoF0QKA.png)\n\n[網站連結](https://aliceric27.github.io/littleweb/)\n\n## SelectGo - 資策會全端培訓專題\n\n### 緣由\n\n因日本代購盛行，且比較沒有冷門的商品代購，為此而開發的網站，每個用戶可以根據自己需求到許願池發佈文章並且加入購物車購買。\n\n### 摘要\n\n本專題使用原生 React 前端框架與 HTML、CSS、Javascript、製作而成，後端採用 PHP 與 MySQL 實現 API 資料抓取與處理。\n\n我負責得部分為購物車與結帳頁面製作，並串接第三方金流 API ，完成站內購買。\n\n#### 特色功能\n\n- 從資料庫使用 API 獲得用戶購物車資料\n- 前端 UX 設計 ，讓使用者精確知道金額異動\n- 使用匯率 API 獲取即時匯率，並提供快速轉換金額功能\n- 在購物車新增、移除商品資料\n- 折扣碼輸入與改變金額\n- 送出表單錯誤判定\n- 串接第三方金流送出表單資料，並跳轉回網站取得成功或失敗付款提示\n\n[Source](https://aliceric27.github.io/littleweb/)\n\n[演示影片](https://www.youtube.com/watch?v=ud2W5ibur4U)\n\n<img src=\"https://i.imgur.com/KINoMrc.png\" alt=\"image-20230205174410740\" style=\"zoom:50%;\" />\n\n\n## Startluo 官網 - 冠宇數位科技股份有限公司\n\n### 摘要\n\n主要替遊戲設計一個網站、該網站包含排行榜、用戶資料、儲值金額等功能\n\n<img src=\"https://i.imgur.com/ZTfMxMu.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n- 與美術協同Figma網站規劃切版、功能撰寫\n- 釐清PM與用戶需求並完成、新增功能\n- 採用Vue3撰寫功能、Vite打包工具、Pinia狀態管理\n- 採用SCSS、Tailwind框架\n- 第三方Firebase登入驗證\n- Axios做API後端資料串接與整理\n\n## 中央控制系統 - 日易人工智慧有限公司\n\n### 摘要\n\n飯店內的中央控制系統，可於頁面上查看設備資訊，並控制設備開關\n\n<img src=\"https://i.imgur.com/6RTpJr4.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n- Nuxt3、Vue3 框架撰寫\n- Figma 與美術對稿切版\n- Socket.io 套件串接 Socket 協議資料\n- Tailwind SCSS 等前端開發開套件進行樣式切版\n\n[Source](https://github.com/aliceric27/FloramosHotel)\n**為公司隱私設為私人專案，可於線下展示**\n\n------","slug":"2023-01-31-自傳履歷","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgsk50001qoud37mqgd8k","content":"<p>嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"學歷\"><a href=\"#學歷\" class=\"headerlink\" title=\"學歷\"></a>學歷</h2><p><strong>樹德科技大學 - 資訊管理系 2013&#x2F;09-2017&#x2F;09</strong></p>\n<h2 id=\"經歷\"><a href=\"#經歷\" class=\"headerlink\" title=\"經歷\"></a>經歷</h2><h3 id=\"微樂應用科技有限公司-2024-3\"><a href=\"#微樂應用科技有限公司-2024-3\" class=\"headerlink\" title=\"微樂應用科技有限公司 2024.3 -\"></a>微樂應用科技有限公司 2024.3 -</h3><h4 id=\"前端工程師\"><a href=\"#前端工程師\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>前端頁面切版、調整</li>\n<li>後端 API 串接測試</li>\n<li>Vue.js 模板撰寫</li>\n</ul>\n<h3 id=\"日易人工智慧有限公司-2023-10-2024-02\"><a href=\"#日易人工智慧有限公司-2023-10-2024-02\" class=\"headerlink\" title=\"日易人工智慧有限公司 2023.10 - 2024.02\"></a>日易人工智慧有限公司 2023.10 - 2024.02</h3><h4 id=\"前端工程師-1\"><a href=\"#前端工程師-1\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>前端切版</li>\n<li>前端 Nuxt 框架規劃</li>\n<li>前端 API 資料串接</li>\n<li>Socket 資料串接</li>\n</ul>\n<h3 id=\"冠宇數位科技股份有限公司-2023-03-2023-08\"><a href=\"#冠宇數位科技股份有限公司-2023-03-2023-08\" class=\"headerlink\" title=\"冠宇數位科技股份有限公司 2023.03 - 2023.08\"></a>冠宇數位科技股份有限公司 2023.03 - 2023.08</h3><h4 id=\"前端工程師-2\"><a href=\"#前端工程師-2\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>後臺前端維護建置 Typescript + Vue +  Element UI 架構</li>\n<li>遊戲官網獨立架設並串接 API 採 Vue 3 + Vite 打包工具</li>\n<li>前端切版與規劃，配合SCSS框架工具與Tailwind進行開發</li>\n</ul>\n<h3 id=\"資策會-全端工程師就業養成班-2022-10-2023-02\"><a href=\"#資策會-全端工程師就業養成班-2022-10-2023-02\" class=\"headerlink\" title=\"資策會-全端工程師就業養成班 2022.10 - 2023.02\"></a>資策會-全端工程師就業養成班 2022.10 - 2023.02</h3><h4 id=\"培訓技能\"><a href=\"#培訓技能\" class=\"headerlink\" title=\"培訓技能\"></a>培訓技能</h4><ul>\n<li>Html、CSS ，前端頁面切版設計</li>\n<li>JavaScript，網站與使用者互動之程式語言</li>\n<li>PHP，撰寫簡易後端 API</li>\n<li>MySQL， 關聯式資料庫架設、 CRUD 指令取得資料</li>\n<li>ReactJS，前端網頁框架</li>\n</ul>\n<h3 id=\"本能娛樂工作室-2019-10-2022-08\"><a href=\"#本能娛樂工作室-2019-10-2022-08\" class=\"headerlink\" title=\"本能娛樂工作室 2019.10-2022.08\"></a>本能娛樂工作室 2019.10-2022.08</h3><h4 id=\"遊戲企劃\"><a href=\"#遊戲企劃\" class=\"headerlink\" title=\"遊戲企劃\"></a>遊戲企劃</h4><ul>\n<li>規劃 Android 遊戲流程與計畫，協調工程師修改至符合規格</li>\n<li>撰寫遊戲文件、測試遊戲內容、協助處理上架與用戶反饋</li>\n<li>公司硬體設備維修與維護</li>\n</ul>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>Dear Reviewer， 你好！ 黃育緯，1994&#x2F;12&#x2F;15，畢業於國立岡山高中與樹德科技大學-資訊管理系，具企劃及程式設計之技術。</p>\n<p>大學製作的畢業專題為 Wordpress 電商網站，使用 WooCommerce 套件製作，出社會後輾轉做了許多的行業，曾在3C 賣場銷售過，也曾經到科技廠擔任 QC 品管人員，有幸見到不同的人事物，也讓我對人生未來的價值觀有一定的影響，最後落腳的工作是在台中，在這二年多的學習，讓我對程式開發流程有滿深的影響，也參與了大小專案的開發過程。</p>\n<p>離開上一份工作並尋找轉職的原因是我評估下自己具備的條件，讓我不滿足止步於企劃與溝通，現階段我的追求是”至少讓自己”不要裹足不前，進而在公司期滿後選擇進修前後端技術。</p>\n<p>在進修學習的過程中不斷的學到新技術的同時，可以感受到自己在學習上的優勢，以往曾經自行架設遊戲伺服器擅長蒐集資料與閱讀英文文件的習慣讓我尋找資料與解決問題的的經驗要相較其他同學多，在上一份工作團隊使用的技術在我學習的過程中漸漸明白當初與同事溝通之間所使用的工具實際上是如何運作的。</p>\n<p>很慶幸自己是在資訊發達的年代出生，運用網路上的資訊解決問題也改變了每個人的生活習慣，對於計算機網路的喜愛也讓我在轉職學習的過程中漸漸找到成就感與樂趣，使用工具不斷解決現有問題就是資訊發展得意義，對於求職路上也期許自己可以不斷精進自己的技能，對於每份工作盡力做到完美。</p>\n<p>《工作經歷》</p>\n<p><strong>本能工作室 (2019.10-2022.8)</strong></p>\n<p>在本能工作室初期，主要擔任助理工程師一職，負責協同工程師業務需求與團隊人事招募等相關工作，並協助處理完成的程式功能之測試，而團隊人數招募漸滿後被指派到遊戲團隊擔任遊戲企劃，團隊內主要開發 Android App 遊戲，而我在這個職務內負責的內容為企劃發想、溝通協調需求、協助 App 上架等相關事宜，最後遊戲開發完成也有成功上架到 Google Store 上，最後離開原因為公司縮編。</p>\n<hr>\n<p><strong>資策會全端班(2022.8-2023.2)</strong></p>\n<p>在上一份工作中，因考量未來職涯發展，故報名資策會全端班級進修技能，在此期間學習到了前端基本切版的技能、與前端 Javascript 程式邏輯撰寫、並且學習了後端語言 PHP ，MySQL資料庫等後端應用，在學習後期也學習了 React 框架，最終和同學組成團隊完成一項專案，而我在這個專案內所負則的部分為購物車的功能頁面包含前端切版與後端資料庫串接等，而我也閱讀了綠界相關 API 文件使用 PHP 完成測試的金流串接。</p>\n<hr>\n<p><strong>冠宇數位科技股份有限公司 (2023.3-2023.8)</strong></p>\n<p>冠宇是我的第一份工程師工作，擔任的是前端工程師，在入職初期主要負責後端的相關功能維護與修復功能，在這時碰到的新技術為 Vue 框架、Typescript 等在學習時沒有碰到的相關技術，在下班時會抽空查閱相關文件與其使用方式，在一個禮拜內就上手專案與相關功能新增維護。</p>\n<p>在職期間後期，被指派為主導開發 Startluo 遊戲官方網站的前端主工程師，專案前端均由我架構、切版、製作，架構時我採用的是 SPA 方式與 Vue 3 和 Vite 建構工具打包，也學習使用新的 CSS 框架 Tailwind 等相關技術，在架構與製作時一邊使用與學習，主要與美術配合負責前端頁面切版，與後端工程師協同 API 等相關功能串接，其中包含會員功能使用 Firebase OAuth 驗證、金流則與 MyCard 等第三方金流做串接。</p>\n<p>最後離開原因為主動離職。</p>\n<hr>\n<p><strong>日易人工智慧有限公司 (2023.10-2024.2)</strong></p>\n<p>在日易主要擔任前端工程師一職，負責開發後台介面，主要協同美術進行切版與後端工程師進行 API 資料串接．因開發後台沒有一個主要架構，所以在職的前端開發專案也是由我負責架構、撰寫功能，我在專案中使用較新的 Nuxt 框架，採用 Vue 撰寫，在架構與撰寫中學習與使用，而後碰到新的串接函式庫 socket.io 並學習 socket 相關功能串接。</p>\n<p>最後離職原因為主動離職。</p>\n<hr>\n<p><strong>微樂應用科技有限公司 (2024.3-)</strong></p>\n<p>目前在職中主要專精 JS 語言開發，與後端 API 串接，VueJs前端模板撰寫</p>\n<hr>\n<p>《自我期許》</p>\n<p>在每一份工作中，我都期待接受新的挑戰，也不會排斥使用新的技術以及學習新的技術，最害怕的是職場太安逸，讓人沒有進步的空間與動力，期許自己可以在每份工作中都可以有一點收穫與回饋，不斷成長精進自己。</p>\n<h2 id=\"電商網站-Lu-Shopping-大學期末專題\"><a href=\"#電商網站-Lu-Shopping-大學期末專題\" class=\"headerlink\" title=\"電商網站 Lu-Shopping - 大學期末專題\"></a>電商網站 Lu-Shopping - 大學期末專題</h2><p>使用 Wordpress 搭配 WooCommerce 建置</p>\n  <img src=\"https://i.imgur.com/dW00fox.png\" alt=\"DSC_0253\" style=\"zoom: 40%;\"/>\n\n  <img src=\"https://i.imgur.com/9uOOeFf.jpg\" alt=\"DSC_0254\" style=\"zoom:30%;\" />\n\n<h2 id=\"氣炸廚房-資策會全端培訓專題\"><a href=\"#氣炸廚房-資策會全端培訓專題\" class=\"headerlink\" title=\"氣炸廚房 - 資策會全端培訓專題\"></a>氣炸廚房 - 資策會全端培訓專題</h2><h3 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h3><p>因為平常有運動與飲食控制的習慣，也鑑於此餐廳的形象網站較為簡陋，因此假想此餐廳為用戶，並提出改進形象網站需求而製作此專題。</p>\n<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>本專題使用原生 HTML、CSS、Javascript 製作而成。<br>使用套件有包含 Chart.js、Swiper 等<br>使用 Git 作為版控、並部署到 Github Pages 上</p>\n<p><img src=\"https://i.imgur.com/OoF0QKA.png\" alt=\"image-20230205164022292\"></p>\n<p><a href=\"https://aliceric27.github.io/littleweb/\">網站連結</a></p>\n<h2 id=\"SelectGo-資策會全端培訓專題\"><a href=\"#SelectGo-資策會全端培訓專題\" class=\"headerlink\" title=\"SelectGo - 資策會全端培訓專題\"></a>SelectGo - 資策會全端培訓專題</h2><h3 id=\"緣由-1\"><a href=\"#緣由-1\" class=\"headerlink\" title=\"緣由\"></a>緣由</h3><p>因日本代購盛行，且比較沒有冷門的商品代購，為此而開發的網站，每個用戶可以根據自己需求到許願池發佈文章並且加入購物車購買。</p>\n<h3 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>本專題使用原生 React 前端框架與 HTML、CSS、Javascript、製作而成，後端採用 PHP 與 MySQL 實現 API 資料抓取與處理。</p>\n<p>我負責得部分為購物車與結帳頁面製作，並串接第三方金流 API ，完成站內購買。</p>\n<h4 id=\"特色功能\"><a href=\"#特色功能\" class=\"headerlink\" title=\"特色功能\"></a>特色功能</h4><ul>\n<li>從資料庫使用 API 獲得用戶購物車資料</li>\n<li>前端 UX 設計 ，讓使用者精確知道金額異動</li>\n<li>使用匯率 API 獲取即時匯率，並提供快速轉換金額功能</li>\n<li>在購物車新增、移除商品資料</li>\n<li>折扣碼輸入與改變金額</li>\n<li>送出表單錯誤判定</li>\n<li>串接第三方金流送出表單資料，並跳轉回網站取得成功或失敗付款提示</li>\n</ul>\n<p><a href=\"https://aliceric27.github.io/littleweb/\">Source</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ud2W5ibur4U\">演示影片</a></p>\n<img src=\"https://i.imgur.com/KINoMrc.png\" alt=\"image-20230205174410740\" style=\"zoom:50%;\" />\n\n\n<h2 id=\"Startluo-官網-冠宇數位科技股份有限公司\"><a href=\"#Startluo-官網-冠宇數位科技股份有限公司\" class=\"headerlink\" title=\"Startluo 官網 - 冠宇數位科技股份有限公司\"></a>Startluo 官網 - 冠宇數位科技股份有限公司</h2><h3 id=\"摘要-2\"><a href=\"#摘要-2\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>主要替遊戲設計一個網站、該網站包含排行榜、用戶資料、儲值金額等功能</p>\n<img src=\"https://i.imgur.com/ZTfMxMu.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n<ul>\n<li>與美術協同Figma網站規劃切版、功能撰寫</li>\n<li>釐清PM與用戶需求並完成、新增功能</li>\n<li>採用Vue3撰寫功能、Vite打包工具、Pinia狀態管理</li>\n<li>採用SCSS、Tailwind框架</li>\n<li>第三方Firebase登入驗證</li>\n<li>Axios做API後端資料串接與整理</li>\n</ul>\n<h2 id=\"中央控制系統-日易人工智慧有限公司\"><a href=\"#中央控制系統-日易人工智慧有限公司\" class=\"headerlink\" title=\"中央控制系統 - 日易人工智慧有限公司\"></a>中央控制系統 - 日易人工智慧有限公司</h2><h3 id=\"摘要-3\"><a href=\"#摘要-3\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>飯店內的中央控制系統，可於頁面上查看設備資訊，並控制設備開關</p>\n<img src=\"https://i.imgur.com/6RTpJr4.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n<ul>\n<li>Nuxt3、Vue3 框架撰寫</li>\n<li>Figma 與美術對稿切版</li>\n<li>Socket.io 套件串接 Socket 協議資料</li>\n<li>Tailwind SCSS 等前端開發開套件進行樣式切版</li>\n</ul>\n<p><a href=\"https://github.com/aliceric27/FloramosHotel\">Source</a><br><strong>為公司隱私設為私人專案，可於線下展示</strong></p>\n<hr>\n","excerpt":"<p>嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。</p>","more":"<h2 id=\"學歷\"><a href=\"#學歷\" class=\"headerlink\" title=\"學歷\"></a>學歷</h2><p><strong>樹德科技大學 - 資訊管理系 2013&#x2F;09-2017&#x2F;09</strong></p>\n<h2 id=\"經歷\"><a href=\"#經歷\" class=\"headerlink\" title=\"經歷\"></a>經歷</h2><h3 id=\"微樂應用科技有限公司-2024-3\"><a href=\"#微樂應用科技有限公司-2024-3\" class=\"headerlink\" title=\"微樂應用科技有限公司 2024.3 -\"></a>微樂應用科技有限公司 2024.3 -</h3><h4 id=\"前端工程師\"><a href=\"#前端工程師\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>前端頁面切版、調整</li>\n<li>後端 API 串接測試</li>\n<li>Vue.js 模板撰寫</li>\n</ul>\n<h3 id=\"日易人工智慧有限公司-2023-10-2024-02\"><a href=\"#日易人工智慧有限公司-2023-10-2024-02\" class=\"headerlink\" title=\"日易人工智慧有限公司 2023.10 - 2024.02\"></a>日易人工智慧有限公司 2023.10 - 2024.02</h3><h4 id=\"前端工程師-1\"><a href=\"#前端工程師-1\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>前端切版</li>\n<li>前端 Nuxt 框架規劃</li>\n<li>前端 API 資料串接</li>\n<li>Socket 資料串接</li>\n</ul>\n<h3 id=\"冠宇數位科技股份有限公司-2023-03-2023-08\"><a href=\"#冠宇數位科技股份有限公司-2023-03-2023-08\" class=\"headerlink\" title=\"冠宇數位科技股份有限公司 2023.03 - 2023.08\"></a>冠宇數位科技股份有限公司 2023.03 - 2023.08</h3><h4 id=\"前端工程師-2\"><a href=\"#前端工程師-2\" class=\"headerlink\" title=\"前端工程師\"></a>前端工程師</h4><ul>\n<li>後臺前端維護建置 Typescript + Vue +  Element UI 架構</li>\n<li>遊戲官網獨立架設並串接 API 採 Vue 3 + Vite 打包工具</li>\n<li>前端切版與規劃，配合SCSS框架工具與Tailwind進行開發</li>\n</ul>\n<h3 id=\"資策會-全端工程師就業養成班-2022-10-2023-02\"><a href=\"#資策會-全端工程師就業養成班-2022-10-2023-02\" class=\"headerlink\" title=\"資策會-全端工程師就業養成班 2022.10 - 2023.02\"></a>資策會-全端工程師就業養成班 2022.10 - 2023.02</h3><h4 id=\"培訓技能\"><a href=\"#培訓技能\" class=\"headerlink\" title=\"培訓技能\"></a>培訓技能</h4><ul>\n<li>Html、CSS ，前端頁面切版設計</li>\n<li>JavaScript，網站與使用者互動之程式語言</li>\n<li>PHP，撰寫簡易後端 API</li>\n<li>MySQL， 關聯式資料庫架設、 CRUD 指令取得資料</li>\n<li>ReactJS，前端網頁框架</li>\n</ul>\n<h3 id=\"本能娛樂工作室-2019-10-2022-08\"><a href=\"#本能娛樂工作室-2019-10-2022-08\" class=\"headerlink\" title=\"本能娛樂工作室 2019.10-2022.08\"></a>本能娛樂工作室 2019.10-2022.08</h3><h4 id=\"遊戲企劃\"><a href=\"#遊戲企劃\" class=\"headerlink\" title=\"遊戲企劃\"></a>遊戲企劃</h4><ul>\n<li>規劃 Android 遊戲流程與計畫，協調工程師修改至符合規格</li>\n<li>撰寫遊戲文件、測試遊戲內容、協助處理上架與用戶反饋</li>\n<li>公司硬體設備維修與維護</li>\n</ul>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>Dear Reviewer， 你好！ 黃育緯，1994&#x2F;12&#x2F;15，畢業於國立岡山高中與樹德科技大學-資訊管理系，具企劃及程式設計之技術。</p>\n<p>大學製作的畢業專題為 Wordpress 電商網站，使用 WooCommerce 套件製作，出社會後輾轉做了許多的行業，曾在3C 賣場銷售過，也曾經到科技廠擔任 QC 品管人員，有幸見到不同的人事物，也讓我對人生未來的價值觀有一定的影響，最後落腳的工作是在台中，在這二年多的學習，讓我對程式開發流程有滿深的影響，也參與了大小專案的開發過程。</p>\n<p>離開上一份工作並尋找轉職的原因是我評估下自己具備的條件，讓我不滿足止步於企劃與溝通，現階段我的追求是”至少讓自己”不要裹足不前，進而在公司期滿後選擇進修前後端技術。</p>\n<p>在進修學習的過程中不斷的學到新技術的同時，可以感受到自己在學習上的優勢，以往曾經自行架設遊戲伺服器擅長蒐集資料與閱讀英文文件的習慣讓我尋找資料與解決問題的的經驗要相較其他同學多，在上一份工作團隊使用的技術在我學習的過程中漸漸明白當初與同事溝通之間所使用的工具實際上是如何運作的。</p>\n<p>很慶幸自己是在資訊發達的年代出生，運用網路上的資訊解決問題也改變了每個人的生活習慣，對於計算機網路的喜愛也讓我在轉職學習的過程中漸漸找到成就感與樂趣，使用工具不斷解決現有問題就是資訊發展得意義，對於求職路上也期許自己可以不斷精進自己的技能，對於每份工作盡力做到完美。</p>\n<p>《工作經歷》</p>\n<p><strong>本能工作室 (2019.10-2022.8)</strong></p>\n<p>在本能工作室初期，主要擔任助理工程師一職，負責協同工程師業務需求與團隊人事招募等相關工作，並協助處理完成的程式功能之測試，而團隊人數招募漸滿後被指派到遊戲團隊擔任遊戲企劃，團隊內主要開發 Android App 遊戲，而我在這個職務內負責的內容為企劃發想、溝通協調需求、協助 App 上架等相關事宜，最後遊戲開發完成也有成功上架到 Google Store 上，最後離開原因為公司縮編。</p>\n<hr>\n<p><strong>資策會全端班(2022.8-2023.2)</strong></p>\n<p>在上一份工作中，因考量未來職涯發展，故報名資策會全端班級進修技能，在此期間學習到了前端基本切版的技能、與前端 Javascript 程式邏輯撰寫、並且學習了後端語言 PHP ，MySQL資料庫等後端應用，在學習後期也學習了 React 框架，最終和同學組成團隊完成一項專案，而我在這個專案內所負則的部分為購物車的功能頁面包含前端切版與後端資料庫串接等，而我也閱讀了綠界相關 API 文件使用 PHP 完成測試的金流串接。</p>\n<hr>\n<p><strong>冠宇數位科技股份有限公司 (2023.3-2023.8)</strong></p>\n<p>冠宇是我的第一份工程師工作，擔任的是前端工程師，在入職初期主要負責後端的相關功能維護與修復功能，在這時碰到的新技術為 Vue 框架、Typescript 等在學習時沒有碰到的相關技術，在下班時會抽空查閱相關文件與其使用方式，在一個禮拜內就上手專案與相關功能新增維護。</p>\n<p>在職期間後期，被指派為主導開發 Startluo 遊戲官方網站的前端主工程師，專案前端均由我架構、切版、製作，架構時我採用的是 SPA 方式與 Vue 3 和 Vite 建構工具打包，也學習使用新的 CSS 框架 Tailwind 等相關技術，在架構與製作時一邊使用與學習，主要與美術配合負責前端頁面切版，與後端工程師協同 API 等相關功能串接，其中包含會員功能使用 Firebase OAuth 驗證、金流則與 MyCard 等第三方金流做串接。</p>\n<p>最後離開原因為主動離職。</p>\n<hr>\n<p><strong>日易人工智慧有限公司 (2023.10-2024.2)</strong></p>\n<p>在日易主要擔任前端工程師一職，負責開發後台介面，主要協同美術進行切版與後端工程師進行 API 資料串接．因開發後台沒有一個主要架構，所以在職的前端開發專案也是由我負責架構、撰寫功能，我在專案中使用較新的 Nuxt 框架，採用 Vue 撰寫，在架構與撰寫中學習與使用，而後碰到新的串接函式庫 socket.io 並學習 socket 相關功能串接。</p>\n<p>最後離職原因為主動離職。</p>\n<hr>\n<p><strong>微樂應用科技有限公司 (2024.3-)</strong></p>\n<p>目前在職中主要專精 JS 語言開發，與後端 API 串接，VueJs前端模板撰寫</p>\n<hr>\n<p>《自我期許》</p>\n<p>在每一份工作中，我都期待接受新的挑戰，也不會排斥使用新的技術以及學習新的技術，最害怕的是職場太安逸，讓人沒有進步的空間與動力，期許自己可以在每份工作中都可以有一點收穫與回饋，不斷成長精進自己。</p>\n<h2 id=\"電商網站-Lu-Shopping-大學期末專題\"><a href=\"#電商網站-Lu-Shopping-大學期末專題\" class=\"headerlink\" title=\"電商網站 Lu-Shopping - 大學期末專題\"></a>電商網站 Lu-Shopping - 大學期末專題</h2><p>使用 Wordpress 搭配 WooCommerce 建置</p>\n  <img src=\"https://i.imgur.com/dW00fox.png\" alt=\"DSC_0253\" style=\"zoom: 40%;\"/>\n\n  <img src=\"https://i.imgur.com/9uOOeFf.jpg\" alt=\"DSC_0254\" style=\"zoom:30%;\" />\n\n<h2 id=\"氣炸廚房-資策會全端培訓專題\"><a href=\"#氣炸廚房-資策會全端培訓專題\" class=\"headerlink\" title=\"氣炸廚房 - 資策會全端培訓專題\"></a>氣炸廚房 - 資策會全端培訓專題</h2><h3 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h3><p>因為平常有運動與飲食控制的習慣，也鑑於此餐廳的形象網站較為簡陋，因此假想此餐廳為用戶，並提出改進形象網站需求而製作此專題。</p>\n<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>本專題使用原生 HTML、CSS、Javascript 製作而成。<br>使用套件有包含 Chart.js、Swiper 等<br>使用 Git 作為版控、並部署到 Github Pages 上</p>\n<p><img src=\"https://i.imgur.com/OoF0QKA.png\" alt=\"image-20230205164022292\"></p>\n<p><a href=\"https://aliceric27.github.io/littleweb/\">網站連結</a></p>\n<h2 id=\"SelectGo-資策會全端培訓專題\"><a href=\"#SelectGo-資策會全端培訓專題\" class=\"headerlink\" title=\"SelectGo - 資策會全端培訓專題\"></a>SelectGo - 資策會全端培訓專題</h2><h3 id=\"緣由-1\"><a href=\"#緣由-1\" class=\"headerlink\" title=\"緣由\"></a>緣由</h3><p>因日本代購盛行，且比較沒有冷門的商品代購，為此而開發的網站，每個用戶可以根據自己需求到許願池發佈文章並且加入購物車購買。</p>\n<h3 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>本專題使用原生 React 前端框架與 HTML、CSS、Javascript、製作而成，後端採用 PHP 與 MySQL 實現 API 資料抓取與處理。</p>\n<p>我負責得部分為購物車與結帳頁面製作，並串接第三方金流 API ，完成站內購買。</p>\n<h4 id=\"特色功能\"><a href=\"#特色功能\" class=\"headerlink\" title=\"特色功能\"></a>特色功能</h4><ul>\n<li>從資料庫使用 API 獲得用戶購物車資料</li>\n<li>前端 UX 設計 ，讓使用者精確知道金額異動</li>\n<li>使用匯率 API 獲取即時匯率，並提供快速轉換金額功能</li>\n<li>在購物車新增、移除商品資料</li>\n<li>折扣碼輸入與改變金額</li>\n<li>送出表單錯誤判定</li>\n<li>串接第三方金流送出表單資料，並跳轉回網站取得成功或失敗付款提示</li>\n</ul>\n<p><a href=\"https://aliceric27.github.io/littleweb/\">Source</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ud2W5ibur4U\">演示影片</a></p>\n<img src=\"https://i.imgur.com/KINoMrc.png\" alt=\"image-20230205174410740\" style=\"zoom:50%;\" />\n\n\n<h2 id=\"Startluo-官網-冠宇數位科技股份有限公司\"><a href=\"#Startluo-官網-冠宇數位科技股份有限公司\" class=\"headerlink\" title=\"Startluo 官網 - 冠宇數位科技股份有限公司\"></a>Startluo 官網 - 冠宇數位科技股份有限公司</h2><h3 id=\"摘要-2\"><a href=\"#摘要-2\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>主要替遊戲設計一個網站、該網站包含排行榜、用戶資料、儲值金額等功能</p>\n<img src=\"https://i.imgur.com/ZTfMxMu.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n<ul>\n<li>與美術協同Figma網站規劃切版、功能撰寫</li>\n<li>釐清PM與用戶需求並完成、新增功能</li>\n<li>採用Vue3撰寫功能、Vite打包工具、Pinia狀態管理</li>\n<li>採用SCSS、Tailwind框架</li>\n<li>第三方Firebase登入驗證</li>\n<li>Axios做API後端資料串接與整理</li>\n</ul>\n<h2 id=\"中央控制系統-日易人工智慧有限公司\"><a href=\"#中央控制系統-日易人工智慧有限公司\" class=\"headerlink\" title=\"中央控制系統 - 日易人工智慧有限公司\"></a>中央控制系統 - 日易人工智慧有限公司</h2><h3 id=\"摘要-3\"><a href=\"#摘要-3\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>飯店內的中央控制系統，可於頁面上查看設備資訊，並控制設備開關</p>\n<img src=\"https://i.imgur.com/6RTpJr4.png\" alt=\"image-20230205174410740\" style=\"zoom:100%;\" />\n\n<ul>\n<li>Nuxt3、Vue3 框架撰寫</li>\n<li>Figma 與美術對稿切版</li>\n<li>Socket.io 套件串接 Socket 協議資料</li>\n<li>Tailwind SCSS 等前端開發開套件進行樣式切版</li>\n</ul>\n<p><a href=\"https://github.com/aliceric27/FloramosHotel\">Source</a><br><strong>為公司隱私設為私人專案，可於線下展示</strong></p>\n<hr>"},{"title":"JS 的 Even Loop 是什麼？","date":"2024-09-10T09:22:10.000Z","_content":"\n解釋 JS 中的 Even Loop 機制\n\n<!-- more -->\n------\n\n\n## 概述\n\n簡單來說 JS 是單執行緒的機制，為了支援非同步的任務，而在**JS引擎**中引入的一個機制\n\n機制內分為不同區塊 Stack、Queue、Heap\n\n- JS 程式碼在執行時會依序將任務放入 Stack ，中並按照順序執行。\n- 當一個任務呼叫為**非同步**任務時則會放在 Queue 內，待 Stack 內的任務完成後，會將 Queue 的任務放到 Stack 內最後按順序執行\n\n\n## Macrotask Queue、Microtask Queue\n\nCallback Queue 又分為 Macrotask Queue 和 Microtask Queue\n\n### Macrotask Queue\n\n- 從`<script src=\"...\">`外部下載的 script\n- DOM event handlers，例如 mousemove event 的 callback function handler\n- 各種 Web APIs，例如 setTimeout 的 callback function\n- ajax callback function\n\n![marcotask](https://gcdeng.com/assets/images/Screen_Shot_2021-05-16_at_10.37.11_PM-82dd3d3de0ac10d80cccff54a783ea5e.png)\n\n### Microtask Queue​\n\n- promise `.then/catch/finally` 中的 callback function\n- `queueMicrotask(func)` 中的 func\n\n簡單來說，像是 Promise.then 在非同步任務中是屬於 Microtask Queue​ ，在 Even Loop 則會被分配到優先執行的 Microtask Queue​\n\n每個 Macrotask 執行結束後會先將 Microtask queue 中的任務全部執行完，才會繼續執行瀏覽器渲染跟其他 Macrotask。\n\n> 舉例\n這個執行印出答案為 1,3,4,2\nMacrotask​ 為 console.log(1)\nMicrotask queue 為 Promise.then()\nMacrotask Queue 為 setTimeout()\n\n\n```js\n\nconsole.log(1);\n\nsetTimeout(function () {\n  console.log(2);\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log(3);\n  })\n  .then(function () {\n    console.log(4);\n  });\n\n```\n------\n\n附上更詳細的解釋，有影片和圖片解釋寫的非常完整\n\n[JavaScript Event Loop解說：單執行緒還能異步運算？](https://www.youtube.com/watch?v=z4S6ZxRD2rA&pp=ygUKRXZlbnQgTG9vcA%3D%3D)\n\n[深入了解事件迴圈(Event Loop)，Macrotask跟Microtask是什麼？](https://gcdeng.com/series/Javascript/javascript-deep-dive-into-event-loop)\n\n[請說明瀏覽器中的事件循環 (Event Loop)](https://www.explainthis.io/zh-hant/swe/what-is-event-loop)\n\n","source":"_posts/2024-09-10-js-event-loop.md","raw":"---\ntitle: JS 的 Even Loop 是什麼？\ndate: 2024-09-10 17:22:10\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n解釋 JS 中的 Even Loop 機制\n\n<!-- more -->\n------\n\n\n## 概述\n\n簡單來說 JS 是單執行緒的機制，為了支援非同步的任務，而在**JS引擎**中引入的一個機制\n\n機制內分為不同區塊 Stack、Queue、Heap\n\n- JS 程式碼在執行時會依序將任務放入 Stack ，中並按照順序執行。\n- 當一個任務呼叫為**非同步**任務時則會放在 Queue 內，待 Stack 內的任務完成後，會將 Queue 的任務放到 Stack 內最後按順序執行\n\n\n## Macrotask Queue、Microtask Queue\n\nCallback Queue 又分為 Macrotask Queue 和 Microtask Queue\n\n### Macrotask Queue\n\n- 從`<script src=\"...\">`外部下載的 script\n- DOM event handlers，例如 mousemove event 的 callback function handler\n- 各種 Web APIs，例如 setTimeout 的 callback function\n- ajax callback function\n\n![marcotask](https://gcdeng.com/assets/images/Screen_Shot_2021-05-16_at_10.37.11_PM-82dd3d3de0ac10d80cccff54a783ea5e.png)\n\n### Microtask Queue​\n\n- promise `.then/catch/finally` 中的 callback function\n- `queueMicrotask(func)` 中的 func\n\n簡單來說，像是 Promise.then 在非同步任務中是屬於 Microtask Queue​ ，在 Even Loop 則會被分配到優先執行的 Microtask Queue​\n\n每個 Macrotask 執行結束後會先將 Microtask queue 中的任務全部執行完，才會繼續執行瀏覽器渲染跟其他 Macrotask。\n\n> 舉例\n這個執行印出答案為 1,3,4,2\nMacrotask​ 為 console.log(1)\nMicrotask queue 為 Promise.then()\nMacrotask Queue 為 setTimeout()\n\n\n```js\n\nconsole.log(1);\n\nsetTimeout(function () {\n  console.log(2);\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log(3);\n  })\n  .then(function () {\n    console.log(4);\n  });\n\n```\n------\n\n附上更詳細的解釋，有影片和圖片解釋寫的非常完整\n\n[JavaScript Event Loop解說：單執行緒還能異步運算？](https://www.youtube.com/watch?v=z4S6ZxRD2rA&pp=ygUKRXZlbnQgTG9vcA%3D%3D)\n\n[深入了解事件迴圈(Event Loop)，Macrotask跟Microtask是什麼？](https://gcdeng.com/series/Javascript/javascript-deep-dive-into-event-loop)\n\n[請說明瀏覽器中的事件循環 (Event Loop)](https://www.explainthis.io/zh-hant/swe/what-is-event-loop)\n\n","slug":"2024-09-10-js-event-loop","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgsk70003qoudaz263a2h","content":"<p>解釋 JS 中的 Even Loop 機制</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>簡單來說 JS 是單執行緒的機制，為了支援非同步的任務，而在<strong>JS引擎</strong>中引入的一個機制</p>\n<p>機制內分為不同區塊 Stack、Queue、Heap</p>\n<ul>\n<li>JS 程式碼在執行時會依序將任務放入 Stack ，中並按照順序執行。</li>\n<li>當一個任務呼叫為<strong>非同步</strong>任務時則會放在 Queue 內，待 Stack 內的任務完成後，會將 Queue 的任務放到 Stack 內最後按順序執行</li>\n</ul>\n<h2 id=\"Macrotask-Queue、Microtask-Queue\"><a href=\"#Macrotask-Queue、Microtask-Queue\" class=\"headerlink\" title=\"Macrotask Queue、Microtask Queue\"></a>Macrotask Queue、Microtask Queue</h2><p>Callback Queue 又分為 Macrotask Queue 和 Microtask Queue</p>\n<h3 id=\"Macrotask-Queue\"><a href=\"#Macrotask-Queue\" class=\"headerlink\" title=\"Macrotask Queue\"></a>Macrotask Queue</h3><ul>\n<li>從<code>&lt;script src=&quot;...&quot;&gt;</code>外部下載的 script</li>\n<li>DOM event handlers，例如 mousemove event 的 callback function handler</li>\n<li>各種 Web APIs，例如 setTimeout 的 callback function</li>\n<li>ajax callback function</li>\n</ul>\n<p><img src=\"https://gcdeng.com/assets/images/Screen_Shot_2021-05-16_at_10.37.11_PM-82dd3d3de0ac10d80cccff54a783ea5e.png\" alt=\"marcotask\"></p>\n<h3 id=\"Microtask-Queue​\"><a href=\"#Microtask-Queue​\" class=\"headerlink\" title=\"Microtask Queue​\"></a>Microtask Queue​</h3><ul>\n<li>promise <code>.then/catch/finally</code> 中的 callback function</li>\n<li><code>queueMicrotask(func)</code> 中的 func</li>\n</ul>\n<p>簡單來說，像是 Promise.then 在非同步任務中是屬於 Microtask Queue​ ，在 Even Loop 則會被分配到優先執行的 Microtask Queue​</p>\n<p>每個 Macrotask 執行結束後會先將 Microtask queue 中的任務全部執行完，才會繼續執行瀏覽器渲染跟其他 Macrotask。</p>\n<blockquote>\n<p>舉例<br>這個執行印出答案為 1,3,4,2<br>Macrotask​ 為 console.log(1)<br>Microtask queue 為 Promise.then()<br>Macrotask Queue 為 setTimeout()</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>附上更詳細的解釋，有影片和圖片解釋寫的非常完整</p>\n<p><a href=\"https://www.youtube.com/watch?v=z4S6ZxRD2rA&pp=ygUKRXZlbnQgTG9vcA==\">JavaScript Event Loop解說：單執行緒還能異步運算？</a></p>\n<p><a href=\"https://gcdeng.com/series/Javascript/javascript-deep-dive-into-event-loop\">深入了解事件迴圈(Event Loop)，Macrotask跟Microtask是什麼？</a></p>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-event-loop\">請說明瀏覽器中的事件循環 (Event Loop)</a></p>\n","excerpt":"<p>解釋 JS 中的 Even Loop 機制</p>","more":"<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>簡單來說 JS 是單執行緒的機制，為了支援非同步的任務，而在<strong>JS引擎</strong>中引入的一個機制</p>\n<p>機制內分為不同區塊 Stack、Queue、Heap</p>\n<ul>\n<li>JS 程式碼在執行時會依序將任務放入 Stack ，中並按照順序執行。</li>\n<li>當一個任務呼叫為<strong>非同步</strong>任務時則會放在 Queue 內，待 Stack 內的任務完成後，會將 Queue 的任務放到 Stack 內最後按順序執行</li>\n</ul>\n<h2 id=\"Macrotask-Queue、Microtask-Queue\"><a href=\"#Macrotask-Queue、Microtask-Queue\" class=\"headerlink\" title=\"Macrotask Queue、Microtask Queue\"></a>Macrotask Queue、Microtask Queue</h2><p>Callback Queue 又分為 Macrotask Queue 和 Microtask Queue</p>\n<h3 id=\"Macrotask-Queue\"><a href=\"#Macrotask-Queue\" class=\"headerlink\" title=\"Macrotask Queue\"></a>Macrotask Queue</h3><ul>\n<li>從<code>&lt;script src=&quot;...&quot;&gt;</code>外部下載的 script</li>\n<li>DOM event handlers，例如 mousemove event 的 callback function handler</li>\n<li>各種 Web APIs，例如 setTimeout 的 callback function</li>\n<li>ajax callback function</li>\n</ul>\n<p><img src=\"https://gcdeng.com/assets/images/Screen_Shot_2021-05-16_at_10.37.11_PM-82dd3d3de0ac10d80cccff54a783ea5e.png\" alt=\"marcotask\"></p>\n<h3 id=\"Microtask-Queue​\"><a href=\"#Microtask-Queue​\" class=\"headerlink\" title=\"Microtask Queue​\"></a>Microtask Queue​</h3><ul>\n<li>promise <code>.then/catch/finally</code> 中的 callback function</li>\n<li><code>queueMicrotask(func)</code> 中的 func</li>\n</ul>\n<p>簡單來說，像是 Promise.then 在非同步任務中是屬於 Microtask Queue​ ，在 Even Loop 則會被分配到優先執行的 Microtask Queue​</p>\n<p>每個 Macrotask 執行結束後會先將 Microtask queue 中的任務全部執行完，才會繼續執行瀏覽器渲染跟其他 Macrotask。</p>\n<blockquote>\n<p>舉例<br>這個執行印出答案為 1,3,4,2<br>Macrotask​ 為 console.log(1)<br>Microtask queue 為 Promise.then()<br>Macrotask Queue 為 setTimeout()</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>附上更詳細的解釋，有影片和圖片解釋寫的非常完整</p>\n<p><a href=\"https://www.youtube.com/watch?v=z4S6ZxRD2rA&pp=ygUKRXZlbnQgTG9vcA==\">JavaScript Event Loop解說：單執行緒還能異步運算？</a></p>\n<p><a href=\"https://gcdeng.com/series/Javascript/javascript-deep-dive-into-event-loop\">深入了解事件迴圈(Event Loop)，Macrotask跟Microtask是什麼？</a></p>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-event-loop\">請說明瀏覽器中的事件循環 (Event Loop)</a></p>"},{"title":"這個 this 到底是什麼？","date":"2024-09-15T09:04:10.000Z","_content":"\n這個(this)到底是哪個？\n基本上這個(this)脫離物件呼叫，就沒有太大的意義。\n\n<!-- more -->\n------\n\n在 JavaScript 中，`this` 是一個經常讓人困惑的關鍵字，因為它的值在不同的情況下會有所變化。`this` 的值取決於函數的呼叫方式，而不是函數定義的地方。本文將介紹 `this` 在不同情況下的指向，並討論 `call`、`apply`、`bind` 這三種方法，以及如何解決 `this` 綁定的問題。\n\n## 函數呼叫方式\n\n在講解`this`前，我們要先知道 function 在呼叫時，有幾種方法\n\n1. 作為函數去呼叫\n2. 作為方法去呼叫\n3. 作為建構式用`new`的方式呼叫\n4. 透過`apply`、`call`的方式呼叫\n\n```js\nfunction sayByeBye(name) {\n    return `Bye bye ${name}`\n}\n\n/* 1. 作為一個函數去呼叫 */\nconsole.log(sayByeBye('Ben'))  // =>  Bye bye Ben\na = (function (who) {return who})('Ben') //IIFE,(immediately invoked function expression)\nconsole.log(a); // => Ben\n\n\nlet greeting = {\n    sayHello(name){\n        return `Hello ${name}`\n    }\n}\n/* 2. 作為一個方法去呼叫 */\nconsole.log(greeting.sayHello('Sabrina')) // => Hello Sabrina\n\n/* 3. 作為一個建構式，用new的方式去呼叫*/\nfunction Order(){}\norder1 = new Order()\nconsole.log(order1) // => {}\n\n/* 4. 透過apply and call的方式呼叫 */\nconsole.log(sayByeBye.apply(greeting, ['John'])) // => Bye bye John\nconsole.log(sayByeBye.call(greeting, 'John'))    // => Bye bye John\n```\n\n## 一般情況下的 this\n\n### 全域環境下的 this \n\n在全域範圍中（非嚴格模式），`this` 指向全域物件（在瀏覽器中是 `window`）。\n\n例如：\n\n```js\nconsole.log(this); // 在瀏覽器中，輸出 window\n```\n\n### 物件方法中的 this\n當函數作為物件的方法呼叫時，this 指向該物件。例如：\n\n```js\nconst obj = {\n  name: 'Alice',\n  greet: function() {\n    console.log(this.name);\n  }\n};\n\nobj.greet(); // 輸出 'Alice'\n```\n\n在這裡，`this`指向`obj`，因此`this.name`取到的是`obj.name`。\n\n### 獨立函數中的 this\n\n當函數在全域範圍中獨立呼叫時，`this`在非嚴格模式下會指向全域物件（瀏覽器中的`window`）。在嚴格模式下，`this`則會是`undefined`。\n\n```js\nfunction showThis() {\n  console.log(this);\n}\n\nshowThis(); // 非嚴格模式下，輸出 window\n```\n\n### 嚴格模式中的 this\n\n在嚴格模式下，`this`不再自動指向全域物件，如果函數獨立呼叫，`this`會是`undefined`。\n\n```js\n'use strict';\nfunction showThis() {\n  console.log(this);\n}\n\nshowThis(); // 輸出 undefined\n\n```\n\n### new 建構函數使用 this\n\n當使用`new`關鍵字來呼叫並建構函數時，`this`的指向會有所不同。\n\n`new`會建立一個新的實體物件，並且`this`會指向新創建的物件，而不是全域物件或其他任何物件。\n\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  // 正確的 this 綁定：使用箭頭函數\n  this.introduceArrow = () => {\n    console.log(`Hi, I'm ${this.name}`); // 這裡的 this 指向 Person 實例\n  };\n\n  // 錯誤的 this 綁定：使用普通函數\n  this.introduceRegular = function() {\n    setTimeout(function() {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 指向全域物件或 undefined（取決於嚴格模式）\n    }, 1000);\n  };\n}\n\nconst person1 = new Person('John');\n\nperson1.introduceArrow(); // 正確，輸出 'Hi, I'm John'\n\nperson1.introduceRegular(); // 錯誤，1秒後輸出 'Hi, I'm undefined'（或 'Hi, I'm ' 在嚴格模式下）\n```\n1. 使用箭頭函數的正確綁定在`introduceArrow`方法中，我們使用了箭頭函數。箭頭函數不會自己創建`this`，而是從其外部環境繼承`this`。在這裡，外部環境是`Person`的實例，因此`this`仍然指向`Person`實例，能夠正確地存取 name 屬性。\n\n2. 使用普通函數的錯誤綁定在`introduceRegular`方法中，我們使用了普通函數。這樣做會導致`setTimeout`中的回調函數創建自己的`this`，並且這個`this`指向全域物件（在瀏覽器中為`window`）或`undefined`（在嚴格模式下）。\n\n因此，當回調函數執行時，`this.name`無法正確取得`name`屬性，結果是`undefined`。\n\n#### 修正錯誤綁定的方法\n\n如果我們希望修正普通函數中的`this`綁定，可以使用`bind`方法或將回調函數改為箭頭函數。\n\n**使用`bind`方法**\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.introduceRegular = function() {\n    setTimeout(function() {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 綁定會被 bind\n    }.bind(this), 1000);\n  };\n}\n\nconst person2 = new Person('Jane');\n\nperson2.introduceRegular(); // 正確，1秒後輸出 'Hi, I'm Jane'\n\n```\n**使用箭頭函數**\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.introduceRegular = function() {\n    setTimeout(() => {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 繼承自 Person 實例\n    }, 1000);\n  };\n}\n\nconst person3 = new Person('Doe');\n\nperson3.introduceRegular(); // 正確，1秒後輸出 'Hi, I'm Doe'\n\n```\n\n\n在以上修正方法中，`bind`方法可以將`this`繫結到指定的物件，而箭頭函數可以自動繼承外部環境中的`this`。這樣可以確保在回調函數中，`this`可以正確地指向實例對象。\n\n------\n\n### call、apply 與 bind 解決 this 綁定\n\n當我們希望手動指定`this`的值時，可以使用`call`、`apply`或`bind`。\n每個 function 都會自帶這些方法可以呼叫直接呼叫使用。\n\n#### call\n`call`方法允許我們明確地設定`this`的值並立即執行該函數。它的語法是：\n```js\nfunction.call(thisArg, arg1, arg2, ...)。\n```\n第一個參數，就是我們要指定的`this`\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Bob'\n};\n\nintroduce.call(person, 'Hello'); // 輸出 'Hello, 我是 Bob'\n```\n\n#### apply\n\n`apply`與`call`類似，不同的是，`apply`接受的是一個參數陣列而不是單獨的參數。\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Charlie'\n};\n\nintroduce.apply(person, ['Hi']); // 輸出 'Hi, 我是 Charlie'\n\n```\n\n`apply`對於參數的傳遞方式更加靈活，尤其在參數數量不確定時。\n\n`bind`與`call`和`apply`不同的是，`bind`並不會立即執行函數，它會返回一個新的函數，並將`this`**永遠**綁定到指定的物件。\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Diana'\n};\n\nconst boundIntroduce = introduce.bind(person);\nboundIntroduce('Hey'); // 輸出 'Hey, 我是 Diana'\n\n```\n\n------\n\n## 常見問題與解決方法\n\n### 問題：回調函數中的 this 不正確\n\n在回調函數（例如事件處理器、`setTimeout`）中，`this`的值通常會出現問題，因為它可能會指向全域物件或`undefined`。解決這個問題的方法包括使用`bind`或箭頭函數。\n\n\n\n**使用`bind`**\n\n```js\nconst button = document.getElementById('myButton');\n\nconst obj = {\n  name: 'Emily',\n  handleClick: function() {\n    console.log(this.name);\n  }\n};\n\nbutton.addEventListener('click', obj.handleClick.bind(obj));\n```\n\n**使用箭頭函數**\n\n箭頭函數不會自己綁定`this`，而是繼承外部環境中的`this`。\n\n```js\nconst obj = {\n  name: 'Frank',\n  handleClick: function() {\n    document.getElementById('myButton').addEventListener('click', () => {\n      console.log(this.name);\n    });\n  }\n};\n\nobj.handleClick(); // 點擊時輸出 'Frank'\n```\n\n**範例**\n\n```js\nconst obj = {\n  name: 'Alice',\n  showName: function() {\n    console.log(this.name);\n  },\n  delayedShowName: function() {\n    setTimeout(function() {\n      console.log(this.name); // 這裡的 this 指向 window（非嚴格模式下），而不是 obj\n    }, 1000);\n  }\n};\n\nobj.showName(); // 正確，輸出 'Alice'\nobj.delayedShowName(); // 不正確，輸出 'undefined'（因為 this 指向 window）\n```\n\n\n------\n\n[淺談 JavaScript 頭號難題 this](https://blog.huli.tw/2019/02/23/javascript-what-is-this/)\n\n[this和函數呼叫方式](https://medium.com/@hupinwei/javascript%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-this%E5%92%8C%E5%87%BD%E6%95%B8%E5%91%BC%E5%8F%AB%E6%96%B9%E5%BC%8F-6a2ea4eb14a)","source":"_posts/2024-09-15-this.md","raw":"---\ntitle: 這個 this 到底是什麼？\ndate: 2024-09-15 17:04:10\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n這個(this)到底是哪個？\n基本上這個(this)脫離物件呼叫，就沒有太大的意義。\n\n<!-- more -->\n------\n\n在 JavaScript 中，`this` 是一個經常讓人困惑的關鍵字，因為它的值在不同的情況下會有所變化。`this` 的值取決於函數的呼叫方式，而不是函數定義的地方。本文將介紹 `this` 在不同情況下的指向，並討論 `call`、`apply`、`bind` 這三種方法，以及如何解決 `this` 綁定的問題。\n\n## 函數呼叫方式\n\n在講解`this`前，我們要先知道 function 在呼叫時，有幾種方法\n\n1. 作為函數去呼叫\n2. 作為方法去呼叫\n3. 作為建構式用`new`的方式呼叫\n4. 透過`apply`、`call`的方式呼叫\n\n```js\nfunction sayByeBye(name) {\n    return `Bye bye ${name}`\n}\n\n/* 1. 作為一個函數去呼叫 */\nconsole.log(sayByeBye('Ben'))  // =>  Bye bye Ben\na = (function (who) {return who})('Ben') //IIFE,(immediately invoked function expression)\nconsole.log(a); // => Ben\n\n\nlet greeting = {\n    sayHello(name){\n        return `Hello ${name}`\n    }\n}\n/* 2. 作為一個方法去呼叫 */\nconsole.log(greeting.sayHello('Sabrina')) // => Hello Sabrina\n\n/* 3. 作為一個建構式，用new的方式去呼叫*/\nfunction Order(){}\norder1 = new Order()\nconsole.log(order1) // => {}\n\n/* 4. 透過apply and call的方式呼叫 */\nconsole.log(sayByeBye.apply(greeting, ['John'])) // => Bye bye John\nconsole.log(sayByeBye.call(greeting, 'John'))    // => Bye bye John\n```\n\n## 一般情況下的 this\n\n### 全域環境下的 this \n\n在全域範圍中（非嚴格模式），`this` 指向全域物件（在瀏覽器中是 `window`）。\n\n例如：\n\n```js\nconsole.log(this); // 在瀏覽器中，輸出 window\n```\n\n### 物件方法中的 this\n當函數作為物件的方法呼叫時，this 指向該物件。例如：\n\n```js\nconst obj = {\n  name: 'Alice',\n  greet: function() {\n    console.log(this.name);\n  }\n};\n\nobj.greet(); // 輸出 'Alice'\n```\n\n在這裡，`this`指向`obj`，因此`this.name`取到的是`obj.name`。\n\n### 獨立函數中的 this\n\n當函數在全域範圍中獨立呼叫時，`this`在非嚴格模式下會指向全域物件（瀏覽器中的`window`）。在嚴格模式下，`this`則會是`undefined`。\n\n```js\nfunction showThis() {\n  console.log(this);\n}\n\nshowThis(); // 非嚴格模式下，輸出 window\n```\n\n### 嚴格模式中的 this\n\n在嚴格模式下，`this`不再自動指向全域物件，如果函數獨立呼叫，`this`會是`undefined`。\n\n```js\n'use strict';\nfunction showThis() {\n  console.log(this);\n}\n\nshowThis(); // 輸出 undefined\n\n```\n\n### new 建構函數使用 this\n\n當使用`new`關鍵字來呼叫並建構函數時，`this`的指向會有所不同。\n\n`new`會建立一個新的實體物件，並且`this`會指向新創建的物件，而不是全域物件或其他任何物件。\n\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  // 正確的 this 綁定：使用箭頭函數\n  this.introduceArrow = () => {\n    console.log(`Hi, I'm ${this.name}`); // 這裡的 this 指向 Person 實例\n  };\n\n  // 錯誤的 this 綁定：使用普通函數\n  this.introduceRegular = function() {\n    setTimeout(function() {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 指向全域物件或 undefined（取決於嚴格模式）\n    }, 1000);\n  };\n}\n\nconst person1 = new Person('John');\n\nperson1.introduceArrow(); // 正確，輸出 'Hi, I'm John'\n\nperson1.introduceRegular(); // 錯誤，1秒後輸出 'Hi, I'm undefined'（或 'Hi, I'm ' 在嚴格模式下）\n```\n1. 使用箭頭函數的正確綁定在`introduceArrow`方法中，我們使用了箭頭函數。箭頭函數不會自己創建`this`，而是從其外部環境繼承`this`。在這裡，外部環境是`Person`的實例，因此`this`仍然指向`Person`實例，能夠正確地存取 name 屬性。\n\n2. 使用普通函數的錯誤綁定在`introduceRegular`方法中，我們使用了普通函數。這樣做會導致`setTimeout`中的回調函數創建自己的`this`，並且這個`this`指向全域物件（在瀏覽器中為`window`）或`undefined`（在嚴格模式下）。\n\n因此，當回調函數執行時，`this.name`無法正確取得`name`屬性，結果是`undefined`。\n\n#### 修正錯誤綁定的方法\n\n如果我們希望修正普通函數中的`this`綁定，可以使用`bind`方法或將回調函數改為箭頭函數。\n\n**使用`bind`方法**\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.introduceRegular = function() {\n    setTimeout(function() {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 綁定會被 bind\n    }.bind(this), 1000);\n  };\n}\n\nconst person2 = new Person('Jane');\n\nperson2.introduceRegular(); // 正確，1秒後輸出 'Hi, I'm Jane'\n\n```\n**使用箭頭函數**\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.introduceRegular = function() {\n    setTimeout(() => {\n      console.log(`Hi, I'm ${this.name}`); // 這裡的 this 繼承自 Person 實例\n    }, 1000);\n  };\n}\n\nconst person3 = new Person('Doe');\n\nperson3.introduceRegular(); // 正確，1秒後輸出 'Hi, I'm Doe'\n\n```\n\n\n在以上修正方法中，`bind`方法可以將`this`繫結到指定的物件，而箭頭函數可以自動繼承外部環境中的`this`。這樣可以確保在回調函數中，`this`可以正確地指向實例對象。\n\n------\n\n### call、apply 與 bind 解決 this 綁定\n\n當我們希望手動指定`this`的值時，可以使用`call`、`apply`或`bind`。\n每個 function 都會自帶這些方法可以呼叫直接呼叫使用。\n\n#### call\n`call`方法允許我們明確地設定`this`的值並立即執行該函數。它的語法是：\n```js\nfunction.call(thisArg, arg1, arg2, ...)。\n```\n第一個參數，就是我們要指定的`this`\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Bob'\n};\n\nintroduce.call(person, 'Hello'); // 輸出 'Hello, 我是 Bob'\n```\n\n#### apply\n\n`apply`與`call`類似，不同的是，`apply`接受的是一個參數陣列而不是單獨的參數。\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Charlie'\n};\n\nintroduce.apply(person, ['Hi']); // 輸出 'Hi, 我是 Charlie'\n\n```\n\n`apply`對於參數的傳遞方式更加靈活，尤其在參數數量不確定時。\n\n`bind`與`call`和`apply`不同的是，`bind`並不會立即執行函數，它會返回一個新的函數，並將`this`**永遠**綁定到指定的物件。\n\n```js\nfunction introduce(greeting) {\n  console.log(`${greeting}, 我是 ${this.name}`);\n}\n\nconst person = {\n  name: 'Diana'\n};\n\nconst boundIntroduce = introduce.bind(person);\nboundIntroduce('Hey'); // 輸出 'Hey, 我是 Diana'\n\n```\n\n------\n\n## 常見問題與解決方法\n\n### 問題：回調函數中的 this 不正確\n\n在回調函數（例如事件處理器、`setTimeout`）中，`this`的值通常會出現問題，因為它可能會指向全域物件或`undefined`。解決這個問題的方法包括使用`bind`或箭頭函數。\n\n\n\n**使用`bind`**\n\n```js\nconst button = document.getElementById('myButton');\n\nconst obj = {\n  name: 'Emily',\n  handleClick: function() {\n    console.log(this.name);\n  }\n};\n\nbutton.addEventListener('click', obj.handleClick.bind(obj));\n```\n\n**使用箭頭函數**\n\n箭頭函數不會自己綁定`this`，而是繼承外部環境中的`this`。\n\n```js\nconst obj = {\n  name: 'Frank',\n  handleClick: function() {\n    document.getElementById('myButton').addEventListener('click', () => {\n      console.log(this.name);\n    });\n  }\n};\n\nobj.handleClick(); // 點擊時輸出 'Frank'\n```\n\n**範例**\n\n```js\nconst obj = {\n  name: 'Alice',\n  showName: function() {\n    console.log(this.name);\n  },\n  delayedShowName: function() {\n    setTimeout(function() {\n      console.log(this.name); // 這裡的 this 指向 window（非嚴格模式下），而不是 obj\n    }, 1000);\n  }\n};\n\nobj.showName(); // 正確，輸出 'Alice'\nobj.delayedShowName(); // 不正確，輸出 'undefined'（因為 this 指向 window）\n```\n\n\n------\n\n[淺談 JavaScript 頭號難題 this](https://blog.huli.tw/2019/02/23/javascript-what-is-this/)\n\n[this和函數呼叫方式](https://medium.com/@hupinwei/javascript%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-this%E5%92%8C%E5%87%BD%E6%95%B8%E5%91%BC%E5%8F%AB%E6%96%B9%E5%BC%8F-6a2ea4eb14a)","slug":"2024-09-15-this","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgsk80005qoud8gv4bp0s","content":"<p>這個(this)到底是哪個？<br>基本上這個(this)脫離物件呼叫，就沒有太大的意義。</p>\n<span id=\"more\"></span>\n<hr>\n<p>在 JavaScript 中，<code>this</code> 是一個經常讓人困惑的關鍵字，因為它的值在不同的情況下會有所變化。<code>this</code> 的值取決於函數的呼叫方式，而不是函數定義的地方。本文將介紹 <code>this</code> 在不同情況下的指向，並討論 <code>call</code>、<code>apply</code>、<code>bind</code> 這三種方法，以及如何解決 <code>this</code> 綁定的問題。</p>\n<h2 id=\"函數呼叫方式\"><a href=\"#函數呼叫方式\" class=\"headerlink\" title=\"函數呼叫方式\"></a>函數呼叫方式</h2><p>在講解<code>this</code>前，我們要先知道 function 在呼叫時，有幾種方法</p>\n<ol>\n<li>作為函數去呼叫</li>\n<li>作為方法去呼叫</li>\n<li>作為建構式用<code>new</code>的方式呼叫</li>\n<li>透過<code>apply</code>、<code>call</code>的方式呼叫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayByeBye</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Bye bye <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 1. 作為一個函數去呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sayByeBye</span>(<span class=\"string\">&#x27;Ben&#x27;</span>))  <span class=\"comment\">// =&gt;  Bye bye Ben</span></span><br><span class=\"line\">a = (<span class=\"keyword\">function</span> (<span class=\"params\">who</span>) &#123;<span class=\"keyword\">return</span> who&#125;)(<span class=\"string\">&#x27;Ben&#x27;</span>) <span class=\"comment\">//IIFE,(immediately invoked function expression)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// =&gt; Ben</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 2. 作為一個方法去呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting.<span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Sabrina&#x27;</span>)) <span class=\"comment\">// =&gt; Hello Sabrina</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 3. 作為一個建構式，用new的方式去呼叫*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Order</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">order1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(order1) <span class=\"comment\">// =&gt; &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 4. 透過apply and call的方式呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sayByeBye.<span class=\"title function_\">apply</span>(greeting, [<span class=\"string\">&#x27;John&#x27;</span>])) <span class=\"comment\">// =&gt; Bye bye John</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sayByeBye.<span class=\"title function_\">call</span>(greeting, <span class=\"string\">&#x27;John&#x27;</span>))    <span class=\"comment\">// =&gt; Bye bye John</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一般情況下的-this\"><a href=\"#一般情況下的-this\" class=\"headerlink\" title=\"一般情況下的 this\"></a>一般情況下的 this</h2><h3 id=\"全域環境下的-this\"><a href=\"#全域環境下的-this\" class=\"headerlink\" title=\"全域環境下的 this\"></a>全域環境下的 this</h3><p>在全域範圍中（非嚴格模式），<code>this</code> 指向全域物件（在瀏覽器中是 <code>window</code>）。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 在瀏覽器中，輸出 window</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件方法中的-this\"><a href=\"#物件方法中的-this\" class=\"headerlink\" title=\"物件方法中的 this\"></a>物件方法中的 this</h3><p>當函數作為物件的方法呼叫時，this 指向該物件。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 輸出 &#x27;Alice&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在這裡，<code>this</code>指向<code>obj</code>，因此<code>this.name</code>取到的是<code>obj.name</code>。</p>\n<h3 id=\"獨立函數中的-this\"><a href=\"#獨立函數中的-this\" class=\"headerlink\" title=\"獨立函數中的 this\"></a>獨立函數中的 this</h3><p>當函數在全域範圍中獨立呼叫時，<code>this</code>在非嚴格模式下會指向全域物件（瀏覽器中的<code>window</code>）。在嚴格模式下，<code>this</code>則會是<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showThis</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">showThis</span>(); <span class=\"comment\">// 非嚴格模式下，輸出 window</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嚴格模式中的-this\"><a href=\"#嚴格模式中的-this\" class=\"headerlink\" title=\"嚴格模式中的 this\"></a>嚴格模式中的 this</h3><p>在嚴格模式下，<code>this</code>不再自動指向全域物件，如果函數獨立呼叫，<code>this</code>會是<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showThis</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">showThis</span>(); <span class=\"comment\">// 輸出 undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new-建構函數使用-this\"><a href=\"#new-建構函數使用-this\" class=\"headerlink\" title=\"new 建構函數使用 this\"></a>new 建構函數使用 this</h3><p>當使用<code>new</code>關鍵字來呼叫並建構函數時，<code>this</code>的指向會有所不同。</p>\n<p><code>new</code>會建立一個新的實體物件，並且<code>this</code>會指向新創建的物件，而不是全域物件或其他任何物件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 正確的 this 綁定：使用箭頭函數</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceArrow</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 指向 Person 實例</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 錯誤的 this 綁定：使用普通函數</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 指向全域物件或 undefined（取決於嚴格模式）</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">introduceArrow</span>(); <span class=\"comment\">// 正確，輸出 &#x27;Hi, I&#x27;m John&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 錯誤，1秒後輸出 &#x27;Hi, I&#x27;m undefined&#x27;（或 &#x27;Hi, I&#x27;m &#x27; 在嚴格模式下）</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用箭頭函數的正確綁定在<code>introduceArrow</code>方法中，我們使用了箭頭函數。箭頭函數不會自己創建<code>this</code>，而是從其外部環境繼承<code>this</code>。在這裡，外部環境是<code>Person</code>的實例，因此<code>this</code>仍然指向<code>Person</code>實例，能夠正確地存取 name 屬性。</p>\n</li>\n<li><p>使用普通函數的錯誤綁定在<code>introduceRegular</code>方法中，我們使用了普通函數。這樣做會導致<code>setTimeout</code>中的回調函數創建自己的<code>this</code>，並且這個<code>this</code>指向全域物件（在瀏覽器中為<code>window</code>）或<code>undefined</code>（在嚴格模式下）。</p>\n</li>\n</ol>\n<p>因此，當回調函數執行時，<code>this.name</code>無法正確取得<code>name</code>屬性，結果是<code>undefined</code>。</p>\n<h4 id=\"修正錯誤綁定的方法\"><a href=\"#修正錯誤綁定的方法\" class=\"headerlink\" title=\"修正錯誤綁定的方法\"></a>修正錯誤綁定的方法</h4><p>如果我們希望修正普通函數中的<code>this</code>綁定，可以使用<code>bind</code>方法或將回調函數改為箭頭函數。</p>\n<p><strong>使用<code>bind</code>方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 綁定會被 bind</span></span><br><span class=\"line\">    &#125;.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Jane&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person2.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 正確，1秒後輸出 &#x27;Hi, I&#x27;m Jane&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>使用箭頭函數</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 繼承自 Person 實例</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Doe&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person3.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 正確，1秒後輸出 &#x27;Hi, I&#x27;m Doe&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>在以上修正方法中，<code>bind</code>方法可以將<code>this</code>繫結到指定的物件，而箭頭函數可以自動繼承外部環境中的<code>this</code>。這樣可以確保在回調函數中，<code>this</code>可以正確地指向實例對象。</p>\n<hr>\n<h3 id=\"call、apply-與-bind-解決-this-綁定\"><a href=\"#call、apply-與-bind-解決-this-綁定\" class=\"headerlink\" title=\"call、apply 與 bind 解決 this 綁定\"></a>call、apply 與 bind 解決 this 綁定</h3><p>當我們希望手動指定<code>this</code>的值時，可以使用<code>call</code>、<code>apply</code>或<code>bind</code>。<br>每個 function 都會自帶這些方法可以呼叫直接呼叫使用。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p><code>call</code>方法允許我們明確地設定<code>this</code>的值並立即執行該函數。它的語法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">call</span>(thisArg, arg1, arg2, ...)。</span><br></pre></td></tr></table></figure>\n<p>第一個參數，就是我們要指定的<code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.<span class=\"title function_\">call</span>(person, <span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 輸出 &#x27;Hello, 我是 Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p><code>apply</code>與<code>call</code>類似，不同的是，<code>apply</code>接受的是一個參數陣列而不是單獨的參數。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Charlie&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.<span class=\"title function_\">apply</span>(person, [<span class=\"string\">&#x27;Hi&#x27;</span>]); <span class=\"comment\">// 輸出 &#x27;Hi, 我是 Charlie&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>apply</code>對於參數的傳遞方式更加靈活，尤其在參數數量不確定時。</p>\n<p><code>bind</code>與<code>call</code>和<code>apply</code>不同的是，<code>bind</code>並不會立即執行函數，它會返回一個新的函數，並將<code>this</code><strong>永遠</strong>綁定到指定的物件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Diana&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> boundIntroduce = introduce.<span class=\"title function_\">bind</span>(person);</span><br><span class=\"line\"><span class=\"title function_\">boundIntroduce</span>(<span class=\"string\">&#x27;Hey&#x27;</span>); <span class=\"comment\">// 輸出 &#x27;Hey, 我是 Diana&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"常見問題與解決方法\"><a href=\"#常見問題與解決方法\" class=\"headerlink\" title=\"常見問題與解決方法\"></a>常見問題與解決方法</h2><h3 id=\"問題：回調函數中的-this-不正確\"><a href=\"#問題：回調函數中的-this-不正確\" class=\"headerlink\" title=\"問題：回調函數中的 this 不正確\"></a>問題：回調函數中的 this 不正確</h3><p>在回調函數（例如事件處理器、<code>setTimeout</code>）中，<code>this</code>的值通常會出現問題，因為它可能會指向全域物件或<code>undefined</code>。解決這個問題的方法包括使用<code>bind</code>或箭頭函數。</p>\n<p><strong>使用<code>bind</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myButton&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Emily&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">handleClick</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, obj.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(obj));</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用箭頭函數</strong></p>\n<p>箭頭函數不會自己綁定<code>this</code>，而是繼承外部環境中的<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Frank&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">handleClick</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myButton&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">handleClick</span>(); <span class=\"comment\">// 點擊時輸出 &#x27;Frank&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>範例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">showName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">delayedShowName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 這裡的 this 指向 window（非嚴格模式下），而不是 obj</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">showName</span>(); <span class=\"comment\">// 正確，輸出 &#x27;Alice&#x27;</span></span><br><span class=\"line\">obj.<span class=\"title function_\">delayedShowName</span>(); <span class=\"comment\">// 不正確，輸出 &#x27;undefined&#x27;（因為 this 指向 window）</span></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p><a href=\"https://blog.huli.tw/2019/02/23/javascript-what-is-this/\">淺談 JavaScript 頭號難題 this</a></p>\n<p><a href=\"https://medium.com/@hupinwei/javascript%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-this%E5%92%8C%E5%87%BD%E6%95%B8%E5%91%BC%E5%8F%AB%E6%96%B9%E5%BC%8F-6a2ea4eb14a\">this和函數呼叫方式</a></p>\n","excerpt":"<p>這個(this)到底是哪個？<br>基本上這個(this)脫離物件呼叫，就沒有太大的意義。</p>","more":"<hr>\n<p>在 JavaScript 中，<code>this</code> 是一個經常讓人困惑的關鍵字，因為它的值在不同的情況下會有所變化。<code>this</code> 的值取決於函數的呼叫方式，而不是函數定義的地方。本文將介紹 <code>this</code> 在不同情況下的指向，並討論 <code>call</code>、<code>apply</code>、<code>bind</code> 這三種方法，以及如何解決 <code>this</code> 綁定的問題。</p>\n<h2 id=\"函數呼叫方式\"><a href=\"#函數呼叫方式\" class=\"headerlink\" title=\"函數呼叫方式\"></a>函數呼叫方式</h2><p>在講解<code>this</code>前，我們要先知道 function 在呼叫時，有幾種方法</p>\n<ol>\n<li>作為函數去呼叫</li>\n<li>作為方法去呼叫</li>\n<li>作為建構式用<code>new</code>的方式呼叫</li>\n<li>透過<code>apply</code>、<code>call</code>的方式呼叫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayByeBye</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Bye bye <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 1. 作為一個函數去呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sayByeBye</span>(<span class=\"string\">&#x27;Ben&#x27;</span>))  <span class=\"comment\">// =&gt;  Bye bye Ben</span></span><br><span class=\"line\">a = (<span class=\"keyword\">function</span> (<span class=\"params\">who</span>) &#123;<span class=\"keyword\">return</span> who&#125;)(<span class=\"string\">&#x27;Ben&#x27;</span>) <span class=\"comment\">//IIFE,(immediately invoked function expression)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// =&gt; Ben</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 2. 作為一個方法去呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting.<span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Sabrina&#x27;</span>)) <span class=\"comment\">// =&gt; Hello Sabrina</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 3. 作為一個建構式，用new的方式去呼叫*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Order</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">order1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(order1) <span class=\"comment\">// =&gt; &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 4. 透過apply and call的方式呼叫 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sayByeBye.<span class=\"title function_\">apply</span>(greeting, [<span class=\"string\">&#x27;John&#x27;</span>])) <span class=\"comment\">// =&gt; Bye bye John</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sayByeBye.<span class=\"title function_\">call</span>(greeting, <span class=\"string\">&#x27;John&#x27;</span>))    <span class=\"comment\">// =&gt; Bye bye John</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一般情況下的-this\"><a href=\"#一般情況下的-this\" class=\"headerlink\" title=\"一般情況下的 this\"></a>一般情況下的 this</h2><h3 id=\"全域環境下的-this\"><a href=\"#全域環境下的-this\" class=\"headerlink\" title=\"全域環境下的 this\"></a>全域環境下的 this</h3><p>在全域範圍中（非嚴格模式），<code>this</code> 指向全域物件（在瀏覽器中是 <code>window</code>）。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 在瀏覽器中，輸出 window</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件方法中的-this\"><a href=\"#物件方法中的-this\" class=\"headerlink\" title=\"物件方法中的 this\"></a>物件方法中的 this</h3><p>當函數作為物件的方法呼叫時，this 指向該物件。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 輸出 &#x27;Alice&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在這裡，<code>this</code>指向<code>obj</code>，因此<code>this.name</code>取到的是<code>obj.name</code>。</p>\n<h3 id=\"獨立函數中的-this\"><a href=\"#獨立函數中的-this\" class=\"headerlink\" title=\"獨立函數中的 this\"></a>獨立函數中的 this</h3><p>當函數在全域範圍中獨立呼叫時，<code>this</code>在非嚴格模式下會指向全域物件（瀏覽器中的<code>window</code>）。在嚴格模式下，<code>this</code>則會是<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showThis</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">showThis</span>(); <span class=\"comment\">// 非嚴格模式下，輸出 window</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嚴格模式中的-this\"><a href=\"#嚴格模式中的-this\" class=\"headerlink\" title=\"嚴格模式中的 this\"></a>嚴格模式中的 this</h3><p>在嚴格模式下，<code>this</code>不再自動指向全域物件，如果函數獨立呼叫，<code>this</code>會是<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showThis</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">showThis</span>(); <span class=\"comment\">// 輸出 undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new-建構函數使用-this\"><a href=\"#new-建構函數使用-this\" class=\"headerlink\" title=\"new 建構函數使用 this\"></a>new 建構函數使用 this</h3><p>當使用<code>new</code>關鍵字來呼叫並建構函數時，<code>this</code>的指向會有所不同。</p>\n<p><code>new</code>會建立一個新的實體物件，並且<code>this</code>會指向新創建的物件，而不是全域物件或其他任何物件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 正確的 this 綁定：使用箭頭函數</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceArrow</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 指向 Person 實例</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 錯誤的 this 綁定：使用普通函數</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 指向全域物件或 undefined（取決於嚴格模式）</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">introduceArrow</span>(); <span class=\"comment\">// 正確，輸出 &#x27;Hi, I&#x27;m John&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 錯誤，1秒後輸出 &#x27;Hi, I&#x27;m undefined&#x27;（或 &#x27;Hi, I&#x27;m &#x27; 在嚴格模式下）</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用箭頭函數的正確綁定在<code>introduceArrow</code>方法中，我們使用了箭頭函數。箭頭函數不會自己創建<code>this</code>，而是從其外部環境繼承<code>this</code>。在這裡，外部環境是<code>Person</code>的實例，因此<code>this</code>仍然指向<code>Person</code>實例，能夠正確地存取 name 屬性。</p>\n</li>\n<li><p>使用普通函數的錯誤綁定在<code>introduceRegular</code>方法中，我們使用了普通函數。這樣做會導致<code>setTimeout</code>中的回調函數創建自己的<code>this</code>，並且這個<code>this</code>指向全域物件（在瀏覽器中為<code>window</code>）或<code>undefined</code>（在嚴格模式下）。</p>\n</li>\n</ol>\n<p>因此，當回調函數執行時，<code>this.name</code>無法正確取得<code>name</code>屬性，結果是<code>undefined</code>。</p>\n<h4 id=\"修正錯誤綁定的方法\"><a href=\"#修正錯誤綁定的方法\" class=\"headerlink\" title=\"修正錯誤綁定的方法\"></a>修正錯誤綁定的方法</h4><p>如果我們希望修正普通函數中的<code>this</code>綁定，可以使用<code>bind</code>方法或將回調函數改為箭頭函數。</p>\n<p><strong>使用<code>bind</code>方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 綁定會被 bind</span></span><br><span class=\"line\">    &#125;.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Jane&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person2.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 正確，1秒後輸出 &#x27;Hi, I&#x27;m Jane&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>使用箭頭函數</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">introduceRegular</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hi, I&#x27;m <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>); <span class=\"comment\">// 這裡的 this 繼承自 Person 實例</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Doe&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person3.<span class=\"title function_\">introduceRegular</span>(); <span class=\"comment\">// 正確，1秒後輸出 &#x27;Hi, I&#x27;m Doe&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>在以上修正方法中，<code>bind</code>方法可以將<code>this</code>繫結到指定的物件，而箭頭函數可以自動繼承外部環境中的<code>this</code>。這樣可以確保在回調函數中，<code>this</code>可以正確地指向實例對象。</p>\n<hr>\n<h3 id=\"call、apply-與-bind-解決-this-綁定\"><a href=\"#call、apply-與-bind-解決-this-綁定\" class=\"headerlink\" title=\"call、apply 與 bind 解決 this 綁定\"></a>call、apply 與 bind 解決 this 綁定</h3><p>當我們希望手動指定<code>this</code>的值時，可以使用<code>call</code>、<code>apply</code>或<code>bind</code>。<br>每個 function 都會自帶這些方法可以呼叫直接呼叫使用。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p><code>call</code>方法允許我們明確地設定<code>this</code>的值並立即執行該函數。它的語法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">call</span>(thisArg, arg1, arg2, ...)。</span><br></pre></td></tr></table></figure>\n<p>第一個參數，就是我們要指定的<code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.<span class=\"title function_\">call</span>(person, <span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 輸出 &#x27;Hello, 我是 Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p><code>apply</code>與<code>call</code>類似，不同的是，<code>apply</code>接受的是一個參數陣列而不是單獨的參數。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Charlie&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.<span class=\"title function_\">apply</span>(person, [<span class=\"string\">&#x27;Hi&#x27;</span>]); <span class=\"comment\">// 輸出 &#x27;Hi, 我是 Charlie&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>apply</code>對於參數的傳遞方式更加靈活，尤其在參數數量不確定時。</p>\n<p><code>bind</code>與<code>call</code>和<code>apply</code>不同的是，<code>bind</code>並不會立即執行函數，它會返回一個新的函數，並將<code>this</code><strong>永遠</strong>綁定到指定的物件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduce</span>(<span class=\"params\">greeting</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, 我是 <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Diana&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> boundIntroduce = introduce.<span class=\"title function_\">bind</span>(person);</span><br><span class=\"line\"><span class=\"title function_\">boundIntroduce</span>(<span class=\"string\">&#x27;Hey&#x27;</span>); <span class=\"comment\">// 輸出 &#x27;Hey, 我是 Diana&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"常見問題與解決方法\"><a href=\"#常見問題與解決方法\" class=\"headerlink\" title=\"常見問題與解決方法\"></a>常見問題與解決方法</h2><h3 id=\"問題：回調函數中的-this-不正確\"><a href=\"#問題：回調函數中的-this-不正確\" class=\"headerlink\" title=\"問題：回調函數中的 this 不正確\"></a>問題：回調函數中的 this 不正確</h3><p>在回調函數（例如事件處理器、<code>setTimeout</code>）中，<code>this</code>的值通常會出現問題，因為它可能會指向全域物件或<code>undefined</code>。解決這個問題的方法包括使用<code>bind</code>或箭頭函數。</p>\n<p><strong>使用<code>bind</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myButton&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Emily&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">handleClick</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, obj.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(obj));</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用箭頭函數</strong></p>\n<p>箭頭函數不會自己綁定<code>this</code>，而是繼承外部環境中的<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Frank&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">handleClick</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myButton&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">handleClick</span>(); <span class=\"comment\">// 點擊時輸出 &#x27;Frank&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>範例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">showName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">delayedShowName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 這裡的 this 指向 window（非嚴格模式下），而不是 obj</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">showName</span>(); <span class=\"comment\">// 正確，輸出 &#x27;Alice&#x27;</span></span><br><span class=\"line\">obj.<span class=\"title function_\">delayedShowName</span>(); <span class=\"comment\">// 不正確，輸出 &#x27;undefined&#x27;（因為 this 指向 window）</span></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p><a href=\"https://blog.huli.tw/2019/02/23/javascript-what-is-this/\">淺談 JavaScript 頭號難題 this</a></p>\n<p><a href=\"https://medium.com/@hupinwei/javascript%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-this%E5%92%8C%E5%87%BD%E6%95%B8%E5%91%BC%E5%8F%AB%E6%96%B9%E5%BC%8F-6a2ea4eb14a\">this和函數呼叫方式</a></p>"},{"title":"使用 Vue 設定偽元素 content","date":"2024-09-03T03:49:30.000Z","_content":"\n\nVue 從模板傳值到 CSS 偽元素 content 內容\n\n<!-- more -->\n------\n## 使用 Attr()\n\n首先在模板定義`data-*`參數，並使用 Vue 模板傳入對應值\n```html\n<div class=\"dh-header\" :data-title=\"data.title\"></div>\n```\n\n然後在 CSS 中使用`attr()`引入自訂的變數\n```css\n.dh-header:before {\n\tcontent:attr(data-title);\n\tdisplay:block;\n}\n```\n\n------\n\n[什麼是 HTML 5 中的資料屬性（data-* attribute）](https://pjchender.dev/html/html-data-attribute/)\n","source":"_posts/2024-09-03-Vue 從模板傳值到 CSS 偽元素 content 內容.md","raw":"---\ntitle: 使用 Vue 設定偽元素 content\ndate: 2024-09-03 11:49:30\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n\nVue 從模板傳值到 CSS 偽元素 content 內容\n\n<!-- more -->\n------\n## 使用 Attr()\n\n首先在模板定義`data-*`參數，並使用 Vue 模板傳入對應值\n```html\n<div class=\"dh-header\" :data-title=\"data.title\"></div>\n```\n\n然後在 CSS 中使用`attr()`引入自訂的變數\n```css\n.dh-header:before {\n\tcontent:attr(data-title);\n\tdisplay:block;\n}\n```\n\n------\n\n[什麼是 HTML 5 中的資料屬性（data-* attribute）](https://pjchender.dev/html/html-data-attribute/)\n","slug":"2024-09-03-Vue 從模板傳值到 CSS 偽元素 content 內容","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgsk90007qoud18h499dz","content":"<p>Vue 從模板傳值到 CSS 偽元素 content 內容</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"使用-Attr\"><a href=\"#使用-Attr\" class=\"headerlink\" title=\"使用 Attr()\"></a>使用 Attr()</h2><p>首先在模板定義<code>data-*</code>參數，並使用 Vue 模板傳入對應值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dh-header&quot;</span> <span class=\"attr\">:data-title</span>=<span class=\"string\">&quot;data.title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然後在 CSS 中使用<code>attr()</code>引入自訂的變數</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-header</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-title);</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><a href=\"https://pjchender.dev/html/html-data-attribute/\">什麼是 HTML 5 中的資料屬性（data-* attribute）</a></p>\n","excerpt":"<p>Vue 從模板傳值到 CSS 偽元素 content 內容</p>","more":"<hr>\n<h2 id=\"使用-Attr\"><a href=\"#使用-Attr\" class=\"headerlink\" title=\"使用 Attr()\"></a>使用 Attr()</h2><p>首先在模板定義<code>data-*</code>參數，並使用 Vue 模板傳入對應值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dh-header&quot;</span> <span class=\"attr\">:data-title</span>=<span class=\"string\">&quot;data.title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然後在 CSS 中使用<code>attr()</code>引入自訂的變數</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-header</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-title);</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><a href=\"https://pjchender.dev/html/html-data-attribute/\">什麼是 HTML 5 中的資料屬性（data-* attribute）</a></p>"},{"title":"事件冒泡、事件捕獲","date":"2024-10-11T03:37:25.000Z","_content":"\n介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。\n\n<!-- more -->\n\n------\n\n## 什麼是事件冒泡？\n\n事件冒泡是指當一個元素觸發事件時，事件會從這個元素逐層往外傳遞。例如，當你點擊按鈕時，事件會先在按鈕上觸發，然後傳到外層的 `div`，再傳到更外層的元素（例如 `body`）。這樣我們可以在較高層的元素上處理事件，而不用為每個小元素都加監聽器，從而減少重複代碼、提升性能和維護性。\n\n```html\n<div id=\"container\">\n  <button id=\"button\">Click Me</button>\n</div>\n```\n\n```js\ndocument.getElementById('container').addEventListener('click', () => {\n  console.log('Container clicked');\n});\n\ndocument.getElementById('button').addEventListener('click', (e) => {\n  console.log('Button clicked');\n});\n```\n\n當你點擊按鈕時，控制台會先顯示 \"Button clicked\"，然後顯示 \"Container clicked\"，這就是事件冒泡的效果。\n\n## 什麼是事件捕獲？\n\n事件捕獲與冒泡相反，事件從最外層元素開始逐層往內傳遞，直到目標元素。例如，當你點擊 `inner` 這個 `div` 時，如果使用事件捕獲，事件會先從最外層的 `outer` 開始，再傳遞到 `inner`。事件捕獲可以用來在事件到達目標元素之前進行特殊處理。\n\n## 事件流的圖解\n\n下面這個圖表展示了事件捕獲和事件冒泡的過程：\n\n![事件流圖解](https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/images/eventflow.png)\n\n- **捕獲階段**（Capture Phase）：事件從 `document` 開始，逐層往下傳遞，直到目標元素。\n- **目標階段**（Target Phase）：事件到達目標元素。\n- **冒泡階段**（Bubbling Phase）：事件從目標元素逐層往上傳遞，直到 `document`。\n\n## 使用 addEventListener\n\n在 JavaScript 中，我們可以使用 addEventListener 為元素添加事件監聽器。addEventListener 方法有三個主要參數以及一個可選的物件參數：\n\n1. **事件類型**（例如 `click`）：指定要監聽的事件。\n2. **事件處理函數**：當事件發生時執行的函數。\n3. **可選參數（捕獲或冒泡）**：布爾值，決定事件是在捕獲階段還是冒泡階段處理。`true` 表示捕獲，`false` 或不傳表示冒泡。\n4. **可選參數（`options`）**：這是一個物件，可以包含以下屬性：\n   - `capture`：與原本用來表示「捕獲」或「冒泡」的機制相同。\n   - `once`：代表這個事件只會被觸發一次，結束後就自動解除事件監聽。\n   - `passive`：當設定成 true 時，表示這個事件處理器不會呼叫 `event.preventDefault()` 這個方法。如果開發者呼叫了 `event.preventDefault()` 時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。\n\n>\n`event.preventDefault()`用於阻止元素的預設行為。\n例如，點擊一個連結時，它通常會跳轉到新的頁面；使用`event.preventDefault()`可以阻止這種行為。\n同樣地，在提交表單時也可以用來防止頁面重新加載。如果開發者呼叫了`event.preventDefault()`時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。\n\n\n例如：\n\n```js\ndocument.getElementById('button').addEventListener('click', myClickHandler, {\n  once: true,\n  passive: true,\n  capture: true\n});\n```\n\n在這個例子中，`button` 的點擊事件只會觸發一次，並且在觸發後會自動移除，同時設置為被動模式以提升性能。\n\n### 事件冒泡與捕獲的範例\n\n```html\n<div id=\"outer\">\n  <div id=\"inner\">Inner Div</div>\n</div>\n```\n\n```js\ndocument.getElementById('outer').addEventListener('click', () => {\n  console.log('Outer Div clicked');\n}, true); // 捕獲階段\n\ndocument.getElementById('inner').addEventListener('click', () => {\n  console.log('Inner Div clicked');\n});//冒泡階段 (不填參數、false)\n```\n\n當你點擊 `inner` 這個 `div` 時，控制台會先顯示 \"Outer Div clicked\"，再顯示 \"Inner Div clicked\"，因為 `outer` 使用了捕獲階段。\n\n### 停止事件傳遞\n\n有時候，我們希望事件不要繼續傳遞，可以使用 `stopPropagation()` 方法。\n\n```js\ndocument.getElementById('inner').addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log('Inner Div clicked');\n});\n```\n\n當你點擊 `inner` 這個 `div` 時，事件不會再往外傳，因此 \"Outer Div clicked\" 不會顯示。\n\n## 總結\n\n- **事件冒泡**：事件從目標元素逐層往外傳遞。\n- **事件捕獲**：事件從外層元素逐層往內傳遞。\n- **addEventListener**：可以用第三個參數決定事件處理的階段（捕獲或冒泡）。\n- stopPropagation()：用來阻止事件的傳遞。\n","source":"_posts/2024-10-11-事件冒泡.md","raw":"---\ntitle: 事件冒泡、事件捕獲\ndate: 2024-10-11 11:37:25\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。\n\n<!-- more -->\n\n------\n\n## 什麼是事件冒泡？\n\n事件冒泡是指當一個元素觸發事件時，事件會從這個元素逐層往外傳遞。例如，當你點擊按鈕時，事件會先在按鈕上觸發，然後傳到外層的 `div`，再傳到更外層的元素（例如 `body`）。這樣我們可以在較高層的元素上處理事件，而不用為每個小元素都加監聽器，從而減少重複代碼、提升性能和維護性。\n\n```html\n<div id=\"container\">\n  <button id=\"button\">Click Me</button>\n</div>\n```\n\n```js\ndocument.getElementById('container').addEventListener('click', () => {\n  console.log('Container clicked');\n});\n\ndocument.getElementById('button').addEventListener('click', (e) => {\n  console.log('Button clicked');\n});\n```\n\n當你點擊按鈕時，控制台會先顯示 \"Button clicked\"，然後顯示 \"Container clicked\"，這就是事件冒泡的效果。\n\n## 什麼是事件捕獲？\n\n事件捕獲與冒泡相反，事件從最外層元素開始逐層往內傳遞，直到目標元素。例如，當你點擊 `inner` 這個 `div` 時，如果使用事件捕獲，事件會先從最外層的 `outer` 開始，再傳遞到 `inner`。事件捕獲可以用來在事件到達目標元素之前進行特殊處理。\n\n## 事件流的圖解\n\n下面這個圖表展示了事件捕獲和事件冒泡的過程：\n\n![事件流圖解](https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/images/eventflow.png)\n\n- **捕獲階段**（Capture Phase）：事件從 `document` 開始，逐層往下傳遞，直到目標元素。\n- **目標階段**（Target Phase）：事件到達目標元素。\n- **冒泡階段**（Bubbling Phase）：事件從目標元素逐層往上傳遞，直到 `document`。\n\n## 使用 addEventListener\n\n在 JavaScript 中，我們可以使用 addEventListener 為元素添加事件監聽器。addEventListener 方法有三個主要參數以及一個可選的物件參數：\n\n1. **事件類型**（例如 `click`）：指定要監聽的事件。\n2. **事件處理函數**：當事件發生時執行的函數。\n3. **可選參數（捕獲或冒泡）**：布爾值，決定事件是在捕獲階段還是冒泡階段處理。`true` 表示捕獲，`false` 或不傳表示冒泡。\n4. **可選參數（`options`）**：這是一個物件，可以包含以下屬性：\n   - `capture`：與原本用來表示「捕獲」或「冒泡」的機制相同。\n   - `once`：代表這個事件只會被觸發一次，結束後就自動解除事件監聽。\n   - `passive`：當設定成 true 時，表示這個事件處理器不會呼叫 `event.preventDefault()` 這個方法。如果開發者呼叫了 `event.preventDefault()` 時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。\n\n>\n`event.preventDefault()`用於阻止元素的預設行為。\n例如，點擊一個連結時，它通常會跳轉到新的頁面；使用`event.preventDefault()`可以阻止這種行為。\n同樣地，在提交表單時也可以用來防止頁面重新加載。如果開發者呼叫了`event.preventDefault()`時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。\n\n\n例如：\n\n```js\ndocument.getElementById('button').addEventListener('click', myClickHandler, {\n  once: true,\n  passive: true,\n  capture: true\n});\n```\n\n在這個例子中，`button` 的點擊事件只會觸發一次，並且在觸發後會自動移除，同時設置為被動模式以提升性能。\n\n### 事件冒泡與捕獲的範例\n\n```html\n<div id=\"outer\">\n  <div id=\"inner\">Inner Div</div>\n</div>\n```\n\n```js\ndocument.getElementById('outer').addEventListener('click', () => {\n  console.log('Outer Div clicked');\n}, true); // 捕獲階段\n\ndocument.getElementById('inner').addEventListener('click', () => {\n  console.log('Inner Div clicked');\n});//冒泡階段 (不填參數、false)\n```\n\n當你點擊 `inner` 這個 `div` 時，控制台會先顯示 \"Outer Div clicked\"，再顯示 \"Inner Div clicked\"，因為 `outer` 使用了捕獲階段。\n\n### 停止事件傳遞\n\n有時候，我們希望事件不要繼續傳遞，可以使用 `stopPropagation()` 方法。\n\n```js\ndocument.getElementById('inner').addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log('Inner Div clicked');\n});\n```\n\n當你點擊 `inner` 這個 `div` 時，事件不會再往外傳，因此 \"Outer Div clicked\" 不會顯示。\n\n## 總結\n\n- **事件冒泡**：事件從目標元素逐層往外傳遞。\n- **事件捕獲**：事件從外層元素逐層往內傳遞。\n- **addEventListener**：可以用第三個參數決定事件處理的階段（捕獲或冒泡）。\n- stopPropagation()：用來阻止事件的傳遞。\n","slug":"2024-10-11-事件冒泡","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgskb000mqoud4hob1ks6","content":"<p>介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"什麼是事件冒泡？\"><a href=\"#什麼是事件冒泡？\" class=\"headerlink\" title=\"什麼是事件冒泡？\"></a>什麼是事件冒泡？</h2><p>事件冒泡是指當一個元素觸發事件時，事件會從這個元素逐層往外傳遞。例如，當你點擊按鈕時，事件會先在按鈕上觸發，然後傳到外層的 <code>div</code>，再傳到更外層的元素（例如 <code>body</code>）。這樣我們可以在較高層的元素上處理事件，而不用為每個小元素都加監聽器，從而減少重複代碼、提升性能和維護性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Container clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當你點擊按鈕時，控制台會先顯示 “Button clicked”，然後顯示 “Container clicked”，這就是事件冒泡的效果。</p>\n<h2 id=\"什麼是事件捕獲？\"><a href=\"#什麼是事件捕獲？\" class=\"headerlink\" title=\"什麼是事件捕獲？\"></a>什麼是事件捕獲？</h2><p>事件捕獲與冒泡相反，事件從最外層元素開始逐層往內傳遞，直到目標元素。例如，當你點擊 <code>inner</code> 這個 <code>div</code> 時，如果使用事件捕獲，事件會先從最外層的 <code>outer</code> 開始，再傳遞到 <code>inner</code>。事件捕獲可以用來在事件到達目標元素之前進行特殊處理。</p>\n<h2 id=\"事件流的圖解\"><a href=\"#事件流的圖解\" class=\"headerlink\" title=\"事件流的圖解\"></a>事件流的圖解</h2><p>下面這個圖表展示了事件捕獲和事件冒泡的過程：</p>\n<p><img src=\"https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/images/eventflow.png\" alt=\"事件流圖解\"></p>\n<ul>\n<li><strong>捕獲階段</strong>（Capture Phase）：事件從 <code>document</code> 開始，逐層往下傳遞，直到目標元素。</li>\n<li><strong>目標階段</strong>（Target Phase）：事件到達目標元素。</li>\n<li><strong>冒泡階段</strong>（Bubbling Phase）：事件從目標元素逐層往上傳遞，直到 <code>document</code>。</li>\n</ul>\n<h2 id=\"使用-addEventListener\"><a href=\"#使用-addEventListener\" class=\"headerlink\" title=\"使用 addEventListener\"></a>使用 addEventListener</h2><p>在 JavaScript 中，我們可以使用 addEventListener 為元素添加事件監聽器。addEventListener 方法有三個主要參數以及一個可選的物件參數：</p>\n<ol>\n<li><strong>事件類型</strong>（例如 <code>click</code>）：指定要監聽的事件。</li>\n<li><strong>事件處理函數</strong>：當事件發生時執行的函數。</li>\n<li><strong>可選參數（捕獲或冒泡）</strong>：布爾值，決定事件是在捕獲階段還是冒泡階段處理。<code>true</code> 表示捕獲，<code>false</code> 或不傳表示冒泡。</li>\n<li><strong>可選參數（<code>options</code>）</strong>：這是一個物件，可以包含以下屬性：<ul>\n<li><code>capture</code>：與原本用來表示「捕獲」或「冒泡」的機制相同。</li>\n<li><code>once</code>：代表這個事件只會被觸發一次，結束後就自動解除事件監聽。</li>\n<li><code>passive</code>：當設定成 true 時，表示這個事件處理器不會呼叫 <code>event.preventDefault()</code> 這個方法。如果開發者呼叫了 <code>event.preventDefault()</code> 時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<p><code>event.preventDefault()</code>用於阻止元素的預設行為。<br>例如，點擊一個連結時，它通常會跳轉到新的頁面；使用<code>event.preventDefault()</code>可以阻止這種行為。<br>同樣地，在提交表單時也可以用來防止頁面重新加載。如果開發者呼叫了<code>event.preventDefault()</code>時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, myClickHandler, &#123;</span><br><span class=\"line\">  <span class=\"attr\">once</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">passive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">capture</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在這個例子中，<code>button</code> 的點擊事件只會觸發一次，並且在觸發後會自動移除，同時設置為被動模式以提升性能。</p>\n<h3 id=\"事件冒泡與捕獲的範例\"><a href=\"#事件冒泡與捕獲的範例\" class=\"headerlink\" title=\"事件冒泡與捕獲的範例\"></a>事件冒泡與捕獲的範例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span>Inner Div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;outer&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Outer Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>); <span class=\"comment\">// 捕獲階段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inner&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inner Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);<span class=\"comment\">//冒泡階段 (不填參數、false)</span></span><br></pre></td></tr></table></figure>\n\n<p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，控制台會先顯示 “Outer Div clicked”，再顯示 “Inner Div clicked”，因為 <code>outer</code> 使用了捕獲階段。</p>\n<h3 id=\"停止事件傳遞\"><a href=\"#停止事件傳遞\" class=\"headerlink\" title=\"停止事件傳遞\"></a>停止事件傳遞</h3><p>有時候，我們希望事件不要繼續傳遞，可以使用 <code>stopPropagation()</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inner&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inner Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，事件不會再往外傳，因此 “Outer Div clicked” 不會顯示。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><ul>\n<li><strong>事件冒泡</strong>：事件從目標元素逐層往外傳遞。</li>\n<li><strong>事件捕獲</strong>：事件從外層元素逐層往內傳遞。</li>\n<li><strong>addEventListener</strong>：可以用第三個參數決定事件處理的階段（捕獲或冒泡）。</li>\n<li>stopPropagation()：用來阻止事件的傳遞。</li>\n</ul>\n","excerpt":"<p>介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。</p>","more":"<hr>\n<h2 id=\"什麼是事件冒泡？\"><a href=\"#什麼是事件冒泡？\" class=\"headerlink\" title=\"什麼是事件冒泡？\"></a>什麼是事件冒泡？</h2><p>事件冒泡是指當一個元素觸發事件時，事件會從這個元素逐層往外傳遞。例如，當你點擊按鈕時，事件會先在按鈕上觸發，然後傳到外層的 <code>div</code>，再傳到更外層的元素（例如 <code>body</code>）。這樣我們可以在較高層的元素上處理事件，而不用為每個小元素都加監聽器，從而減少重複代碼、提升性能和維護性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Container clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當你點擊按鈕時，控制台會先顯示 “Button clicked”，然後顯示 “Container clicked”，這就是事件冒泡的效果。</p>\n<h2 id=\"什麼是事件捕獲？\"><a href=\"#什麼是事件捕獲？\" class=\"headerlink\" title=\"什麼是事件捕獲？\"></a>什麼是事件捕獲？</h2><p>事件捕獲與冒泡相反，事件從最外層元素開始逐層往內傳遞，直到目標元素。例如，當你點擊 <code>inner</code> 這個 <code>div</code> 時，如果使用事件捕獲，事件會先從最外層的 <code>outer</code> 開始，再傳遞到 <code>inner</code>。事件捕獲可以用來在事件到達目標元素之前進行特殊處理。</p>\n<h2 id=\"事件流的圖解\"><a href=\"#事件流的圖解\" class=\"headerlink\" title=\"事件流的圖解\"></a>事件流的圖解</h2><p>下面這個圖表展示了事件捕獲和事件冒泡的過程：</p>\n<p><img src=\"https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/images/eventflow.png\" alt=\"事件流圖解\"></p>\n<ul>\n<li><strong>捕獲階段</strong>（Capture Phase）：事件從 <code>document</code> 開始，逐層往下傳遞，直到目標元素。</li>\n<li><strong>目標階段</strong>（Target Phase）：事件到達目標元素。</li>\n<li><strong>冒泡階段</strong>（Bubbling Phase）：事件從目標元素逐層往上傳遞，直到 <code>document</code>。</li>\n</ul>\n<h2 id=\"使用-addEventListener\"><a href=\"#使用-addEventListener\" class=\"headerlink\" title=\"使用 addEventListener\"></a>使用 addEventListener</h2><p>在 JavaScript 中，我們可以使用 addEventListener 為元素添加事件監聽器。addEventListener 方法有三個主要參數以及一個可選的物件參數：</p>\n<ol>\n<li><strong>事件類型</strong>（例如 <code>click</code>）：指定要監聽的事件。</li>\n<li><strong>事件處理函數</strong>：當事件發生時執行的函數。</li>\n<li><strong>可選參數（捕獲或冒泡）</strong>：布爾值，決定事件是在捕獲階段還是冒泡階段處理。<code>true</code> 表示捕獲，<code>false</code> 或不傳表示冒泡。</li>\n<li><strong>可選參數（<code>options</code>）</strong>：這是一個物件，可以包含以下屬性：<ul>\n<li><code>capture</code>：與原本用來表示「捕獲」或「冒泡」的機制相同。</li>\n<li><code>once</code>：代表這個事件只會被觸發一次，結束後就自動解除事件監聽。</li>\n<li><code>passive</code>：當設定成 true 時，表示這個事件處理器不會呼叫 <code>event.preventDefault()</code> 這個方法。如果開發者呼叫了 <code>event.preventDefault()</code> 時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<p><code>event.preventDefault()</code>用於阻止元素的預設行為。<br>例如，點擊一個連結時，它通常會跳轉到新的頁面；使用<code>event.preventDefault()</code>可以阻止這種行為。<br>同樣地，在提交表單時也可以用來防止頁面重新加載。如果開發者呼叫了<code>event.preventDefault()</code>時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, myClickHandler, &#123;</span><br><span class=\"line\">  <span class=\"attr\">once</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">passive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">capture</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在這個例子中，<code>button</code> 的點擊事件只會觸發一次，並且在觸發後會自動移除，同時設置為被動模式以提升性能。</p>\n<h3 id=\"事件冒泡與捕獲的範例\"><a href=\"#事件冒泡與捕獲的範例\" class=\"headerlink\" title=\"事件冒泡與捕獲的範例\"></a>事件冒泡與捕獲的範例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span>Inner Div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;outer&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Outer Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>); <span class=\"comment\">// 捕獲階段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inner&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inner Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);<span class=\"comment\">//冒泡階段 (不填參數、false)</span></span><br></pre></td></tr></table></figure>\n\n<p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，控制台會先顯示 “Outer Div clicked”，再顯示 “Inner Div clicked”，因為 <code>outer</code> 使用了捕獲階段。</p>\n<h3 id=\"停止事件傳遞\"><a href=\"#停止事件傳遞\" class=\"headerlink\" title=\"停止事件傳遞\"></a>停止事件傳遞</h3><p>有時候，我們希望事件不要繼續傳遞，可以使用 <code>stopPropagation()</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inner&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inner Div clicked&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，事件不會再往外傳，因此 “Outer Div clicked” 不會顯示。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><ul>\n<li><strong>事件冒泡</strong>：事件從目標元素逐層往外傳遞。</li>\n<li><strong>事件捕獲</strong>：事件從外層元素逐層往內傳遞。</li>\n<li><strong>addEventListener</strong>：可以用第三個參數決定事件處理的階段（捕獲或冒泡）。</li>\n<li>stopPropagation()：用來阻止事件的傳遞。</li>\n</ul>"},{"title":"你有多懂 == ?","date":"2024-09-17T07:44:50.000Z","_content":"\n面試很愛出，剛好正在閱讀作者很細心講解。\n做個筆記，包含 == 比較的解釋。\n\n<!-- more -->\n\n------\n\n## 自動轉型的規則\n\n- 在兩個等號=的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」。\n- 如果其中有一個值為「Boolean」的情況下，會將`true`轉型為「數字」的 1，`false`則會變成數字的 0\n- 如果遇到字串與數字做比較的情況下，則會將字串透過`Number()`嘗試轉型為數字後，再進行比較。\n- 如果其中一方是「物件」型別，而另一方是基本型別的情況下，則會先透過物件的`valueof()`方法取得對應的基本型別的值，再進行比較。\n\n### 補充\n- undefined 只會和 null 比較時為 true。\n- NaN不等於 NaN，這點不論是兩個等號或三個等號的結果都一樣。\n- 當兩個「物件」進行比較時，要看兩者是否指向同一個「實體」，只有在指向同一個「實體」時才會回傳true。\n\n------\n\n## 範例\n\n了解基本規則比較轉換後，直接看Code\n\n\n\n```js\n[] == [] // false\n\n[] == ![] // true\n\n[] == '' // true\n\n[] == 0 // true\n\n[''] == '' // true\n\n[0] == 0 // true\n\n[0] == '' // false\n\n'' == 0 // true\n\nnull == undefined // true\n//null 和 undefined 是 JavaScript 中兩個特殊的基本類型，它們彼此之間的比較會返回 true。\n\n[null] == '' // true\n//陣列 [null] 轉型後變成空字串''，然後再與空字串比較，結果為 true。\n\n[null] == 0 // true\n//陣列 [null] 轉型後變成空字串''，而空字串轉成數字為 0，因此結果為 true。\n\n[undefined] == '' // true\n//與 null 類似，[undefined] 在轉型時也會被轉成空字串''，結果為 true。\n\n[undefined] == 0 // false\n//undefined 轉為數字時為 NaN，而與 0 的比較結果為 false。\n\n```\n------\n\n## NaN\n\n在 JavaScript 中，`NaN` (Not-a-Number) 是一個特殊的數字類型，表示運算或轉型結果無法產生有效的數字。\n`NaN` 在比較運算時具有一些特殊的行為，尤其是它不等於自身。接下來我們看看幾個 `NaN` 比較的範例：\n\n`NaN == NaN`根據 JavaScript 的規則，`NaN` 與任何值（包括自己）進行比較時，結果都為 `false`。這是因為 `NaN` 代表一個無效的數值，沒有辦法與任何東西（包括自己）相等。\n\n\n```javascript\nNaN == NaN // false\n```\n### 判斷 NaN\n\n由於 `NaN` 不等於自己，判斷一個值是否是 `NaN` 時，我們可以使用 `isNaN()` 函數。它可以用來判斷一個值是否為 `NaN`，而不使用直接比較。\n\n```javascript\nisNaN(NaN)       // true\nisNaN(123)       // false\nisNaN('hello')   // true (字串無法轉型為數字)\n```\n`Number.isNaN()` 是更嚴格的版本，它只會在參數真的為 `NaN` 時返回 `true`，而不會像 `isNaN()` 將非數字類型也當作 `NaN`。\n\n```javascript\nNumber.isNaN(NaN)       // true\nNumber.isNaN(123)       // false\nNumber.isNaN('hello')   // false\n```\n\n`NaN` 與其他數字的比較當 `NaN` 與任何其他數字（包括 `0` 和 `Infinity`）進行比較時，結果總是 `false`。\n\n```javascript\nNaN > 0    // false\nNaN < 0    // false\nNaN >= 0   // false\nNaN <= 0   // false\n```\n\n`NaN` 的轉型在某些運算中，如果出現無法計算的結果，會自動返回 `NaN`。例如：\n\n```javascript\nMath.sqrt(-1)  // NaN\n0 / 0          // NaN\nparseInt('abc')// NaN\n```\n\n------\n\n\n[8天重新認識JavaScript](https://ithelp.ithome.com.tw/users/20065504/ironman/1259)","source":"_posts/2024-09-17-型別比較==.md","raw":"---\ntitle: 你有多懂 == ?\ndate: 2024-09-17 15:44:50\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n面試很愛出，剛好正在閱讀作者很細心講解。\n做個筆記，包含 == 比較的解釋。\n\n<!-- more -->\n\n------\n\n## 自動轉型的規則\n\n- 在兩個等號=的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」。\n- 如果其中有一個值為「Boolean」的情況下，會將`true`轉型為「數字」的 1，`false`則會變成數字的 0\n- 如果遇到字串與數字做比較的情況下，則會將字串透過`Number()`嘗試轉型為數字後，再進行比較。\n- 如果其中一方是「物件」型別，而另一方是基本型別的情況下，則會先透過物件的`valueof()`方法取得對應的基本型別的值，再進行比較。\n\n### 補充\n- undefined 只會和 null 比較時為 true。\n- NaN不等於 NaN，這點不論是兩個等號或三個等號的結果都一樣。\n- 當兩個「物件」進行比較時，要看兩者是否指向同一個「實體」，只有在指向同一個「實體」時才會回傳true。\n\n------\n\n## 範例\n\n了解基本規則比較轉換後，直接看Code\n\n\n\n```js\n[] == [] // false\n\n[] == ![] // true\n\n[] == '' // true\n\n[] == 0 // true\n\n[''] == '' // true\n\n[0] == 0 // true\n\n[0] == '' // false\n\n'' == 0 // true\n\nnull == undefined // true\n//null 和 undefined 是 JavaScript 中兩個特殊的基本類型，它們彼此之間的比較會返回 true。\n\n[null] == '' // true\n//陣列 [null] 轉型後變成空字串''，然後再與空字串比較，結果為 true。\n\n[null] == 0 // true\n//陣列 [null] 轉型後變成空字串''，而空字串轉成數字為 0，因此結果為 true。\n\n[undefined] == '' // true\n//與 null 類似，[undefined] 在轉型時也會被轉成空字串''，結果為 true。\n\n[undefined] == 0 // false\n//undefined 轉為數字時為 NaN，而與 0 的比較結果為 false。\n\n```\n------\n\n## NaN\n\n在 JavaScript 中，`NaN` (Not-a-Number) 是一個特殊的數字類型，表示運算或轉型結果無法產生有效的數字。\n`NaN` 在比較運算時具有一些特殊的行為，尤其是它不等於自身。接下來我們看看幾個 `NaN` 比較的範例：\n\n`NaN == NaN`根據 JavaScript 的規則，`NaN` 與任何值（包括自己）進行比較時，結果都為 `false`。這是因為 `NaN` 代表一個無效的數值，沒有辦法與任何東西（包括自己）相等。\n\n\n```javascript\nNaN == NaN // false\n```\n### 判斷 NaN\n\n由於 `NaN` 不等於自己，判斷一個值是否是 `NaN` 時，我們可以使用 `isNaN()` 函數。它可以用來判斷一個值是否為 `NaN`，而不使用直接比較。\n\n```javascript\nisNaN(NaN)       // true\nisNaN(123)       // false\nisNaN('hello')   // true (字串無法轉型為數字)\n```\n`Number.isNaN()` 是更嚴格的版本，它只會在參數真的為 `NaN` 時返回 `true`，而不會像 `isNaN()` 將非數字類型也當作 `NaN`。\n\n```javascript\nNumber.isNaN(NaN)       // true\nNumber.isNaN(123)       // false\nNumber.isNaN('hello')   // false\n```\n\n`NaN` 與其他數字的比較當 `NaN` 與任何其他數字（包括 `0` 和 `Infinity`）進行比較時，結果總是 `false`。\n\n```javascript\nNaN > 0    // false\nNaN < 0    // false\nNaN >= 0   // false\nNaN <= 0   // false\n```\n\n`NaN` 的轉型在某些運算中，如果出現無法計算的結果，會自動返回 `NaN`。例如：\n\n```javascript\nMath.sqrt(-1)  // NaN\n0 / 0          // NaN\nparseInt('abc')// NaN\n```\n\n------\n\n\n[8天重新認識JavaScript](https://ithelp.ithome.com.tw/users/20065504/ironman/1259)","slug":"2024-09-17-型別比較==","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgskb000nqoud5jr48gsl","content":"<p>面試很愛出，剛好正在閱讀作者很細心講解。<br>做個筆記，包含 &#x3D;&#x3D; 比較的解釋。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"自動轉型的規則\"><a href=\"#自動轉型的規則\" class=\"headerlink\" title=\"自動轉型的規則\"></a>自動轉型的規則</h2><ul>\n<li>在兩個等號&#x3D;的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」。</li>\n<li>如果其中有一個值為「Boolean」的情況下，會將<code>true</code>轉型為「數字」的 1，<code>false</code>則會變成數字的 0</li>\n<li>如果遇到字串與數字做比較的情況下，則會將字串透過<code>Number()</code>嘗試轉型為數字後，再進行比較。</li>\n<li>如果其中一方是「物件」型別，而另一方是基本型別的情況下，則會先透過物件的<code>valueof()</code>方法取得對應的基本型別的值，再進行比較。</li>\n</ul>\n<h3 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h3><ul>\n<li>undefined 只會和 null 比較時為 true。</li>\n<li>NaN不等於 NaN，這點不論是兩個等號或三個等號的結果都一樣。</li>\n<li>當兩個「物件」進行比較時，要看兩者是否指向同一個「實體」，只有在指向同一個「實體」時才會回傳true。</li>\n</ul>\n<hr>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><p>了解基本規則比較轉換後，直接看Code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] == [] <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == ![] <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;&#x27;</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//null 和 undefined 是 JavaScript 中兩個特殊的基本類型，它們彼此之間的比較會返回 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">null</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//陣列 [null] 轉型後變成空字串&#x27;&#x27;，然後再與空字串比較，結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">null</span>] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//陣列 [null] 轉型後變成空字串&#x27;&#x27;，而空字串轉成數字為 0，因此結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">undefined</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//與 null 類似，[undefined] 在轉型時也會被轉成空字串&#x27;&#x27;，結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">undefined</span>] == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//undefined 轉為數字時為 NaN，而與 0 的比較結果為 false。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>在 JavaScript 中，<code>NaN</code> (Not-a-Number) 是一個特殊的數字類型，表示運算或轉型結果無法產生有效的數字。<br><code>NaN</code> 在比較運算時具有一些特殊的行為，尤其是它不等於自身。接下來我們看看幾個 <code>NaN</code> 比較的範例：</p>\n<p><code>NaN == NaN</code>根據 JavaScript 的規則，<code>NaN</code> 與任何值（包括自己）進行比較時，結果都為 <code>false</code>。這是因為 <code>NaN</code> 代表一個無效的數值，沒有辦法與任何東西（包括自己）相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"判斷-NaN\"><a href=\"#判斷-NaN\" class=\"headerlink\" title=\"判斷 NaN\"></a>判斷 NaN</h3><p>由於 <code>NaN</code> 不等於自己，判斷一個值是否是 <code>NaN</code> 時，我們可以使用 <code>isNaN()</code> 函數。它可以用來判斷一個值是否為 <code>NaN</code>，而不使用直接比較。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">123</span>)       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;hello&#x27;</span>)   <span class=\"comment\">// true (字串無法轉型為數字)</span></span><br></pre></td></tr></table></figure>\n<p><code>Number.isNaN()</code> 是更嚴格的版本，它只會在參數真的為 <code>NaN</code> 時返回 <code>true</code>，而不會像 <code>isNaN()</code> 將非數字類型也當作 <code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"number\">123</span>)       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;hello&#x27;</span>)   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>NaN</code> 與其他數字的比較當 <code>NaN</code> 與任何其他數字（包括 <code>0</code> 和 <code>Infinity</code>）進行比較時，結果總是 <code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">NaN</span> &gt; <span class=\"number\">0</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &lt; <span class=\"number\">0</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &gt;= <span class=\"number\">0</span>   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &lt;= <span class=\"number\">0</span>   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>NaN</code> 的轉型在某些運算中，如果出現無法計算的結果，會自動返回 <code>NaN</code>。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(-<span class=\"number\">1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>          <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;abc&#x27;</span>)<span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><a href=\"https://ithelp.ithome.com.tw/users/20065504/ironman/1259\">8天重新認識JavaScript</a></p>\n","excerpt":"<p>面試很愛出，剛好正在閱讀作者很細心講解。<br>做個筆記，包含 &#x3D;&#x3D; 比較的解釋。</p>","more":"<hr>\n<h2 id=\"自動轉型的規則\"><a href=\"#自動轉型的規則\" class=\"headerlink\" title=\"自動轉型的規則\"></a>自動轉型的規則</h2><ul>\n<li>在兩個等號&#x3D;的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」。</li>\n<li>如果其中有一個值為「Boolean」的情況下，會將<code>true</code>轉型為「數字」的 1，<code>false</code>則會變成數字的 0</li>\n<li>如果遇到字串與數字做比較的情況下，則會將字串透過<code>Number()</code>嘗試轉型為數字後，再進行比較。</li>\n<li>如果其中一方是「物件」型別，而另一方是基本型別的情況下，則會先透過物件的<code>valueof()</code>方法取得對應的基本型別的值，再進行比較。</li>\n</ul>\n<h3 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h3><ul>\n<li>undefined 只會和 null 比較時為 true。</li>\n<li>NaN不等於 NaN，這點不論是兩個等號或三個等號的結果都一樣。</li>\n<li>當兩個「物件」進行比較時，要看兩者是否指向同一個「實體」，只有在指向同一個「實體」時才會回傳true。</li>\n</ul>\n<hr>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><p>了解基本規則比較轉換後，直接看Code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] == [] <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == ![] <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;&#x27;</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//null 和 undefined 是 JavaScript 中兩個特殊的基本類型，它們彼此之間的比較會返回 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">null</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//陣列 [null] 轉型後變成空字串&#x27;&#x27;，然後再與空字串比較，結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">null</span>] == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//陣列 [null] 轉型後變成空字串&#x27;&#x27;，而空字串轉成數字為 0，因此結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">undefined</span>] == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//與 null 類似，[undefined] 在轉型時也會被轉成空字串&#x27;&#x27;，結果為 true。</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">undefined</span>] == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//undefined 轉為數字時為 NaN，而與 0 的比較結果為 false。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>在 JavaScript 中，<code>NaN</code> (Not-a-Number) 是一個特殊的數字類型，表示運算或轉型結果無法產生有效的數字。<br><code>NaN</code> 在比較運算時具有一些特殊的行為，尤其是它不等於自身。接下來我們看看幾個 <code>NaN</code> 比較的範例：</p>\n<p><code>NaN == NaN</code>根據 JavaScript 的規則，<code>NaN</code> 與任何值（包括自己）進行比較時，結果都為 <code>false</code>。這是因為 <code>NaN</code> 代表一個無效的數值，沒有辦法與任何東西（包括自己）相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"判斷-NaN\"><a href=\"#判斷-NaN\" class=\"headerlink\" title=\"判斷 NaN\"></a>判斷 NaN</h3><p>由於 <code>NaN</code> 不等於自己，判斷一個值是否是 <code>NaN</code> 時，我們可以使用 <code>isNaN()</code> 函數。它可以用來判斷一個值是否為 <code>NaN</code>，而不使用直接比較。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">123</span>)       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;hello&#x27;</span>)   <span class=\"comment\">// true (字串無法轉型為數字)</span></span><br></pre></td></tr></table></figure>\n<p><code>Number.isNaN()</code> 是更嚴格的版本，它只會在參數真的為 <code>NaN</code> 時返回 <code>true</code>，而不會像 <code>isNaN()</code> 將非數字類型也當作 <code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"number\">123</span>)       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;hello&#x27;</span>)   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>NaN</code> 與其他數字的比較當 <code>NaN</code> 與任何其他數字（包括 <code>0</code> 和 <code>Infinity</code>）進行比較時，結果總是 <code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">NaN</span> &gt; <span class=\"number\">0</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &lt; <span class=\"number\">0</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &gt;= <span class=\"number\">0</span>   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &lt;= <span class=\"number\">0</span>   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>NaN</code> 的轉型在某些運算中，如果出現無法計算的結果，會自動返回 <code>NaN</code>。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(-<span class=\"number\">1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>          <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;abc&#x27;</span>)<span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><a href=\"https://ithelp.ithome.com.tw/users/20065504/ironman/1259\">8天重新認識JavaScript</a></p>"},{"title":"使用 a 標籤取得網址參數","date":"2024-10-11T02:55:37.000Z","_content":"\n常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。\n閱讀相關書籍發現有更好、更簡單的做法\n\n<!-- more -->\n\n------\n\n## 使用`a`標籤方法\n\n```js\nconst a = document.createElement('a')\n\na.href = 'www.google.com'\n\nconsole.log(a.hostname)\nconsole.log(a.pathname)\nconsole.log(a.hash)\n\nconsole.dir(a) // 在瀏覽器上可查看a標籤的相關靜態方法\n```\n\n","source":"_posts/2024-10-11-網址取值.md","raw":"---\ntitle: 使用 a 標籤取得網址參數\ndate: 2024-10-11 10:55:37\ntags:\n  - [Front-end]\ncategories:\n  - [Front-end]\n---\n\n常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。\n閱讀相關書籍發現有更好、更簡單的做法\n\n<!-- more -->\n\n------\n\n## 使用`a`標籤方法\n\n```js\nconst a = document.createElement('a')\n\na.href = 'www.google.com'\n\nconsole.log(a.hostname)\nconsole.log(a.pathname)\nconsole.log(a.hash)\n\nconsole.dir(a) // 在瀏覽器上可查看a標籤的相關靜態方法\n```\n\n","slug":"2024-10-11-網址取值","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgskc000pqoudak8lbwyk","content":"<p>常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。<br>閱讀相關書籍發現有更好、更簡單的做法</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"使用a標籤方法\"><a href=\"#使用a標籤方法\" class=\"headerlink\" title=\"使用a標籤方法\"></a>使用<code>a</code>標籤方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"property\">href</span> = <span class=\"string\">&#x27;www.google.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">hostname</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">pathname</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">hash</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(a) <span class=\"comment\">// 在瀏覽器上可查看a標籤的相關靜態方法</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"<p>常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。<br>閱讀相關書籍發現有更好、更簡單的做法</p>","more":"<hr>\n<h2 id=\"使用a標籤方法\"><a href=\"#使用a標籤方法\" class=\"headerlink\" title=\"使用a標籤方法\"></a>使用<code>a</code>標籤方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"property\">href</span> = <span class=\"string\">&#x27;www.google.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">hostname</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">pathname</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">hash</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(a) <span class=\"comment\">// 在瀏覽器上可查看a標籤的相關靜態方法</span></span><br></pre></td></tr></table></figure>"},{"title":"使用CloudFlare Work架設telegram bot","date":"2024-11-07T13:20:20.000Z","_content":"\n\n使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot\n每個月有 10 萬次請求，足夠應付一般使用\n\n<!-- more -->\n\n------\n\n## 登入/註冊 CloudFlare\n\n到 [CloudFlare](https://dash.cloudflare.com/login) 登入/註冊\n\n註冊後就會開通免費方案，可以開始使用\n\n## 安裝node.js\n\n到 [nodejs.org](https://nodejs.org/en) 下載對應版本安裝\n\n確認是否安裝成功\n\n```bash\nnode -v\n```\n\n## 建立wrangler專案\n\n1. 擇一使用npm、pnpm、yarn安裝wrangler(官方推薦使用npm)\n\n```bash\nnpm install wrangler\n```\n\n2. 使用wrangler建立專案\n\n專案名稱可以隨意命名，會新增一個專案資料夾\n\n```bash\nnpm create cloudflare@latest <你的專案名稱>\n```\n\n3. 到這邊記得選 `Template from a GitHub repo`\n\n![image.39l740kpx2.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.39l740kpx2.webp)\n\n4. 貼上好心人開源的模板\n\n```\nhttps://github.com/m-sarabi/cloudflare-telegram-bot\n```\n\n5. 選擇TypeScript\n\n6. 詢問是否使用 Git 選Yes\n\n7. 最後會詢問是否要部屬，選No\n\n![image.3uuuqbmo97.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.3uuuqbmo97.webp)\n\n到這邊專案就建立完成了\n\n------\n\n## 設定Telegram Bot\n\n1. 到 [BotFather](https://t.me/botfather) 建立Bot\n\n2. 輸入 `/newbot` 並按照指示操作\n\n3. 記得Bot Token，等等會用到\n\n------\n\n## 專案環境設定\n\n1. 找到 wrangler.toml 設定環境變數\n\n- SECRET: 將 <SECRET> 替換為一個隨機的 token，以確保請求來自你設定的 webhook。\n它可以是 1 到 256 個字串，包括 A-Z、a-z、0-9、_ 和 -。\n- API_TOKEN: 將 <API_TOKEN> 替換為你 @BotFather 獲得的 API token。\n\n解開註解，填入剛剛記得的Bot Token\nSECRET 隨意填寫，TOKEN 填入剛剛記得的Bot Token\n\n\n```toml\n[vars]\nSECRET = \"tg-bot\"\nTOKEN = \"<API_TOKEN>\"\n```\n\n2. 保存後在終端機輸入\n\n```bash\nnpm run cf-typegen\n```\n這個指令會重新生成 worker-configuration.d.ts 文件，反映你剛剛設定的變數。\n\n## 修改專案\n\n現在，讓我們進入有趣的部分——編寫機器人代碼！在這個例子中，我們將創建以下功能：\n\n**情境**：當使用者發送 `/start` 指令時，機器人會顯示一條帶有按鈕的訊息。當按下按鈕後，機器人會移除該按鈕並回傳訊息。\n\n### 處理 `/start` 指令\n\n所有的更新處理函數都位於 `src/Telegram/handlers` 目錄中。\n\n我們將從回應 `/start` 指令並發送一條訊息與內聯按鈕開始。請按如下方式修改 `src/Telegram/handlers/handleMessage.ts`：\n\n```typescript\nimport { tg } from '../lib/methods';\n\nexport async function handleMessage(message: tgTypes.Message) {\n    const messageText = message.text;\n    const chatId = message.chat.id;\n    if (messageText === '/start') {\n        await tg.sendMessage({\n            text: 'Welcome to my bot! Press the button to accept my rules!',\n            chat_id: chatId,\n            reply_markup: {\n                inline_keyboard: [[{ text: 'I Accept', callback_data: 'accept_rules' }]]\n            }\n        });\n    }\n}\n```\n\n這段程式碼使用 `tg.sendMessage` 方法發送一條帶有內聯鍵盤按鈕的訊息。\n\n### 處理內聯按鈕點擊\n\n當使用者點擊內聯按鈕時，我們希望機器人能夠確認這個動作。請修改 `src/Telegram/handlers/handleCallbackQuery.ts`：\n\n```typescript\nimport { tg } from '../lib/methods';\n\nexport async function handleCallbackQuery(callbackQuery: tgTypes.CallbackQuery) {\n    const data = callbackQuery.data;\n    const messageId = callbackQuery.message?.message_id;\n    const chatId = callbackQuery.message?.chat.id;\n    if (messageId && chatId) {\n        if (data === 'accept_rules') {\n            await tg.editMessageReplyMarkup({\n                chat_id: chatId,\n                message_id: messageId,\n                reply_markup: undefined\n            });\n            await tg.sendMessage({\n                chat_id: chatId,\n                text: 'Thanks for accepting my rules.'\n            });\n        }\n    }\n}\n```\n\n這段程式碼會監聽 `accept_rules` 的數據查詢，並在匹配時移除內聯按鈕，然後使用 `tg.editMessageReplyMarkup` 方法發送一條跟進訊息。\n\n### 🔗 註冊你的 Webhook\n\n在設置好機器人的邏輯後，現在是部署 Worker 並通過 Webhook 連接到 Telegram 的時候了。\n\n1. 執行 `npm wrangler deploy ` 或 `wrangler deploy` 來部署你的 Worker。\n2. 前往你的 Cloudflare 控制台並選擇 Workers & Pages。\n\n![image.4n7q82irf3.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.4n7q82irf3.webp)\n\n3. 在你的專案名稱旁邊，點擊 `造訪`。\n4. 在 URL 連結後面添加 `/registerWebhook`（例如 `https://my-project.my-username.workers.dev/registerWebhook`）並按下 Enter。如果你看到 “Webhook registered”，表示你已正確完成設置！\n5. 一旦部署並註冊完成，你可以在 Telegram 上與你的機器人互動。首先點擊 Start（或發送 `/start`），你應該會看到帶有內聯按鈕的歡迎訊息。\n\n\n\n## 本機開發\n\n如果要在本機開發機器人，建議使用 ngrok 來建立一個公開的 URL\n因為 Telegram 需要 Webhook 的需求 URL 是 https 開頭的\n\n1. 到 [ngrok](https://ngrok.com/) 註冊帳號\n\n2. 取得 ngrok 的 authtoken\n\n![image.70acpa5g8u.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.70acpa5g8u.webp)\n\n3. 到終端機輸入\n\n```bash\nngrok config add-authtoken <your-authtoken>\n```\n\n4. 首先修改 `package.json`，添加開發腳本：\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"wrangler dev --local\",\n    \"tunnel\": \"ngrok http 8787\"\n  }\n}\n```\n5. 修改 `src/index.ts` 中的 webhook 註冊邏輯：\n\n```typescript\nconst isDev = url.hostname === 'localhost' || url.hostname.includes('ngrok');\n\nif (url.pathname === REGISTER) {\n    try {\n        const webhookUrl = isDev \n            ? `https://${url.hostname}${WEBHOOK}`  // ngrok URL\n            : `${url.protocol}//${url.hostname}${WEBHOOK}`; // production URL\n            \n        const result = await tg.setWebhook({\n            url: webhookUrl,\n            secret_token: env.SECRET,\n        });\n        if (result) return new Response('Webhook registered.');\n        else return new Response('Failed to register webhook.');\n    } catch (error) {\n        return new Response(`Error: ${error}`);\n    }\n}\n```\n\n6. 開發流程：\n\n這邊會需要開到兩個終端機\n\n```bash\n# 終端機 1：啟動 wrangler\nnpm run dev\n\n# 終端機 2：啟動 ngrok\nnpm run tunnel\n```\n\n7. 到瀏覽器輸入 ngrok 提供的 URL 來註冊 webhook：\n\n```\nhttps://<ngrok-url>/registerWebhook\n```\n\n\n\n## 🔗 參考資源\n\n- [Cloudflare Workers 文檔](https://developers.cloudflare.com/workers/)\n- [Telegram Bot API](https://core.telegram.org/bots/api)\n- [模板的 GitHub 倉庫](https://github.com/m-sarabi/cloudflare-telegram-bot)\n\n","source":"_posts/2024-11-07-使用CloudFlare-Work架設telegram-bot.md","raw":"---\ntitle: 使用CloudFlare Work架設telegram bot\ndate: 2024-11-07 21:20:20\ntags:\n  - [Tools]\ncategories:\n  - [Tools]\n---\n\n\n使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot\n每個月有 10 萬次請求，足夠應付一般使用\n\n<!-- more -->\n\n------\n\n## 登入/註冊 CloudFlare\n\n到 [CloudFlare](https://dash.cloudflare.com/login) 登入/註冊\n\n註冊後就會開通免費方案，可以開始使用\n\n## 安裝node.js\n\n到 [nodejs.org](https://nodejs.org/en) 下載對應版本安裝\n\n確認是否安裝成功\n\n```bash\nnode -v\n```\n\n## 建立wrangler專案\n\n1. 擇一使用npm、pnpm、yarn安裝wrangler(官方推薦使用npm)\n\n```bash\nnpm install wrangler\n```\n\n2. 使用wrangler建立專案\n\n專案名稱可以隨意命名，會新增一個專案資料夾\n\n```bash\nnpm create cloudflare@latest <你的專案名稱>\n```\n\n3. 到這邊記得選 `Template from a GitHub repo`\n\n![image.39l740kpx2.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.39l740kpx2.webp)\n\n4. 貼上好心人開源的模板\n\n```\nhttps://github.com/m-sarabi/cloudflare-telegram-bot\n```\n\n5. 選擇TypeScript\n\n6. 詢問是否使用 Git 選Yes\n\n7. 最後會詢問是否要部屬，選No\n\n![image.3uuuqbmo97.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.3uuuqbmo97.webp)\n\n到這邊專案就建立完成了\n\n------\n\n## 設定Telegram Bot\n\n1. 到 [BotFather](https://t.me/botfather) 建立Bot\n\n2. 輸入 `/newbot` 並按照指示操作\n\n3. 記得Bot Token，等等會用到\n\n------\n\n## 專案環境設定\n\n1. 找到 wrangler.toml 設定環境變數\n\n- SECRET: 將 <SECRET> 替換為一個隨機的 token，以確保請求來自你設定的 webhook。\n它可以是 1 到 256 個字串，包括 A-Z、a-z、0-9、_ 和 -。\n- API_TOKEN: 將 <API_TOKEN> 替換為你 @BotFather 獲得的 API token。\n\n解開註解，填入剛剛記得的Bot Token\nSECRET 隨意填寫，TOKEN 填入剛剛記得的Bot Token\n\n\n```toml\n[vars]\nSECRET = \"tg-bot\"\nTOKEN = \"<API_TOKEN>\"\n```\n\n2. 保存後在終端機輸入\n\n```bash\nnpm run cf-typegen\n```\n這個指令會重新生成 worker-configuration.d.ts 文件，反映你剛剛設定的變數。\n\n## 修改專案\n\n現在，讓我們進入有趣的部分——編寫機器人代碼！在這個例子中，我們將創建以下功能：\n\n**情境**：當使用者發送 `/start` 指令時，機器人會顯示一條帶有按鈕的訊息。當按下按鈕後，機器人會移除該按鈕並回傳訊息。\n\n### 處理 `/start` 指令\n\n所有的更新處理函數都位於 `src/Telegram/handlers` 目錄中。\n\n我們將從回應 `/start` 指令並發送一條訊息與內聯按鈕開始。請按如下方式修改 `src/Telegram/handlers/handleMessage.ts`：\n\n```typescript\nimport { tg } from '../lib/methods';\n\nexport async function handleMessage(message: tgTypes.Message) {\n    const messageText = message.text;\n    const chatId = message.chat.id;\n    if (messageText === '/start') {\n        await tg.sendMessage({\n            text: 'Welcome to my bot! Press the button to accept my rules!',\n            chat_id: chatId,\n            reply_markup: {\n                inline_keyboard: [[{ text: 'I Accept', callback_data: 'accept_rules' }]]\n            }\n        });\n    }\n}\n```\n\n這段程式碼使用 `tg.sendMessage` 方法發送一條帶有內聯鍵盤按鈕的訊息。\n\n### 處理內聯按鈕點擊\n\n當使用者點擊內聯按鈕時，我們希望機器人能夠確認這個動作。請修改 `src/Telegram/handlers/handleCallbackQuery.ts`：\n\n```typescript\nimport { tg } from '../lib/methods';\n\nexport async function handleCallbackQuery(callbackQuery: tgTypes.CallbackQuery) {\n    const data = callbackQuery.data;\n    const messageId = callbackQuery.message?.message_id;\n    const chatId = callbackQuery.message?.chat.id;\n    if (messageId && chatId) {\n        if (data === 'accept_rules') {\n            await tg.editMessageReplyMarkup({\n                chat_id: chatId,\n                message_id: messageId,\n                reply_markup: undefined\n            });\n            await tg.sendMessage({\n                chat_id: chatId,\n                text: 'Thanks for accepting my rules.'\n            });\n        }\n    }\n}\n```\n\n這段程式碼會監聽 `accept_rules` 的數據查詢，並在匹配時移除內聯按鈕，然後使用 `tg.editMessageReplyMarkup` 方法發送一條跟進訊息。\n\n### 🔗 註冊你的 Webhook\n\n在設置好機器人的邏輯後，現在是部署 Worker 並通過 Webhook 連接到 Telegram 的時候了。\n\n1. 執行 `npm wrangler deploy ` 或 `wrangler deploy` 來部署你的 Worker。\n2. 前往你的 Cloudflare 控制台並選擇 Workers & Pages。\n\n![image.4n7q82irf3.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.4n7q82irf3.webp)\n\n3. 在你的專案名稱旁邊，點擊 `造訪`。\n4. 在 URL 連結後面添加 `/registerWebhook`（例如 `https://my-project.my-username.workers.dev/registerWebhook`）並按下 Enter。如果你看到 “Webhook registered”，表示你已正確完成設置！\n5. 一旦部署並註冊完成，你可以在 Telegram 上與你的機器人互動。首先點擊 Start（或發送 `/start`），你應該會看到帶有內聯按鈕的歡迎訊息。\n\n\n\n## 本機開發\n\n如果要在本機開發機器人，建議使用 ngrok 來建立一個公開的 URL\n因為 Telegram 需要 Webhook 的需求 URL 是 https 開頭的\n\n1. 到 [ngrok](https://ngrok.com/) 註冊帳號\n\n2. 取得 ngrok 的 authtoken\n\n![image.70acpa5g8u.webp](https://github.com/aliceric27/picx-images-hosting/raw/master/image.70acpa5g8u.webp)\n\n3. 到終端機輸入\n\n```bash\nngrok config add-authtoken <your-authtoken>\n```\n\n4. 首先修改 `package.json`，添加開發腳本：\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"wrangler dev --local\",\n    \"tunnel\": \"ngrok http 8787\"\n  }\n}\n```\n5. 修改 `src/index.ts` 中的 webhook 註冊邏輯：\n\n```typescript\nconst isDev = url.hostname === 'localhost' || url.hostname.includes('ngrok');\n\nif (url.pathname === REGISTER) {\n    try {\n        const webhookUrl = isDev \n            ? `https://${url.hostname}${WEBHOOK}`  // ngrok URL\n            : `${url.protocol}//${url.hostname}${WEBHOOK}`; // production URL\n            \n        const result = await tg.setWebhook({\n            url: webhookUrl,\n            secret_token: env.SECRET,\n        });\n        if (result) return new Response('Webhook registered.');\n        else return new Response('Failed to register webhook.');\n    } catch (error) {\n        return new Response(`Error: ${error}`);\n    }\n}\n```\n\n6. 開發流程：\n\n這邊會需要開到兩個終端機\n\n```bash\n# 終端機 1：啟動 wrangler\nnpm run dev\n\n# 終端機 2：啟動 ngrok\nnpm run tunnel\n```\n\n7. 到瀏覽器輸入 ngrok 提供的 URL 來註冊 webhook：\n\n```\nhttps://<ngrok-url>/registerWebhook\n```\n\n\n\n## 🔗 參考資源\n\n- [Cloudflare Workers 文檔](https://developers.cloudflare.com/workers/)\n- [Telegram Bot API](https://core.telegram.org/bots/api)\n- [模板的 GitHub 倉庫](https://github.com/m-sarabi/cloudflare-telegram-bot)\n\n","slug":"2024-11-07-使用CloudFlare-Work架設telegram-bot","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgskc000rqouda2rh4950","content":"<p>使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot<br>每個月有 10 萬次請求，足夠應付一般使用</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"登入-註冊-CloudFlare\"><a href=\"#登入-註冊-CloudFlare\" class=\"headerlink\" title=\"登入&#x2F;註冊 CloudFlare\"></a>登入&#x2F;註冊 CloudFlare</h2><p>到 <a href=\"https://dash.cloudflare.com/login\">CloudFlare</a> 登入&#x2F;註冊</p>\n<p>註冊後就會開通免費方案，可以開始使用</p>\n<h2 id=\"安裝node-js\"><a href=\"#安裝node-js\" class=\"headerlink\" title=\"安裝node.js\"></a>安裝node.js</h2><p>到 <a href=\"https://nodejs.org/en\">nodejs.org</a> 下載對應版本安裝</p>\n<p>確認是否安裝成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立wrangler專案\"><a href=\"#建立wrangler專案\" class=\"headerlink\" title=\"建立wrangler專案\"></a>建立wrangler專案</h2><ol>\n<li>擇一使用npm、pnpm、yarn安裝wrangler(官方推薦使用npm)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install wrangler</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用wrangler建立專案</li>\n</ol>\n<p>專案名稱可以隨意命名，會新增一個專案資料夾</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create cloudflare@latest &lt;你的專案名稱&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>到這邊記得選 <code>Template from a GitHub repo</code></li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.39l740kpx2.webp\" alt=\"image.39l740kpx2.webp\"></p>\n<ol start=\"4\">\n<li>貼上好心人開源的模板</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/m-sarabi/cloudflare-telegram-bot</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>選擇TypeScript</p>\n</li>\n<li><p>詢問是否使用 Git 選Yes</p>\n</li>\n<li><p>最後會詢問是否要部屬，選No</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.3uuuqbmo97.webp\" alt=\"image.3uuuqbmo97.webp\"></p>\n<p>到這邊專案就建立完成了</p>\n<hr>\n<h2 id=\"設定Telegram-Bot\"><a href=\"#設定Telegram-Bot\" class=\"headerlink\" title=\"設定Telegram Bot\"></a>設定Telegram Bot</h2><ol>\n<li><p>到 <a href=\"https://t.me/botfather\">BotFather</a> 建立Bot</p>\n</li>\n<li><p>輸入 <code>/newbot</code> 並按照指示操作</p>\n</li>\n<li><p>記得Bot Token，等等會用到</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"專案環境設定\"><a href=\"#專案環境設定\" class=\"headerlink\" title=\"專案環境設定\"></a>專案環境設定</h2><ol>\n<li>找到 wrangler.toml 設定環境變數</li>\n</ol>\n<ul>\n<li>SECRET: 將 <SECRET> 替換為一個隨機的 token，以確保請求來自你設定的 webhook。<br>它可以是 1 到 256 個字串，包括 A-Z、a-z、0-9、_ 和 -。</li>\n<li>API_TOKEN: 將 <API_TOKEN> 替換為你 @BotFather 獲得的 API token。</li>\n</ul>\n<p>解開註解，填入剛剛記得的Bot Token<br>SECRET 隨意填寫，TOKEN 填入剛剛記得的Bot Token</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vars]</span></span><br><span class=\"line\"><span class=\"attr\">SECRET</span> = <span class=\"string\">&quot;tg-bot&quot;</span></span><br><span class=\"line\"><span class=\"attr\">TOKEN</span> = <span class=\"string\">&quot;&lt;API_TOKEN&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>保存後在終端機輸入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run cf-typegen</span><br></pre></td></tr></table></figure>\n<p>這個指令會重新生成 worker-configuration.d.ts 文件，反映你剛剛設定的變數。</p>\n<h2 id=\"修改專案\"><a href=\"#修改專案\" class=\"headerlink\" title=\"修改專案\"></a>修改專案</h2><p>現在，讓我們進入有趣的部分——編寫機器人代碼！在這個例子中，我們將創建以下功能：</p>\n<p><strong>情境</strong>：當使用者發送 <code>/start</code> 指令時，機器人會顯示一條帶有按鈕的訊息。當按下按鈕後，機器人會移除該按鈕並回傳訊息。</p>\n<h3 id=\"處理-start-指令\"><a href=\"#處理-start-指令\" class=\"headerlink\" title=\"處理 /start 指令\"></a>處理 <code>/start</code> 指令</h3><p>所有的更新處理函數都位於 <code>src/Telegram/handlers</code> 目錄中。</p>\n<p>我們將從回應 <code>/start</code> 指令並發送一條訊息與內聯按鈕開始。請按如下方式修改 <code>src/Telegram/handlers/handleMessage.ts</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; tg &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../lib/methods&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleMessage</span>(<span class=\"params\"><span class=\"attr\">message</span>: tgTypes.<span class=\"title class_\">Message</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> messageText = message.<span class=\"property\">text</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = message.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (messageText === <span class=\"string\">&#x27;/start&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tg.<span class=\"title function_\">sendMessage</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Welcome to my bot! Press the button to accept my rules!&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">            <span class=\"attr\">reply_markup</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">inline_keyboard</span>: [[&#123; <span class=\"attr\">text</span>: <span class=\"string\">&#x27;I Accept&#x27;</span>, <span class=\"attr\">callback_data</span>: <span class=\"string\">&#x27;accept_rules&#x27;</span> &#125;]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這段程式碼使用 <code>tg.sendMessage</code> 方法發送一條帶有內聯鍵盤按鈕的訊息。</p>\n<h3 id=\"處理內聯按鈕點擊\"><a href=\"#處理內聯按鈕點擊\" class=\"headerlink\" title=\"處理內聯按鈕點擊\"></a>處理內聯按鈕點擊</h3><p>當使用者點擊內聯按鈕時，我們希望機器人能夠確認這個動作。請修改 <code>src/Telegram/handlers/handleCallbackQuery.ts</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; tg &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../lib/methods&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleCallbackQuery</span>(<span class=\"params\"><span class=\"attr\">callbackQuery</span>: tgTypes.<span class=\"title class_\">CallbackQuery</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = callbackQuery.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> messageId = callbackQuery.<span class=\"property\">message</span>?.<span class=\"property\">message_id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = callbackQuery.<span class=\"property\">message</span>?.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (messageId &amp;&amp; chatId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data === <span class=\"string\">&#x27;accept_rules&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> tg.<span class=\"title function_\">editMessageReplyMarkup</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">                <span class=\"attr\">message_id</span>: messageId,</span><br><span class=\"line\">                <span class=\"attr\">reply_markup</span>: <span class=\"literal\">undefined</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> tg.<span class=\"title function_\">sendMessage</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">                <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Thanks for accepting my rules.&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這段程式碼會監聽 <code>accept_rules</code> 的數據查詢，並在匹配時移除內聯按鈕，然後使用 <code>tg.editMessageReplyMarkup</code> 方法發送一條跟進訊息。</p>\n<h3 id=\"🔗-註冊你的-Webhook\"><a href=\"#🔗-註冊你的-Webhook\" class=\"headerlink\" title=\"🔗 註冊你的 Webhook\"></a>🔗 註冊你的 Webhook</h3><p>在設置好機器人的邏輯後，現在是部署 Worker 並通過 Webhook 連接到 Telegram 的時候了。</p>\n<ol>\n<li>執行 <code>npm wrangler deploy </code> 或 <code>wrangler deploy</code> 來部署你的 Worker。</li>\n<li>前往你的 Cloudflare 控制台並選擇 Workers &amp; Pages。</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.4n7q82irf3.webp\" alt=\"image.4n7q82irf3.webp\"></p>\n<ol start=\"3\">\n<li>在你的專案名稱旁邊，點擊 <code>造訪</code>。</li>\n<li>在 URL 連結後面添加 <code>/registerWebhook</code>（例如 <code>https://my-project.my-username.workers.dev/registerWebhook</code>）並按下 Enter。如果你看到 “Webhook registered”，表示你已正確完成設置！</li>\n<li>一旦部署並註冊完成，你可以在 Telegram 上與你的機器人互動。首先點擊 Start（或發送 <code>/start</code>），你應該會看到帶有內聯按鈕的歡迎訊息。</li>\n</ol>\n<h2 id=\"本機開發\"><a href=\"#本機開發\" class=\"headerlink\" title=\"本機開發\"></a>本機開發</h2><p>如果要在本機開發機器人，建議使用 ngrok 來建立一個公開的 URL<br>因為 Telegram 需要 Webhook 的需求 URL 是 https 開頭的</p>\n<ol>\n<li><p>到 <a href=\"https://ngrok.com/\">ngrok</a> 註冊帳號</p>\n</li>\n<li><p>取得 ngrok 的 authtoken</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.70acpa5g8u.webp\" alt=\"image.70acpa5g8u.webp\"></p>\n<ol start=\"3\">\n<li>到終端機輸入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok config add-authtoken &lt;your-authtoken&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>首先修改 <code>package.json</code>，添加開發腳本：</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wrangler dev --local&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tunnel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ngrok http 8787&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 <code>src/index.ts</code> 中的 webhook 註冊邏輯：</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDev = url.<span class=\"property\">hostname</span> === <span class=\"string\">&#x27;localhost&#x27;</span> || url.<span class=\"property\">hostname</span>.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;ngrok&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (url.<span class=\"property\">pathname</span> === <span class=\"variable constant_\">REGISTER</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> webhookUrl = isDev </span><br><span class=\"line\">            ? <span class=\"string\">`https://<span class=\"subst\">$&#123;url.hostname&#125;</span><span class=\"subst\">$&#123;WEBHOOK&#125;</span>`</span>  <span class=\"comment\">// ngrok URL</span></span><br><span class=\"line\">            : <span class=\"string\">`<span class=\"subst\">$&#123;url.protocol&#125;</span>//<span class=\"subst\">$&#123;url.hostname&#125;</span><span class=\"subst\">$&#123;WEBHOOK&#125;</span>`</span>; <span class=\"comment\">// production URL</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> tg.<span class=\"title function_\">setWebhook</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>: webhookUrl,</span><br><span class=\"line\">            <span class=\"attr\">secret_token</span>: env.<span class=\"property\">SECRET</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">&#x27;Webhook registered.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">&#x27;Failed to register webhook.&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">`Error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>開發流程：</li>\n</ol>\n<p>這邊會需要開到兩個終端機</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 終端機 1：啟動 wrangler</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 終端機 2：啟動 ngrok</span></span><br><span class=\"line\">npm run tunnel</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>到瀏覽器輸入 ngrok 提供的 URL 來註冊 webhook：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;ngrok-url&gt;/registerWebhook</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"🔗-參考資源\"><a href=\"#🔗-參考資源\" class=\"headerlink\" title=\"🔗 參考資源\"></a>🔗 參考資源</h2><ul>\n<li><a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers 文檔</a></li>\n<li><a href=\"https://core.telegram.org/bots/api\">Telegram Bot API</a></li>\n<li><a href=\"https://github.com/m-sarabi/cloudflare-telegram-bot\">模板的 GitHub 倉庫</a></li>\n</ul>\n","excerpt":"<p>使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot<br>每個月有 10 萬次請求，足夠應付一般使用</p>","more":"<hr>\n<h2 id=\"登入-註冊-CloudFlare\"><a href=\"#登入-註冊-CloudFlare\" class=\"headerlink\" title=\"登入&#x2F;註冊 CloudFlare\"></a>登入&#x2F;註冊 CloudFlare</h2><p>到 <a href=\"https://dash.cloudflare.com/login\">CloudFlare</a> 登入&#x2F;註冊</p>\n<p>註冊後就會開通免費方案，可以開始使用</p>\n<h2 id=\"安裝node-js\"><a href=\"#安裝node-js\" class=\"headerlink\" title=\"安裝node.js\"></a>安裝node.js</h2><p>到 <a href=\"https://nodejs.org/en\">nodejs.org</a> 下載對應版本安裝</p>\n<p>確認是否安裝成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立wrangler專案\"><a href=\"#建立wrangler專案\" class=\"headerlink\" title=\"建立wrangler專案\"></a>建立wrangler專案</h2><ol>\n<li>擇一使用npm、pnpm、yarn安裝wrangler(官方推薦使用npm)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install wrangler</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用wrangler建立專案</li>\n</ol>\n<p>專案名稱可以隨意命名，會新增一個專案資料夾</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create cloudflare@latest &lt;你的專案名稱&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>到這邊記得選 <code>Template from a GitHub repo</code></li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.39l740kpx2.webp\" alt=\"image.39l740kpx2.webp\"></p>\n<ol start=\"4\">\n<li>貼上好心人開源的模板</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/m-sarabi/cloudflare-telegram-bot</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>選擇TypeScript</p>\n</li>\n<li><p>詢問是否使用 Git 選Yes</p>\n</li>\n<li><p>最後會詢問是否要部屬，選No</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.3uuuqbmo97.webp\" alt=\"image.3uuuqbmo97.webp\"></p>\n<p>到這邊專案就建立完成了</p>\n<hr>\n<h2 id=\"設定Telegram-Bot\"><a href=\"#設定Telegram-Bot\" class=\"headerlink\" title=\"設定Telegram Bot\"></a>設定Telegram Bot</h2><ol>\n<li><p>到 <a href=\"https://t.me/botfather\">BotFather</a> 建立Bot</p>\n</li>\n<li><p>輸入 <code>/newbot</code> 並按照指示操作</p>\n</li>\n<li><p>記得Bot Token，等等會用到</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"專案環境設定\"><a href=\"#專案環境設定\" class=\"headerlink\" title=\"專案環境設定\"></a>專案環境設定</h2><ol>\n<li>找到 wrangler.toml 設定環境變數</li>\n</ol>\n<ul>\n<li>SECRET: 將 <SECRET> 替換為一個隨機的 token，以確保請求來自你設定的 webhook。<br>它可以是 1 到 256 個字串，包括 A-Z、a-z、0-9、_ 和 -。</li>\n<li>API_TOKEN: 將 <API_TOKEN> 替換為你 @BotFather 獲得的 API token。</li>\n</ul>\n<p>解開註解，填入剛剛記得的Bot Token<br>SECRET 隨意填寫，TOKEN 填入剛剛記得的Bot Token</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vars]</span></span><br><span class=\"line\"><span class=\"attr\">SECRET</span> = <span class=\"string\">&quot;tg-bot&quot;</span></span><br><span class=\"line\"><span class=\"attr\">TOKEN</span> = <span class=\"string\">&quot;&lt;API_TOKEN&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>保存後在終端機輸入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run cf-typegen</span><br></pre></td></tr></table></figure>\n<p>這個指令會重新生成 worker-configuration.d.ts 文件，反映你剛剛設定的變數。</p>\n<h2 id=\"修改專案\"><a href=\"#修改專案\" class=\"headerlink\" title=\"修改專案\"></a>修改專案</h2><p>現在，讓我們進入有趣的部分——編寫機器人代碼！在這個例子中，我們將創建以下功能：</p>\n<p><strong>情境</strong>：當使用者發送 <code>/start</code> 指令時，機器人會顯示一條帶有按鈕的訊息。當按下按鈕後，機器人會移除該按鈕並回傳訊息。</p>\n<h3 id=\"處理-start-指令\"><a href=\"#處理-start-指令\" class=\"headerlink\" title=\"處理 /start 指令\"></a>處理 <code>/start</code> 指令</h3><p>所有的更新處理函數都位於 <code>src/Telegram/handlers</code> 目錄中。</p>\n<p>我們將從回應 <code>/start</code> 指令並發送一條訊息與內聯按鈕開始。請按如下方式修改 <code>src/Telegram/handlers/handleMessage.ts</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; tg &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../lib/methods&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleMessage</span>(<span class=\"params\"><span class=\"attr\">message</span>: tgTypes.<span class=\"title class_\">Message</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> messageText = message.<span class=\"property\">text</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = message.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (messageText === <span class=\"string\">&#x27;/start&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tg.<span class=\"title function_\">sendMessage</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Welcome to my bot! Press the button to accept my rules!&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">            <span class=\"attr\">reply_markup</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">inline_keyboard</span>: [[&#123; <span class=\"attr\">text</span>: <span class=\"string\">&#x27;I Accept&#x27;</span>, <span class=\"attr\">callback_data</span>: <span class=\"string\">&#x27;accept_rules&#x27;</span> &#125;]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這段程式碼使用 <code>tg.sendMessage</code> 方法發送一條帶有內聯鍵盤按鈕的訊息。</p>\n<h3 id=\"處理內聯按鈕點擊\"><a href=\"#處理內聯按鈕點擊\" class=\"headerlink\" title=\"處理內聯按鈕點擊\"></a>處理內聯按鈕點擊</h3><p>當使用者點擊內聯按鈕時，我們希望機器人能夠確認這個動作。請修改 <code>src/Telegram/handlers/handleCallbackQuery.ts</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; tg &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../lib/methods&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleCallbackQuery</span>(<span class=\"params\"><span class=\"attr\">callbackQuery</span>: tgTypes.<span class=\"title class_\">CallbackQuery</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = callbackQuery.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> messageId = callbackQuery.<span class=\"property\">message</span>?.<span class=\"property\">message_id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = callbackQuery.<span class=\"property\">message</span>?.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (messageId &amp;&amp; chatId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data === <span class=\"string\">&#x27;accept_rules&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> tg.<span class=\"title function_\">editMessageReplyMarkup</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">                <span class=\"attr\">message_id</span>: messageId,</span><br><span class=\"line\">                <span class=\"attr\">reply_markup</span>: <span class=\"literal\">undefined</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> tg.<span class=\"title function_\">sendMessage</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">chat_id</span>: chatId,</span><br><span class=\"line\">                <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Thanks for accepting my rules.&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這段程式碼會監聽 <code>accept_rules</code> 的數據查詢，並在匹配時移除內聯按鈕，然後使用 <code>tg.editMessageReplyMarkup</code> 方法發送一條跟進訊息。</p>\n<h3 id=\"🔗-註冊你的-Webhook\"><a href=\"#🔗-註冊你的-Webhook\" class=\"headerlink\" title=\"🔗 註冊你的 Webhook\"></a>🔗 註冊你的 Webhook</h3><p>在設置好機器人的邏輯後，現在是部署 Worker 並通過 Webhook 連接到 Telegram 的時候了。</p>\n<ol>\n<li>執行 <code>npm wrangler deploy </code> 或 <code>wrangler deploy</code> 來部署你的 Worker。</li>\n<li>前往你的 Cloudflare 控制台並選擇 Workers &amp; Pages。</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.4n7q82irf3.webp\" alt=\"image.4n7q82irf3.webp\"></p>\n<ol start=\"3\">\n<li>在你的專案名稱旁邊，點擊 <code>造訪</code>。</li>\n<li>在 URL 連結後面添加 <code>/registerWebhook</code>（例如 <code>https://my-project.my-username.workers.dev/registerWebhook</code>）並按下 Enter。如果你看到 “Webhook registered”，表示你已正確完成設置！</li>\n<li>一旦部署並註冊完成，你可以在 Telegram 上與你的機器人互動。首先點擊 Start（或發送 <code>/start</code>），你應該會看到帶有內聯按鈕的歡迎訊息。</li>\n</ol>\n<h2 id=\"本機開發\"><a href=\"#本機開發\" class=\"headerlink\" title=\"本機開發\"></a>本機開發</h2><p>如果要在本機開發機器人，建議使用 ngrok 來建立一個公開的 URL<br>因為 Telegram 需要 Webhook 的需求 URL 是 https 開頭的</p>\n<ol>\n<li><p>到 <a href=\"https://ngrok.com/\">ngrok</a> 註冊帳號</p>\n</li>\n<li><p>取得 ngrok 的 authtoken</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/image.70acpa5g8u.webp\" alt=\"image.70acpa5g8u.webp\"></p>\n<ol start=\"3\">\n<li>到終端機輸入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok config add-authtoken &lt;your-authtoken&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>首先修改 <code>package.json</code>，添加開發腳本：</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wrangler dev --local&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tunnel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ngrok http 8787&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 <code>src/index.ts</code> 中的 webhook 註冊邏輯：</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDev = url.<span class=\"property\">hostname</span> === <span class=\"string\">&#x27;localhost&#x27;</span> || url.<span class=\"property\">hostname</span>.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;ngrok&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (url.<span class=\"property\">pathname</span> === <span class=\"variable constant_\">REGISTER</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> webhookUrl = isDev </span><br><span class=\"line\">            ? <span class=\"string\">`https://<span class=\"subst\">$&#123;url.hostname&#125;</span><span class=\"subst\">$&#123;WEBHOOK&#125;</span>`</span>  <span class=\"comment\">// ngrok URL</span></span><br><span class=\"line\">            : <span class=\"string\">`<span class=\"subst\">$&#123;url.protocol&#125;</span>//<span class=\"subst\">$&#123;url.hostname&#125;</span><span class=\"subst\">$&#123;WEBHOOK&#125;</span>`</span>; <span class=\"comment\">// production URL</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> tg.<span class=\"title function_\">setWebhook</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>: webhookUrl,</span><br><span class=\"line\">            <span class=\"attr\">secret_token</span>: env.<span class=\"property\">SECRET</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">&#x27;Webhook registered.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">&#x27;Failed to register webhook.&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">`Error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>開發流程：</li>\n</ol>\n<p>這邊會需要開到兩個終端機</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 終端機 1：啟動 wrangler</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 終端機 2：啟動 ngrok</span></span><br><span class=\"line\">npm run tunnel</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>到瀏覽器輸入 ngrok 提供的 URL 來註冊 webhook：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;ngrok-url&gt;/registerWebhook</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"🔗-參考資源\"><a href=\"#🔗-參考資源\" class=\"headerlink\" title=\"🔗 參考資源\"></a>🔗 參考資源</h2><ul>\n<li><a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers 文檔</a></li>\n<li><a href=\"https://core.telegram.org/bots/api\">Telegram Bot API</a></li>\n<li><a href=\"https://github.com/m-sarabi/cloudflare-telegram-bot\">模板的 GitHub 倉庫</a></li>\n</ul>"},{"title":"一位女性殺人犯的素描","date":"2024-10-18T02:13:47.000Z","_content":"\n\n一本講述台灣目前一位女性死刑犯的故事心得。\n\n<!-- more -->\n\n------\n\n<figure>\n  <img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/一位女性殺人犯的素描.39l6p90lnj.webp\" width=\"50%\" alt=\"一位女性殺人犯的素描\">\n  <figcaption>一位女性殺人犯的素描, 一位女性殺人犯的素描：她如何謀弒母親、婆婆與丈夫</figcaption>\n</figure>\n\n## 過程\n\n閱讀這本書的過程其實並不容易，可能是因為作者撰寫的節奏問題。作者是一名記者，記錄了她在台中女子監獄採訪死刑犯**林于如**的經歷。\n\n在這本書中，我們能看到監獄內部的封閉狀況，這個獄中世界宛如一個小型國家，讓我想起《2077：狗命鎮》中軍閥割據的景象，有著自己的潛規則和對囚犯探監權的掌控。每位囚犯根據等級不同，外界的探監頻率也有所差異，重刑犯甚至一週只有一次直系親屬探訪的權利。而每次的探訪申請都需經過繁瑣的審批，每次的探訪時間也非常有限。\n\n在這樣的環境中，受訪者竟異想天開地要求記者與她進行同婚，以便增加探監的時間，這讓我十分震驚。尤其是受訪者每次探訪中對作者各種金錢與物資的索求，更使兩人之間的隔閡逐漸加深。最終，受訪者同意在獄中撰寫自傳並寄給作者整理。\n\n這篇自傳真假參半，但依然是一個相當精彩的故事。自傳中提及受訪者的家庭矛盾、婆媳糾紛、金錢觀念以及詐騙等相關問題。其中最令我印象深刻的是，受訪者在年紀輕輕時便參與詐騙，且並不認為自己有錯，因為每天能賺取八、九萬，這讓人不禁感到可悲，尤其是在這個笑貧不笑娼的社會氛圍中。\n\n當年每天賺的八、九萬，如果換算成現今的購買力可能更多，而如今多數人的薪資中位數卻遠不及當年的一半。這不禁讓我聯想到我最近在看的美劇《絕命律師》。劇中，律師吉米乖乖上班卻處處受阻，最終發現只有玩弄規則才能成為既得利益者。這似乎反映了現實世界中，大多數道德感低落的人更容易賺錢，而理想往往無法養活自己。\n\n無論自傳的真實性如何，從這本書中可以更深入地理解這個人的動機。這也是我覺得本書最寶貴的地方，因為動機往往是法律案件判決的關鍵。然而，這也讓我反思，死刑並不能解決這樣的社會問題。\n\n每個人無法選擇自己的原生家庭，而原生家庭對一個人的影響極為深遠。如果我們無法提供弱勢族群相應的幫助，僅在事發後進行放大檢視，那麼這樣的做法就如同僅關注比賽的終點，而忽視選手整場比賽的經歷。\n\n## 馬拉松的隱喻\n\n舉個極端的例子，一場馬拉松中有兩位選手。一位選手一路上吃著火鍋唱著歌，甚至作弊接受他人幫助，而另一位選手則兢兢業業地跑完全程，路上的種種困難都要自己解決，沒有人會幫助他。當他即將抵達終點時，卻被那位受到各種幫助的選手超越，並在終點處爆發衝突。隔天新聞報導的卻是：\"運動員缺乏運動家精神\"。\n\n這讓我聯想到本書中的故事，外界對**林于如**的厭惡觀感，不論是檢察官、曾有衝突的批發商、還是有嫌隙的婆家，導致媒體對她幾乎都是負面描寫。而案件已經判決，即便她在獄中如何生活，社會也不再關注。\n\n## 社會的狹隘與困境\n\n台灣社會多數人的狹隘眼光，使得社會的衝突不斷。有能力改變社會的人往往處處受阻，因為在一個池子裡，當大部分人都在裡面便溺，而你試圖改變現狀時，反而會受到指責。這就是當前台灣的現狀。\n\n最近又看到一件社會案件，一名15歲無照駕車的少年撞死三名路人。新聞報導說他下車時表情嬉皮笑臉，這讓人感到憤怒。然而，聰明的人知道，這個案件不會被判死刑，甚至不會受到重刑，因為法律考量的是動機。而多數人只會聚焦於結果，而不去思考問題的根源。\n\n## 結語\n\n台灣無法進步，有很大的原因是來自於人民的無知和嗜血。在讀完這本書後，我對於社會案件有了更深的反思，也更加感受到那些試圖改變社會風氣的少數人所面臨的無力感。","source":"_posts/2024-10-18-一位女性殺人犯的素描.md","raw":"---\ntitle: 一位女性殺人犯的素描\ndate: 2024-10-18 10:13:47\ntags:\n  - [Book]\ncategories:\n  - [Book]\n---\n\n\n一本講述台灣目前一位女性死刑犯的故事心得。\n\n<!-- more -->\n\n------\n\n<figure>\n  <img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/一位女性殺人犯的素描.39l6p90lnj.webp\" width=\"50%\" alt=\"一位女性殺人犯的素描\">\n  <figcaption>一位女性殺人犯的素描, 一位女性殺人犯的素描：她如何謀弒母親、婆婆與丈夫</figcaption>\n</figure>\n\n## 過程\n\n閱讀這本書的過程其實並不容易，可能是因為作者撰寫的節奏問題。作者是一名記者，記錄了她在台中女子監獄採訪死刑犯**林于如**的經歷。\n\n在這本書中，我們能看到監獄內部的封閉狀況，這個獄中世界宛如一個小型國家，讓我想起《2077：狗命鎮》中軍閥割據的景象，有著自己的潛規則和對囚犯探監權的掌控。每位囚犯根據等級不同，外界的探監頻率也有所差異，重刑犯甚至一週只有一次直系親屬探訪的權利。而每次的探訪申請都需經過繁瑣的審批，每次的探訪時間也非常有限。\n\n在這樣的環境中，受訪者竟異想天開地要求記者與她進行同婚，以便增加探監的時間，這讓我十分震驚。尤其是受訪者每次探訪中對作者各種金錢與物資的索求，更使兩人之間的隔閡逐漸加深。最終，受訪者同意在獄中撰寫自傳並寄給作者整理。\n\n這篇自傳真假參半，但依然是一個相當精彩的故事。自傳中提及受訪者的家庭矛盾、婆媳糾紛、金錢觀念以及詐騙等相關問題。其中最令我印象深刻的是，受訪者在年紀輕輕時便參與詐騙，且並不認為自己有錯，因為每天能賺取八、九萬，這讓人不禁感到可悲，尤其是在這個笑貧不笑娼的社會氛圍中。\n\n當年每天賺的八、九萬，如果換算成現今的購買力可能更多，而如今多數人的薪資中位數卻遠不及當年的一半。這不禁讓我聯想到我最近在看的美劇《絕命律師》。劇中，律師吉米乖乖上班卻處處受阻，最終發現只有玩弄規則才能成為既得利益者。這似乎反映了現實世界中，大多數道德感低落的人更容易賺錢，而理想往往無法養活自己。\n\n無論自傳的真實性如何，從這本書中可以更深入地理解這個人的動機。這也是我覺得本書最寶貴的地方，因為動機往往是法律案件判決的關鍵。然而，這也讓我反思，死刑並不能解決這樣的社會問題。\n\n每個人無法選擇自己的原生家庭，而原生家庭對一個人的影響極為深遠。如果我們無法提供弱勢族群相應的幫助，僅在事發後進行放大檢視，那麼這樣的做法就如同僅關注比賽的終點，而忽視選手整場比賽的經歷。\n\n## 馬拉松的隱喻\n\n舉個極端的例子，一場馬拉松中有兩位選手。一位選手一路上吃著火鍋唱著歌，甚至作弊接受他人幫助，而另一位選手則兢兢業業地跑完全程，路上的種種困難都要自己解決，沒有人會幫助他。當他即將抵達終點時，卻被那位受到各種幫助的選手超越，並在終點處爆發衝突。隔天新聞報導的卻是：\"運動員缺乏運動家精神\"。\n\n這讓我聯想到本書中的故事，外界對**林于如**的厭惡觀感，不論是檢察官、曾有衝突的批發商、還是有嫌隙的婆家，導致媒體對她幾乎都是負面描寫。而案件已經判決，即便她在獄中如何生活，社會也不再關注。\n\n## 社會的狹隘與困境\n\n台灣社會多數人的狹隘眼光，使得社會的衝突不斷。有能力改變社會的人往往處處受阻，因為在一個池子裡，當大部分人都在裡面便溺，而你試圖改變現狀時，反而會受到指責。這就是當前台灣的現狀。\n\n最近又看到一件社會案件，一名15歲無照駕車的少年撞死三名路人。新聞報導說他下車時表情嬉皮笑臉，這讓人感到憤怒。然而，聰明的人知道，這個案件不會被判死刑，甚至不會受到重刑，因為法律考量的是動機。而多數人只會聚焦於結果，而不去思考問題的根源。\n\n## 結語\n\n台灣無法進步，有很大的原因是來自於人民的無知和嗜血。在讀完這本書後，我對於社會案件有了更深的反思，也更加感受到那些試圖改變社會風氣的少數人所面臨的無力感。","slug":"2024-10-18-一位女性殺人犯的素描","published":1,"updated":"2024-11-07T18:06:00.279Z","comments":1,"layout":"post","photos":[],"_id":"cm37mgskc000tqoud6tk79k38","content":"<p>一本講述台灣目前一位女性死刑犯的故事心得。</p>\n<span id=\"more\"></span>\n\n<hr>\n<figure>\n  <img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/一位女性殺人犯的素描.39l6p90lnj.webp\" width=\"50%\" alt=\"一位女性殺人犯的素描\">\n  <figcaption>一位女性殺人犯的素描, 一位女性殺人犯的素描：她如何謀弒母親、婆婆與丈夫</figcaption>\n</figure>\n\n<h2 id=\"過程\"><a href=\"#過程\" class=\"headerlink\" title=\"過程\"></a>過程</h2><p>閱讀這本書的過程其實並不容易，可能是因為作者撰寫的節奏問題。作者是一名記者，記錄了她在台中女子監獄採訪死刑犯<strong>林于如</strong>的經歷。</p>\n<p>在這本書中，我們能看到監獄內部的封閉狀況，這個獄中世界宛如一個小型國家，讓我想起《2077：狗命鎮》中軍閥割據的景象，有著自己的潛規則和對囚犯探監權的掌控。每位囚犯根據等級不同，外界的探監頻率也有所差異，重刑犯甚至一週只有一次直系親屬探訪的權利。而每次的探訪申請都需經過繁瑣的審批，每次的探訪時間也非常有限。</p>\n<p>在這樣的環境中，受訪者竟異想天開地要求記者與她進行同婚，以便增加探監的時間，這讓我十分震驚。尤其是受訪者每次探訪中對作者各種金錢與物資的索求，更使兩人之間的隔閡逐漸加深。最終，受訪者同意在獄中撰寫自傳並寄給作者整理。</p>\n<p>這篇自傳真假參半，但依然是一個相當精彩的故事。自傳中提及受訪者的家庭矛盾、婆媳糾紛、金錢觀念以及詐騙等相關問題。其中最令我印象深刻的是，受訪者在年紀輕輕時便參與詐騙，且並不認為自己有錯，因為每天能賺取八、九萬，這讓人不禁感到可悲，尤其是在這個笑貧不笑娼的社會氛圍中。</p>\n<p>當年每天賺的八、九萬，如果換算成現今的購買力可能更多，而如今多數人的薪資中位數卻遠不及當年的一半。這不禁讓我聯想到我最近在看的美劇《絕命律師》。劇中，律師吉米乖乖上班卻處處受阻，最終發現只有玩弄規則才能成為既得利益者。這似乎反映了現實世界中，大多數道德感低落的人更容易賺錢，而理想往往無法養活自己。</p>\n<p>無論自傳的真實性如何，從這本書中可以更深入地理解這個人的動機。這也是我覺得本書最寶貴的地方，因為動機往往是法律案件判決的關鍵。然而，這也讓我反思，死刑並不能解決這樣的社會問題。</p>\n<p>每個人無法選擇自己的原生家庭，而原生家庭對一個人的影響極為深遠。如果我們無法提供弱勢族群相應的幫助，僅在事發後進行放大檢視，那麼這樣的做法就如同僅關注比賽的終點，而忽視選手整場比賽的經歷。</p>\n<h2 id=\"馬拉松的隱喻\"><a href=\"#馬拉松的隱喻\" class=\"headerlink\" title=\"馬拉松的隱喻\"></a>馬拉松的隱喻</h2><p>舉個極端的例子，一場馬拉松中有兩位選手。一位選手一路上吃著火鍋唱著歌，甚至作弊接受他人幫助，而另一位選手則兢兢業業地跑完全程，路上的種種困難都要自己解決，沒有人會幫助他。當他即將抵達終點時，卻被那位受到各種幫助的選手超越，並在終點處爆發衝突。隔天新聞報導的卻是：”運動員缺乏運動家精神”。</p>\n<p>這讓我聯想到本書中的故事，外界對<strong>林于如</strong>的厭惡觀感，不論是檢察官、曾有衝突的批發商、還是有嫌隙的婆家，導致媒體對她幾乎都是負面描寫。而案件已經判決，即便她在獄中如何生活，社會也不再關注。</p>\n<h2 id=\"社會的狹隘與困境\"><a href=\"#社會的狹隘與困境\" class=\"headerlink\" title=\"社會的狹隘與困境\"></a>社會的狹隘與困境</h2><p>台灣社會多數人的狹隘眼光，使得社會的衝突不斷。有能力改變社會的人往往處處受阻，因為在一個池子裡，當大部分人都在裡面便溺，而你試圖改變現狀時，反而會受到指責。這就是當前台灣的現狀。</p>\n<p>最近又看到一件社會案件，一名15歲無照駕車的少年撞死三名路人。新聞報導說他下車時表情嬉皮笑臉，這讓人感到憤怒。然而，聰明的人知道，這個案件不會被判死刑，甚至不會受到重刑，因為法律考量的是動機。而多數人只會聚焦於結果，而不去思考問題的根源。</p>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>台灣無法進步，有很大的原因是來自於人民的無知和嗜血。在讀完這本書後，我對於社會案件有了更深的反思，也更加感受到那些試圖改變社會風氣的少數人所面臨的無力感。</p>\n","excerpt":"<p>一本講述台灣目前一位女性死刑犯的故事心得。</p>","more":"<hr>\n<figure>\n  <img src=\"https://github.com/aliceric27/picx-images-hosting/raw/master/一位女性殺人犯的素描.39l6p90lnj.webp\" width=\"50%\" alt=\"一位女性殺人犯的素描\">\n  <figcaption>一位女性殺人犯的素描, 一位女性殺人犯的素描：她如何謀弒母親、婆婆與丈夫</figcaption>\n</figure>\n\n<h2 id=\"過程\"><a href=\"#過程\" class=\"headerlink\" title=\"過程\"></a>過程</h2><p>閱讀這本書的過程其實並不容易，可能是因為作者撰寫的節奏問題。作者是一名記者，記錄了她在台中女子監獄採訪死刑犯<strong>林于如</strong>的經歷。</p>\n<p>在這本書中，我們能看到監獄內部的封閉狀況，這個獄中世界宛如一個小型國家，讓我想起《2077：狗命鎮》中軍閥割據的景象，有著自己的潛規則和對囚犯探監權的掌控。每位囚犯根據等級不同，外界的探監頻率也有所差異，重刑犯甚至一週只有一次直系親屬探訪的權利。而每次的探訪申請都需經過繁瑣的審批，每次的探訪時間也非常有限。</p>\n<p>在這樣的環境中，受訪者竟異想天開地要求記者與她進行同婚，以便增加探監的時間，這讓我十分震驚。尤其是受訪者每次探訪中對作者各種金錢與物資的索求，更使兩人之間的隔閡逐漸加深。最終，受訪者同意在獄中撰寫自傳並寄給作者整理。</p>\n<p>這篇自傳真假參半，但依然是一個相當精彩的故事。自傳中提及受訪者的家庭矛盾、婆媳糾紛、金錢觀念以及詐騙等相關問題。其中最令我印象深刻的是，受訪者在年紀輕輕時便參與詐騙，且並不認為自己有錯，因為每天能賺取八、九萬，這讓人不禁感到可悲，尤其是在這個笑貧不笑娼的社會氛圍中。</p>\n<p>當年每天賺的八、九萬，如果換算成現今的購買力可能更多，而如今多數人的薪資中位數卻遠不及當年的一半。這不禁讓我聯想到我最近在看的美劇《絕命律師》。劇中，律師吉米乖乖上班卻處處受阻，最終發現只有玩弄規則才能成為既得利益者。這似乎反映了現實世界中，大多數道德感低落的人更容易賺錢，而理想往往無法養活自己。</p>\n<p>無論自傳的真實性如何，從這本書中可以更深入地理解這個人的動機。這也是我覺得本書最寶貴的地方，因為動機往往是法律案件判決的關鍵。然而，這也讓我反思，死刑並不能解決這樣的社會問題。</p>\n<p>每個人無法選擇自己的原生家庭，而原生家庭對一個人的影響極為深遠。如果我們無法提供弱勢族群相應的幫助，僅在事發後進行放大檢視，那麼這樣的做法就如同僅關注比賽的終點，而忽視選手整場比賽的經歷。</p>\n<h2 id=\"馬拉松的隱喻\"><a href=\"#馬拉松的隱喻\" class=\"headerlink\" title=\"馬拉松的隱喻\"></a>馬拉松的隱喻</h2><p>舉個極端的例子，一場馬拉松中有兩位選手。一位選手一路上吃著火鍋唱著歌，甚至作弊接受他人幫助，而另一位選手則兢兢業業地跑完全程，路上的種種困難都要自己解決，沒有人會幫助他。當他即將抵達終點時，卻被那位受到各種幫助的選手超越，並在終點處爆發衝突。隔天新聞報導的卻是：”運動員缺乏運動家精神”。</p>\n<p>這讓我聯想到本書中的故事，外界對<strong>林于如</strong>的厭惡觀感，不論是檢察官、曾有衝突的批發商、還是有嫌隙的婆家，導致媒體對她幾乎都是負面描寫。而案件已經判決，即便她在獄中如何生活，社會也不再關注。</p>\n<h2 id=\"社會的狹隘與困境\"><a href=\"#社會的狹隘與困境\" class=\"headerlink\" title=\"社會的狹隘與困境\"></a>社會的狹隘與困境</h2><p>台灣社會多數人的狹隘眼光，使得社會的衝突不斷。有能力改變社會的人往往處處受阻，因為在一個池子裡，當大部分人都在裡面便溺，而你試圖改變現狀時，反而會受到指責。這就是當前台灣的現狀。</p>\n<p>最近又看到一件社會案件，一名15歲無照駕車的少年撞死三名路人。新聞報導說他下車時表情嬉皮笑臉，這讓人感到憤怒。然而，聰明的人知道，這個案件不會被判死刑，甚至不會受到重刑，因為法律考量的是動機。而多數人只會聚焦於結果，而不去思考問題的根源。</p>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>台灣無法進步，有很大的原因是來自於人民的無知和嗜血。在讀完這本書後，我對於社會案件有了更深的反思，也更加感受到那些試圖改變社會風氣的少數人所面臨的無力感。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm37mgsk50001qoud37mqgd8k","category_id":"cm37mgsk90006qoud47dv0lsv","_id":"cm37mgska000dqoud49az6nt9"},{"post_id":"cm37mgsk70003qoudaz263a2h","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgska000iqoud278p6z2o"},{"post_id":"cm37mgsk80005qoud8gv4bp0s","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgskb000kqoud25t6fz0y"},{"post_id":"cm37mgsk90007qoud18h499dz","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgskb000lqouddfef1yoe"},{"post_id":"cm37mgskb000mqoud4hob1ks6","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgskc000uqoudfcwkgrm9"},{"post_id":"cm37mgskb000nqoud5jr48gsl","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgskd000xqoudfbvg1ohs"},{"post_id":"cm37mgskc000pqoudak8lbwyk","category_id":"cm37mgsk90009qoudgx8v0ale","_id":"cm37mgskd000yqoud563y1el2"},{"post_id":"cm37mgskc000rqouda2rh4950","category_id":"cm37mgskd000wqoudddn667jd","_id":"cm37mgskd0012qoudggu0cfvz"},{"post_id":"cm37mgskc000tqoud6tk79k38","category_id":"cm37mgskd0010qoud6uxcgi3g","_id":"cm37mgskd0014qoud60tbfbe5"}],"PostTag":[{"post_id":"cm37mgsk50001qoud37mqgd8k","tag_id":"cm37mgsk80004qoudaiko3ogw","_id":"cm37mgska000aqoud08wb5yii"},{"post_id":"cm37mgsk70003qoudaz263a2h","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgska000eqoudbotlhv4s"},{"post_id":"cm37mgsk80005qoud8gv4bp0s","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgska000hqouda85f9hu2"},{"post_id":"cm37mgsk90007qoud18h499dz","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgskb000jqoudbw0k6u8f"},{"post_id":"cm37mgskb000mqoud4hob1ks6","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgskc000oqoud36zi5ny8"},{"post_id":"cm37mgskb000nqoud5jr48gsl","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgskc000qqoud858j26dh"},{"post_id":"cm37mgskc000pqoudak8lbwyk","tag_id":"cm37mgsk90008qoud91b0bew9","_id":"cm37mgskc000sqoud1uezddr8"},{"post_id":"cm37mgskc000rqouda2rh4950","tag_id":"cm37mgskc000vqoud82ctb7zh","_id":"cm37mgskd0011qoudc9e4c5s5"},{"post_id":"cm37mgskc000tqoud6tk79k38","tag_id":"cm37mgskd000zqoud1qtw6ppn","_id":"cm37mgskd0013qoud4boj4a5n"}],"Tag":[{"name":"Job","_id":"cm37mgsk80004qoudaiko3ogw"},{"name":"Front-end","_id":"cm37mgsk90008qoud91b0bew9"},{"name":"Tools","_id":"cm37mgskc000vqoud82ctb7zh"},{"name":"Book","_id":"cm37mgskd000zqoud1qtw6ppn"}]}}