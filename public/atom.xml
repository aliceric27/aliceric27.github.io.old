<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wei&#39;s Blog</title>
  
  <subtitle>NaN==Not a Nerd</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-08T03:30:43.108Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用CloudFlare Work架設telegram bot</title>
    <link href="http://example.com/2024/11/07/2024-11-07-%E4%BD%BF%E7%94%A8CloudFlare-Work%E6%9E%B6%E8%A8%ADtelegram-bot/"/>
    <id>http://example.com/2024/11/07/2024-11-07-%E4%BD%BF%E7%94%A8CloudFlare-Work%E6%9E%B6%E8%A8%ADtelegram-bot/</id>
    <published>2024-11-07T13:20:20.000Z</published>
    <updated>2024-11-08T03:30:43.108Z</updated>
    
    <content type="html"><![CDATA[<p>使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot<br>每個月有 10 萬次請求，足夠應付一般使用</p><span id="more"></span><hr><h2 id="登入-註冊-CloudFlare"><a href="#登入-註冊-CloudFlare" class="headerlink" title="登入&#x2F;註冊 CloudFlare"></a>登入&#x2F;註冊 CloudFlare</h2><p>到 <a href="https://dash.cloudflare.com/login">CloudFlare</a> 登入&#x2F;註冊</p><p>註冊後就會開通免費方案，可以開始使用</p><h2 id="安裝node-js"><a href="#安裝node-js" class="headerlink" title="安裝node.js"></a>安裝node.js</h2><p>到 <a href="https://nodejs.org/en">nodejs.org</a> 下載對應版本安裝</p><p>確認是否安裝成功</p><pre><code class="bash">node -v</code></pre><h2 id="建立wrangler專案"><a href="#建立wrangler專案" class="headerlink" title="建立wrangler專案"></a>建立wrangler專案</h2><ol><li>擇一使用npm、pnpm、yarn安裝wrangler(官方推薦使用npm)</li></ol><pre><code class="bash">npm install wrangler</code></pre><ol start="2"><li>使用wrangler建立專案</li></ol><p>專案名稱可以隨意命名，會新增一個專案資料夾</p><pre><code class="bash">npm create cloudflare@latest &lt;你的專案名稱&gt;</code></pre><ol start="3"><li>到這邊記得選 <code>Template from a GitHub repo</code></li></ol><p><img src="https://github.com/aliceric27/picx-images-hosting/raw/master/image.39l740kpx2.webp" alt="image.39l740kpx2.webp"></p><ol start="4"><li>貼上好心人開源的模板</li></ol><pre><code>https://github.com/m-sarabi/cloudflare-telegram-bot</code></pre><ol start="5"><li><p>選擇TypeScript</p></li><li><p>詢問是否使用 Git 選Yes</p></li><li><p>最後會詢問是否要部屬，選No</p></li></ol><p><img src="https://github.com/aliceric27/picx-images-hosting/raw/master/image.3uuuqbmo97.webp" alt="image.3uuuqbmo97.webp"></p><p>到這邊專案就建立完成了</p><hr><h2 id="設定Telegram-Bot"><a href="#設定Telegram-Bot" class="headerlink" title="設定Telegram Bot"></a>設定Telegram Bot</h2><ol><li><p>到 <a href="https://t.me/botfather">BotFather</a> 建立Bot</p></li><li><p>輸入 <code>/newbot</code> 並按照指示操作</p></li><li><p>記得Bot Token，等等會用到</p></li></ol><hr><h2 id="專案環境設定"><a href="#專案環境設定" class="headerlink" title="專案環境設定"></a>專案環境設定</h2><ol><li>找到 wrangler.toml 設定環境變數</li></ol><ul><li>SECRET: 將 <SECRET> 替換為一個隨機的 token，以確保請求來自你設定的 webhook。<br>它可以是 1 到 256 個字串，包括 A-Z、a-z、0-9、_ 和 -。</li><li>API_TOKEN: 將 <API_TOKEN> 替換為你 @BotFather 獲得的 API token。</li></ul><p>解開註解，填入剛剛記得的Bot Token<br>SECRET 隨意填寫，TOKEN 填入剛剛記得的Bot Token</p><pre><code class="toml">[vars]SECRET = &quot;tg-bot&quot;TOKEN = &quot;&lt;API_TOKEN&gt;&quot;</code></pre><ol start="2"><li>保存後在終端機輸入</li></ol><pre><code class="bash">npm run cf-typegen</code></pre><p>這個指令會重新生成 worker-configuration.d.ts 文件，反映你剛剛設定的變數。</p><h2 id="修改專案"><a href="#修改專案" class="headerlink" title="修改專案"></a>修改專案</h2><p>現在，讓我們進入有趣的部分——編寫機器人代碼！在這個例子中，我們將創建以下功能：</p><p><strong>情境</strong>：當使用者發送 <code>/start</code> 指令時，機器人會顯示一條帶有按鈕的訊息。當按下按鈕後，機器人會移除該按鈕並回傳訊息。</p><h3 id="處理-start-指令"><a href="#處理-start-指令" class="headerlink" title="處理 /start 指令"></a>處理 <code>/start</code> 指令</h3><p>所有的更新處理函數都位於 <code>src/Telegram/handlers</code> 目錄中。</p><p>我們將從回應 <code>/start</code> 指令並發送一條訊息與內聯按鈕開始。請按如下方式修改 <code>src/Telegram/handlers/handleMessage.ts</code>：</p><pre><code class="typescript">import &#123; tg &#125; from &#39;../lib/methods&#39;;export async function handleMessage(message: tgTypes.Message) &#123;    const messageText = message.text;    const chatId = message.chat.id;    if (messageText === &#39;/start&#39;) &#123;        await tg.sendMessage(&#123;            text: &#39;Welcome to my bot! Press the button to accept my rules!&#39;,            chat_id: chatId,            reply_markup: &#123;                inline_keyboard: [[&#123; text: &#39;I Accept&#39;, callback_data: &#39;accept_rules&#39; &#125;]]            &#125;        &#125;);    &#125;&#125;</code></pre><p>這段程式碼使用 <code>tg.sendMessage</code> 方法發送一條帶有內聯鍵盤按鈕的訊息。</p><h3 id="處理內聯按鈕點擊"><a href="#處理內聯按鈕點擊" class="headerlink" title="處理內聯按鈕點擊"></a>處理內聯按鈕點擊</h3><p>當使用者點擊內聯按鈕時，我們希望機器人能夠確認這個動作。請修改 <code>src/Telegram/handlers/handleCallbackQuery.ts</code>：</p><pre><code class="typescript">import &#123; tg &#125; from &#39;../lib/methods&#39;;export async function handleCallbackQuery(callbackQuery: tgTypes.CallbackQuery) &#123;    const data = callbackQuery.data;    const messageId = callbackQuery.message?.message_id;    const chatId = callbackQuery.message?.chat.id;    if (messageId &amp;&amp; chatId) &#123;        if (data === &#39;accept_rules&#39;) &#123;            await tg.editMessageReplyMarkup(&#123;                chat_id: chatId,                message_id: messageId,                reply_markup: undefined            &#125;);            await tg.sendMessage(&#123;                chat_id: chatId,                text: &#39;Thanks for accepting my rules.&#39;            &#125;);        &#125;    &#125;&#125;</code></pre><p>這段程式碼會監聽 <code>accept_rules</code> 的數據查詢，並在匹配時移除內聯按鈕，然後使用 <code>tg.editMessageReplyMarkup</code> 方法發送一條跟進訊息。</p><h3 id="🔗-註冊你的-Webhook"><a href="#🔗-註冊你的-Webhook" class="headerlink" title="🔗 註冊你的 Webhook"></a>🔗 註冊你的 Webhook</h3><p>在設置好機器人的邏輯後，現在是部署 Worker 並通過 Webhook 連接到 Telegram 的時候了。</p><ol><li>執行 <code>npm wrangler deploy </code> 或 <code>wrangler deploy</code> 來部署你的 Worker。</li><li>前往你的 Cloudflare 控制台並選擇 Workers &amp; Pages。</li></ol><p><img src="https://github.com/aliceric27/picx-images-hosting/raw/master/image.4n7q82irf3.webp" alt="image.4n7q82irf3.webp"></p><ol start="3"><li>在你的專案名稱旁邊，點擊 <code>造訪</code>。</li><li>在 URL 連結後面添加 <code>/registerWebhook</code>（例如 <code>https://my-project.my-username.workers.dev/registerWebhook</code>）並按下 Enter。如果你看到 “Webhook registered”，表示你已正確完成設置！</li><li>一旦部署並註冊完成，你可以在 Telegram 上與你的機器人互動。首先點擊 Start（或發送 <code>/start</code>），你應該會看到帶有內聯按鈕的歡迎訊息。</li></ol><h2 id="本機開發"><a href="#本機開發" class="headerlink" title="本機開發"></a>本機開發</h2><p>如果要在本機開發機器人，建議使用 ngrok 來建立一個公開的 URL<br>因為 Telegram 需要 Webhook 的需求 URL 是 https 開頭的</p><ol><li><p>到 <a href="https://ngrok.com/">ngrok</a> 註冊帳號</p></li><li><p>取得 ngrok 的 authtoken</p></li></ol><p><img src="https://github.com/aliceric27/picx-images-hosting/raw/master/image.70acpa5g8u.webp" alt="image.70acpa5g8u.webp"></p><ol start="3"><li>到終端機輸入</li></ol><pre><code class="bash">ngrok config add-authtoken &lt;your-authtoken&gt;</code></pre><ol start="4"><li>首先修改 <code>package.json</code>，添加開發腳本：</li></ol><pre><code class="json">&#123;  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;wrangler dev --local&quot;,    &quot;tunnel&quot;: &quot;ngrok http 8787&quot;  &#125;&#125;</code></pre><ol start="5"><li>修改 <code>src/index.ts</code> 中的 webhook 註冊邏輯：</li></ol><pre><code class="typescript">const isDev = url.hostname === &#39;localhost&#39; || url.hostname.includes(&#39;ngrok&#39;);if (url.pathname === REGISTER) &#123;    try &#123;        const webhookUrl = isDev             ? `https://$&#123;url.hostname&#125;$&#123;WEBHOOK&#125;`  // ngrok URL            : `$&#123;url.protocol&#125;//$&#123;url.hostname&#125;$&#123;WEBHOOK&#125;`; // production URL                    const result = await tg.setWebhook(&#123;            url: webhookUrl,            secret_token: env.SECRET,        &#125;);        if (result) return new Response(&#39;Webhook registered.&#39;);        else return new Response(&#39;Failed to register webhook.&#39;);    &#125; catch (error) &#123;        return new Response(`Error: $&#123;error&#125;`);    &#125;&#125;</code></pre><ol start="6"><li>開發流程：</li></ol><p>這邊會需要開到兩個終端機</p><pre><code class="bash"># 終端機 1：啟動 wranglernpm run dev# 終端機 2：啟動 ngroknpm run tunnel</code></pre><ol start="7"><li>到瀏覽器輸入 ngrok 提供的 URL 來註冊 webhook：</li></ol><pre><code>https://&lt;ngrok-url&gt;/registerWebhook</code></pre><h2 id="🔗-參考資源"><a href="#🔗-參考資源" class="headerlink" title="🔗 參考資源"></a>🔗 參考資源</h2><ul><li><a href="https://developers.cloudflare.com/workers/">Cloudflare Workers 文檔</a></li><li><a href="https://core.telegram.org/bots/api">Telegram Bot API</a></li><li><a href="https://github.com/m-sarabi/cloudflare-telegram-bot">模板的 GitHub 倉庫</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 CloudFlare 免費提供的 Workers 服務架設 Telegram Bot&lt;br&gt;每個月有 10 萬次請求，足夠應付一般使用&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="http://example.com/categories/Tools/"/>
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>一位女性殺人犯的素描</title>
    <link href="http://example.com/2024/10/18/2024-10-18-%E4%B8%80%E4%BD%8D%E5%A5%B3%E6%80%A7%E6%AE%BA%E4%BA%BA%E7%8A%AF%E7%9A%84%E7%B4%A0%E6%8F%8F/"/>
    <id>http://example.com/2024/10/18/2024-10-18-%E4%B8%80%E4%BD%8D%E5%A5%B3%E6%80%A7%E6%AE%BA%E4%BA%BA%E7%8A%AF%E7%9A%84%E7%B4%A0%E6%8F%8F/</id>
    <published>2024-10-18T02:13:47.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>一本講述台灣目前一位女性死刑犯的故事心得。</p><span id="more"></span><hr><figure>  <img src="https://github.com/aliceric27/picx-images-hosting/raw/master/一位女性殺人犯的素描.39l6p90lnj.webp" width="50%" alt="一位女性殺人犯的素描">  <figcaption>一位女性殺人犯的素描, 一位女性殺人犯的素描：她如何謀弒母親、婆婆與丈夫</figcaption></figure><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>閱讀這本書的過程其實並不容易，可能是因為作者撰寫的節奏問題。作者是一名記者，記錄了她在台中女子監獄採訪死刑犯<strong>林于如</strong>的經歷。</p><p>在這本書中，我們能看到監獄內部的封閉狀況，這個獄中世界宛如一個小型國家，讓我想起《2077：狗命鎮》中軍閥割據的景象，有著自己的潛規則和對囚犯探監權的掌控。每位囚犯根據等級不同，外界的探監頻率也有所差異，重刑犯甚至一週只有一次直系親屬探訪的權利。而每次的探訪申請都需經過繁瑣的審批，每次的探訪時間也非常有限。</p><p>在這樣的環境中，受訪者竟異想天開地要求記者與她進行同婚，以便增加探監的時間，這讓我十分震驚。尤其是受訪者每次探訪中對作者各種金錢與物資的索求，更使兩人之間的隔閡逐漸加深。最終，受訪者同意在獄中撰寫自傳並寄給作者整理。</p><p>這篇自傳真假參半，但依然是一個相當精彩的故事。自傳中提及受訪者的家庭矛盾、婆媳糾紛、金錢觀念以及詐騙等相關問題。其中最令我印象深刻的是，受訪者在年紀輕輕時便參與詐騙，且並不認為自己有錯，因為每天能賺取八、九萬，這讓人不禁感到可悲，尤其是在這個笑貧不笑娼的社會氛圍中。</p><p>當年每天賺的八、九萬，如果換算成現今的購買力可能更多，而如今多數人的薪資中位數卻遠不及當年的一半。這不禁讓我聯想到我最近在看的美劇《絕命律師》。劇中，律師吉米乖乖上班卻處處受阻，最終發現只有玩弄規則才能成為既得利益者。這似乎反映了現實世界中，大多數道德感低落的人更容易賺錢，而理想往往無法養活自己。</p><p>無論自傳的真實性如何，從這本書中可以更深入地理解這個人的動機。這也是我覺得本書最寶貴的地方，因為動機往往是法律案件判決的關鍵。然而，這也讓我反思，死刑並不能解決這樣的社會問題。</p><p>每個人無法選擇自己的原生家庭，而原生家庭對一個人的影響極為深遠。如果我們無法提供弱勢族群相應的幫助，僅在事發後進行放大檢視，那麼這樣的做法就如同僅關注比賽的終點，而忽視選手整場比賽的經歷。</p><h2 id="馬拉松的隱喻"><a href="#馬拉松的隱喻" class="headerlink" title="馬拉松的隱喻"></a>馬拉松的隱喻</h2><p>舉個極端的例子，一場馬拉松中有兩位選手。一位選手一路上吃著火鍋唱著歌，甚至作弊接受他人幫助，而另一位選手則兢兢業業地跑完全程，路上的種種困難都要自己解決，沒有人會幫助他。當他即將抵達終點時，卻被那位受到各種幫助的選手超越，並在終點處爆發衝突。隔天新聞報導的卻是：”運動員缺乏運動家精神”。</p><p>這讓我聯想到本書中的故事，外界對<strong>林于如</strong>的厭惡觀感，不論是檢察官、曾有衝突的批發商、還是有嫌隙的婆家，導致媒體對她幾乎都是負面描寫。而案件已經判決，即便她在獄中如何生活，社會也不再關注。</p><h2 id="社會的狹隘與困境"><a href="#社會的狹隘與困境" class="headerlink" title="社會的狹隘與困境"></a>社會的狹隘與困境</h2><p>台灣社會多數人的狹隘眼光，使得社會的衝突不斷。有能力改變社會的人往往處處受阻，因為在一個池子裡，當大部分人都在裡面便溺，而你試圖改變現狀時，反而會受到指責。這就是當前台灣的現狀。</p><p>最近又看到一件社會案件，一名15歲無照駕車的少年撞死三名路人。新聞報導說他下車時表情嬉皮笑臉，這讓人感到憤怒。然而，聰明的人知道，這個案件不會被判死刑，甚至不會受到重刑，因為法律考量的是動機。而多數人只會聚焦於結果，而不去思考問題的根源。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>台灣無法進步，有很大的原因是來自於人民的無知和嗜血。在讀完這本書後，我對於社會案件有了更深的反思，也更加感受到那些試圖改變社會風氣的少數人所面臨的無力感。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一本講述台灣目前一位女性死刑犯的故事心得。&lt;/p&gt;</summary>
    
    
    
    <category term="Book" scheme="http://example.com/categories/Book/"/>
    
    
    <category term="Book" scheme="http://example.com/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>事件冒泡、事件捕獲</title>
    <link href="http://example.com/2024/10/11/2024-10-11-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    <id>http://example.com/2024/10/11/2024-10-11-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</id>
    <published>2024-10-11T03:37:25.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。</p><span id="more"></span><hr><h2 id="什麼是事件冒泡？"><a href="#什麼是事件冒泡？" class="headerlink" title="什麼是事件冒泡？"></a>什麼是事件冒泡？</h2><p>事件冒泡是指當一個元素觸發事件時，事件會從這個元素逐層往外傳遞。例如，當你點擊按鈕時，事件會先在按鈕上觸發，然後傳到外層的 <code>div</code>，再傳到更外層的元素（例如 <code>body</code>）。這樣我們可以在較高層的元素上處理事件，而不用為每個小元素都加監聽器，從而減少重複代碼、提升性能和維護性。</p><pre><code class="html">&lt;div id=&quot;container&quot;&gt;  &lt;button id=&quot;button&quot;&gt;Click Me&lt;/button&gt;&lt;/div&gt;</code></pre><pre><code class="js">document.getElementById(&#39;container&#39;).addEventListener(&#39;click&#39;, () =&gt; &#123;  console.log(&#39;Container clicked&#39;);&#125;);document.getElementById(&#39;button&#39;).addEventListener(&#39;click&#39;, (e) =&gt; &#123;  console.log(&#39;Button clicked&#39;);&#125;);</code></pre><p>當你點擊按鈕時，控制台會先顯示 “Button clicked”，然後顯示 “Container clicked”，這就是事件冒泡的效果。</p><h2 id="什麼是事件捕獲？"><a href="#什麼是事件捕獲？" class="headerlink" title="什麼是事件捕獲？"></a>什麼是事件捕獲？</h2><p>事件捕獲與冒泡相反，事件從最外層元素開始逐層往內傳遞，直到目標元素。例如，當你點擊 <code>inner</code> 這個 <code>div</code> 時，如果使用事件捕獲，事件會先從最外層的 <code>outer</code> 開始，再傳遞到 <code>inner</code>。事件捕獲可以用來在事件到達目標元素之前進行特殊處理。</p><h2 id="事件流的圖解"><a href="#事件流的圖解" class="headerlink" title="事件流的圖解"></a>事件流的圖解</h2><p>下面這個圖表展示了事件捕獲和事件冒泡的過程：</p><p><img src="https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/images/eventflow.png" alt="事件流圖解"></p><ul><li><strong>捕獲階段</strong>（Capture Phase）：事件從 <code>document</code> 開始，逐層往下傳遞，直到目標元素。</li><li><strong>目標階段</strong>（Target Phase）：事件到達目標元素。</li><li><strong>冒泡階段</strong>（Bubbling Phase）：事件從目標元素逐層往上傳遞，直到 <code>document</code>。</li></ul><h2 id="使用-addEventListener"><a href="#使用-addEventListener" class="headerlink" title="使用 addEventListener"></a>使用 addEventListener</h2><p>在 JavaScript 中，我們可以使用 addEventListener 為元素添加事件監聽器。addEventListener 方法有三個主要參數以及一個可選的物件參數：</p><ol><li><strong>事件類型</strong>（例如 <code>click</code>）：指定要監聽的事件。</li><li><strong>事件處理函數</strong>：當事件發生時執行的函數。</li><li><strong>可選參數（捕獲或冒泡）</strong>：布爾值，決定事件是在捕獲階段還是冒泡階段處理。<code>true</code> 表示捕獲，<code>false</code> 或不傳表示冒泡。</li><li><strong>可選參數（<code>options</code>）</strong>：這是一個物件，可以包含以下屬性：<ul><li><code>capture</code>：與原本用來表示「捕獲」或「冒泡」的機制相同。</li><li><code>once</code>：代表這個事件只會被觸發一次，結束後就自動解除事件監聽。</li><li><code>passive</code>：當設定成 true 時，表示這個事件處理器不會呼叫 <code>event.preventDefault()</code> 這個方法。如果開發者呼叫了 <code>event.preventDefault()</code> 時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</li></ul></li></ol><blockquote></blockquote><p><code>event.preventDefault()</code>用於阻止元素的預設行為。<br>例如，點擊一個連結時，它通常會跳轉到新的頁面；使用<code>event.preventDefault()</code>可以阻止這種行為。<br>同樣地，在提交表單時也可以用來防止頁面重新加載。如果開發者呼叫了<code>event.preventDefault()</code>時，瀏覽器會直接忽略，並在 console 主控台顯示警告訊息。</p><p>例如：</p><pre><code class="js">document.getElementById(&#39;button&#39;).addEventListener(&#39;click&#39;, myClickHandler, &#123;  once: true,  passive: true,  capture: true&#125;);</code></pre><p>在這個例子中，<code>button</code> 的點擊事件只會觸發一次，並且在觸發後會自動移除，同時設置為被動模式以提升性能。</p><h3 id="事件冒泡與捕獲的範例"><a href="#事件冒泡與捕獲的範例" class="headerlink" title="事件冒泡與捕獲的範例"></a>事件冒泡與捕獲的範例</h3><pre><code class="html">&lt;div id=&quot;outer&quot;&gt;  &lt;div id=&quot;inner&quot;&gt;Inner Div&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="js">document.getElementById(&#39;outer&#39;).addEventListener(&#39;click&#39;, () =&gt; &#123;  console.log(&#39;Outer Div clicked&#39;);&#125;, true); // 捕獲階段document.getElementById(&#39;inner&#39;).addEventListener(&#39;click&#39;, () =&gt; &#123;  console.log(&#39;Inner Div clicked&#39;);&#125;);//冒泡階段 (不填參數、false)</code></pre><p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，控制台會先顯示 “Outer Div clicked”，再顯示 “Inner Div clicked”，因為 <code>outer</code> 使用了捕獲階段。</p><h3 id="停止事件傳遞"><a href="#停止事件傳遞" class="headerlink" title="停止事件傳遞"></a>停止事件傳遞</h3><p>有時候，我們希望事件不要繼續傳遞，可以使用 <code>stopPropagation()</code> 方法。</p><pre><code class="js">document.getElementById(&#39;inner&#39;).addEventListener(&#39;click&#39;, (e) =&gt; &#123;  e.stopPropagation();  console.log(&#39;Inner Div clicked&#39;);&#125;);</code></pre><p>當你點擊 <code>inner</code> 這個 <code>div</code> 時，事件不會再往外傳，因此 “Outer Div clicked” 不會顯示。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li><strong>事件冒泡</strong>：事件從目標元素逐層往外傳遞。</li><li><strong>事件捕獲</strong>：事件從外層元素逐層往內傳遞。</li><li><strong>addEventListener</strong>：可以用第三個參數決定事件處理的階段（捕獲或冒泡）。</li><li>stopPropagation()：用來阻止事件的傳遞。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;介紹事件冒泡和事件捕獲，並解釋如何使用 addEventListener 來控制事件流。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>使用 a 標籤取得網址參數</title>
    <link href="http://example.com/2024/10/11/2024-10-11-%E7%B6%B2%E5%9D%80%E5%8F%96%E5%80%BC/"/>
    <id>http://example.com/2024/10/11/2024-10-11-%E7%B6%B2%E5%9D%80%E5%8F%96%E5%80%BC/</id>
    <published>2024-10-11T02:55:37.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。<br>閱讀相關書籍發現有更好、更簡單的做法</p><span id="more"></span><hr><h2 id="使用a標籤方法"><a href="#使用a標籤方法" class="headerlink" title="使用a標籤方法"></a>使用<code>a</code>標籤方法</h2><pre><code class="js">const a = document.createElement(&#39;a&#39;)a.href = &#39;www.google.com&#39;console.log(a.hostname)console.log(a.pathname)console.log(a.hash)console.dir(a) // 在瀏覽器上可查看a標籤的相關靜態方法</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;常見需求可能是需要取得當前網頁的網址或相關參數，以往可能會用正規表達式比對。&lt;br&gt;閱讀相關書籍發現有更好、更簡單的做法&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>你有多懂 == ?</title>
    <link href="http://example.com/2024/09/17/2024-09-17-%E5%9E%8B%E5%88%A5%E6%AF%94%E8%BC%83==/"/>
    <id>http://example.com/2024/09/17/2024-09-17-%E5%9E%8B%E5%88%A5%E6%AF%94%E8%BC%83==/</id>
    <published>2024-09-17T07:44:50.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>面試很愛出，剛好正在閱讀作者很細心講解。<br>做個筆記，包含 &#x3D;&#x3D; 比較的解釋。</p><span id="more"></span><hr><h2 id="自動轉型的規則"><a href="#自動轉型的規則" class="headerlink" title="自動轉型的規則"></a>自動轉型的規則</h2><ul><li>在兩個等號&#x3D;的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」。</li><li>如果其中有一個值為「Boolean」的情況下，會將<code>true</code>轉型為「數字」的 1，<code>false</code>則會變成數字的 0</li><li>如果遇到字串與數字做比較的情況下，則會將字串透過<code>Number()</code>嘗試轉型為數字後，再進行比較。</li><li>如果其中一方是「物件」型別，而另一方是基本型別的情況下，則會先透過物件的<code>valueof()</code>方法取得對應的基本型別的值，再進行比較。</li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><ul><li>undefined 只會和 null 比較時為 true。</li><li>NaN不等於 NaN，這點不論是兩個等號或三個等號的結果都一樣。</li><li>當兩個「物件」進行比較時，要看兩者是否指向同一個「實體」，只有在指向同一個「實體」時才會回傳true。</li></ul><hr><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>了解基本規則比較轉換後，直接看Code</p><pre><code class="js">[] == [] // false[] == ![] // true[] == &#39;&#39; // true[] == 0 // true[&#39;&#39;] == &#39;&#39; // true[0] == 0 // true[0] == &#39;&#39; // false&#39;&#39; == 0 // truenull == undefined // true//null 和 undefined 是 JavaScript 中兩個特殊的基本類型，它們彼此之間的比較會返回 true。[null] == &#39;&#39; // true//陣列 [null] 轉型後變成空字串&#39;&#39;，然後再與空字串比較，結果為 true。[null] == 0 // true//陣列 [null] 轉型後變成空字串&#39;&#39;，而空字串轉成數字為 0，因此結果為 true。[undefined] == &#39;&#39; // true//與 null 類似，[undefined] 在轉型時也會被轉成空字串&#39;&#39;，結果為 true。[undefined] == 0 // false//undefined 轉為數字時為 NaN，而與 0 的比較結果為 false。</code></pre><hr><h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2><p>在 JavaScript 中，<code>NaN</code> (Not-a-Number) 是一個特殊的數字類型，表示運算或轉型結果無法產生有效的數字。<br><code>NaN</code> 在比較運算時具有一些特殊的行為，尤其是它不等於自身。接下來我們看看幾個 <code>NaN</code> 比較的範例：</p><p><code>NaN == NaN</code>根據 JavaScript 的規則，<code>NaN</code> 與任何值（包括自己）進行比較時，結果都為 <code>false</code>。這是因為 <code>NaN</code> 代表一個無效的數值，沒有辦法與任何東西（包括自己）相等。</p><pre><code class="javascript">NaN == NaN // false</code></pre><h3 id="判斷-NaN"><a href="#判斷-NaN" class="headerlink" title="判斷 NaN"></a>判斷 NaN</h3><p>由於 <code>NaN</code> 不等於自己，判斷一個值是否是 <code>NaN</code> 時，我們可以使用 <code>isNaN()</code> 函數。它可以用來判斷一個值是否為 <code>NaN</code>，而不使用直接比較。</p><pre><code class="javascript">isNaN(NaN)       // trueisNaN(123)       // falseisNaN(&#39;hello&#39;)   // true (字串無法轉型為數字)</code></pre><p><code>Number.isNaN()</code> 是更嚴格的版本，它只會在參數真的為 <code>NaN</code> 時返回 <code>true</code>，而不會像 <code>isNaN()</code> 將非數字類型也當作 <code>NaN</code>。</p><pre><code class="javascript">Number.isNaN(NaN)       // trueNumber.isNaN(123)       // falseNumber.isNaN(&#39;hello&#39;)   // false</code></pre><p><code>NaN</code> 與其他數字的比較當 <code>NaN</code> 與任何其他數字（包括 <code>0</code> 和 <code>Infinity</code>）進行比較時，結果總是 <code>false</code>。</p><pre><code class="javascript">NaN &gt; 0    // falseNaN &lt; 0    // falseNaN &gt;= 0   // falseNaN &lt;= 0   // false</code></pre><p><code>NaN</code> 的轉型在某些運算中，如果出現無法計算的結果，會自動返回 <code>NaN</code>。例如：</p><pre><code class="javascript">Math.sqrt(-1)  // NaN0 / 0          // NaNparseInt(&#39;abc&#39;)// NaN</code></pre><hr><p><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259">8天重新認識JavaScript</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;面試很愛出，剛好正在閱讀作者很細心講解。&lt;br&gt;做個筆記，包含 &amp;#x3D;&amp;#x3D; 比較的解釋。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>這個 this 到底是什麼？</title>
    <link href="http://example.com/2024/09/15/2024-09-15-this/"/>
    <id>http://example.com/2024/09/15/2024-09-15-this/</id>
    <published>2024-09-15T09:04:10.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>這個(this)到底是哪個？<br>基本上這個(this)脫離物件呼叫，就沒有太大的意義。</p><span id="more"></span><hr><p>在 JavaScript 中，<code>this</code> 是一個經常讓人困惑的關鍵字，因為它的值在不同的情況下會有所變化。<code>this</code> 的值取決於函數的呼叫方式，而不是函數定義的地方。本文將介紹 <code>this</code> 在不同情況下的指向，並討論 <code>call</code>、<code>apply</code>、<code>bind</code> 這三種方法，以及如何解決 <code>this</code> 綁定的問題。</p><h2 id="函數呼叫方式"><a href="#函數呼叫方式" class="headerlink" title="函數呼叫方式"></a>函數呼叫方式</h2><p>在講解<code>this</code>前，我們要先知道 function 在呼叫時，有幾種方法</p><ol><li>作為函數去呼叫</li><li>作為方法去呼叫</li><li>作為建構式用<code>new</code>的方式呼叫</li><li>透過<code>apply</code>、<code>call</code>的方式呼叫</li></ol><pre><code class="js">function sayByeBye(name) &#123;    return `Bye bye $&#123;name&#125;`&#125;/* 1. 作為一個函數去呼叫 */console.log(sayByeBye(&#39;Ben&#39;))  // =&gt;  Bye bye Bena = (function (who) &#123;return who&#125;)(&#39;Ben&#39;) //IIFE,(immediately invoked function expression)console.log(a); // =&gt; Benlet greeting = &#123;    sayHello(name)&#123;        return `Hello $&#123;name&#125;`    &#125;&#125;/* 2. 作為一個方法去呼叫 */console.log(greeting.sayHello(&#39;Sabrina&#39;)) // =&gt; Hello Sabrina/* 3. 作為一個建構式，用new的方式去呼叫*/function Order()&#123;&#125;order1 = new Order()console.log(order1) // =&gt; &#123;&#125;/* 4. 透過apply and call的方式呼叫 */console.log(sayByeBye.apply(greeting, [&#39;John&#39;])) // =&gt; Bye bye Johnconsole.log(sayByeBye.call(greeting, &#39;John&#39;))    // =&gt; Bye bye John</code></pre><h2 id="一般情況下的-this"><a href="#一般情況下的-this" class="headerlink" title="一般情況下的 this"></a>一般情況下的 this</h2><h3 id="全域環境下的-this"><a href="#全域環境下的-this" class="headerlink" title="全域環境下的 this"></a>全域環境下的 this</h3><p>在全域範圍中（非嚴格模式），<code>this</code> 指向全域物件（在瀏覽器中是 <code>window</code>）。</p><p>例如：</p><pre><code class="js">console.log(this); // 在瀏覽器中，輸出 window</code></pre><h3 id="物件方法中的-this"><a href="#物件方法中的-this" class="headerlink" title="物件方法中的 this"></a>物件方法中的 this</h3><p>當函數作為物件的方法呼叫時，this 指向該物件。例如：</p><pre><code class="js">const obj = &#123;  name: &#39;Alice&#39;,  greet: function() &#123;    console.log(this.name);  &#125;&#125;;obj.greet(); // 輸出 &#39;Alice&#39;</code></pre><p>在這裡，<code>this</code>指向<code>obj</code>，因此<code>this.name</code>取到的是<code>obj.name</code>。</p><h3 id="獨立函數中的-this"><a href="#獨立函數中的-this" class="headerlink" title="獨立函數中的 this"></a>獨立函數中的 this</h3><p>當函數在全域範圍中獨立呼叫時，<code>this</code>在非嚴格模式下會指向全域物件（瀏覽器中的<code>window</code>）。在嚴格模式下，<code>this</code>則會是<code>undefined</code>。</p><pre><code class="js">function showThis() &#123;  console.log(this);&#125;showThis(); // 非嚴格模式下，輸出 window</code></pre><h3 id="嚴格模式中的-this"><a href="#嚴格模式中的-this" class="headerlink" title="嚴格模式中的 this"></a>嚴格模式中的 this</h3><p>在嚴格模式下，<code>this</code>不再自動指向全域物件，如果函數獨立呼叫，<code>this</code>會是<code>undefined</code>。</p><pre><code class="js">&#39;use strict&#39;;function showThis() &#123;  console.log(this);&#125;showThis(); // 輸出 undefined</code></pre><h3 id="new-建構函數使用-this"><a href="#new-建構函數使用-this" class="headerlink" title="new 建構函數使用 this"></a>new 建構函數使用 this</h3><p>當使用<code>new</code>關鍵字來呼叫並建構函數時，<code>this</code>的指向會有所不同。</p><p><code>new</code>會建立一個新的實體物件，並且<code>this</code>會指向新創建的物件，而不是全域物件或其他任何物件。</p><pre><code class="js">function Person(name) &#123;  this.name = name;  // 正確的 this 綁定：使用箭頭函數  this.introduceArrow = () =&gt; &#123;    console.log(`Hi, I&#39;m $&#123;this.name&#125;`); // 這裡的 this 指向 Person 實例  &#125;;  // 錯誤的 this 綁定：使用普通函數  this.introduceRegular = function() &#123;    setTimeout(function() &#123;      console.log(`Hi, I&#39;m $&#123;this.name&#125;`); // 這裡的 this 指向全域物件或 undefined（取決於嚴格模式）    &#125;, 1000);  &#125;;&#125;const person1 = new Person(&#39;John&#39;);person1.introduceArrow(); // 正確，輸出 &#39;Hi, I&#39;m John&#39;person1.introduceRegular(); // 錯誤，1秒後輸出 &#39;Hi, I&#39;m undefined&#39;（或 &#39;Hi, I&#39;m &#39; 在嚴格模式下）</code></pre><ol><li><p>使用箭頭函數的正確綁定在<code>introduceArrow</code>方法中，我們使用了箭頭函數。箭頭函數不會自己創建<code>this</code>，而是從其外部環境繼承<code>this</code>。在這裡，外部環境是<code>Person</code>的實例，因此<code>this</code>仍然指向<code>Person</code>實例，能夠正確地存取 name 屬性。</p></li><li><p>使用普通函數的錯誤綁定在<code>introduceRegular</code>方法中，我們使用了普通函數。這樣做會導致<code>setTimeout</code>中的回調函數創建自己的<code>this</code>，並且這個<code>this</code>指向全域物件（在瀏覽器中為<code>window</code>）或<code>undefined</code>（在嚴格模式下）。</p></li></ol><p>因此，當回調函數執行時，<code>this.name</code>無法正確取得<code>name</code>屬性，結果是<code>undefined</code>。</p><h4 id="修正錯誤綁定的方法"><a href="#修正錯誤綁定的方法" class="headerlink" title="修正錯誤綁定的方法"></a>修正錯誤綁定的方法</h4><p>如果我們希望修正普通函數中的<code>this</code>綁定，可以使用<code>bind</code>方法或將回調函數改為箭頭函數。</p><p><strong>使用<code>bind</code>方法</strong></p><pre><code class="js">function Person(name) &#123;  this.name = name;  this.introduceRegular = function() &#123;    setTimeout(function() &#123;      console.log(`Hi, I&#39;m $&#123;this.name&#125;`); // 這裡的 this 綁定會被 bind    &#125;.bind(this), 1000);  &#125;;&#125;const person2 = new Person(&#39;Jane&#39;);person2.introduceRegular(); // 正確，1秒後輸出 &#39;Hi, I&#39;m Jane&#39;</code></pre><p><strong>使用箭頭函數</strong></p><pre><code class="js">function Person(name) &#123;  this.name = name;  this.introduceRegular = function() &#123;    setTimeout(() =&gt; &#123;      console.log(`Hi, I&#39;m $&#123;this.name&#125;`); // 這裡的 this 繼承自 Person 實例    &#125;, 1000);  &#125;;&#125;const person3 = new Person(&#39;Doe&#39;);person3.introduceRegular(); // 正確，1秒後輸出 &#39;Hi, I&#39;m Doe&#39;</code></pre><p>在以上修正方法中，<code>bind</code>方法可以將<code>this</code>繫結到指定的物件，而箭頭函數可以自動繼承外部環境中的<code>this</code>。這樣可以確保在回調函數中，<code>this</code>可以正確地指向實例對象。</p><hr><h3 id="call、apply-與-bind-解決-this-綁定"><a href="#call、apply-與-bind-解決-this-綁定" class="headerlink" title="call、apply 與 bind 解決 this 綁定"></a>call、apply 與 bind 解決 this 綁定</h3><p>當我們希望手動指定<code>this</code>的值時，可以使用<code>call</code>、<code>apply</code>或<code>bind</code>。<br>每個 function 都會自帶這些方法可以呼叫直接呼叫使用。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call</code>方法允許我們明確地設定<code>this</code>的值並立即執行該函數。它的語法是：</p><pre><code class="js">function.call(thisArg, arg1, arg2, ...)。</code></pre><p>第一個參數，就是我們要指定的<code>this</code></p><pre><code class="js">function introduce(greeting) &#123;  console.log(`$&#123;greeting&#125;, 我是 $&#123;this.name&#125;`);&#125;const person = &#123;  name: &#39;Bob&#39;&#125;;introduce.call(person, &#39;Hello&#39;); // 輸出 &#39;Hello, 我是 Bob&#39;</code></pre><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply</code>與<code>call</code>類似，不同的是，<code>apply</code>接受的是一個參數陣列而不是單獨的參數。</p><pre><code class="js">function introduce(greeting) &#123;  console.log(`$&#123;greeting&#125;, 我是 $&#123;this.name&#125;`);&#125;const person = &#123;  name: &#39;Charlie&#39;&#125;;introduce.apply(person, [&#39;Hi&#39;]); // 輸出 &#39;Hi, 我是 Charlie&#39;</code></pre><p><code>apply</code>對於參數的傳遞方式更加靈活，尤其在參數數量不確定時。</p><p><code>bind</code>與<code>call</code>和<code>apply</code>不同的是，<code>bind</code>並不會立即執行函數，它會返回一個新的函數，並將<code>this</code><strong>永遠</strong>綁定到指定的物件。</p><pre><code class="js">function introduce(greeting) &#123;  console.log(`$&#123;greeting&#125;, 我是 $&#123;this.name&#125;`);&#125;const person = &#123;  name: &#39;Diana&#39;&#125;;const boundIntroduce = introduce.bind(person);boundIntroduce(&#39;Hey&#39;); // 輸出 &#39;Hey, 我是 Diana&#39;</code></pre><hr><h2 id="常見問題與解決方法"><a href="#常見問題與解決方法" class="headerlink" title="常見問題與解決方法"></a>常見問題與解決方法</h2><h3 id="問題：回調函數中的-this-不正確"><a href="#問題：回調函數中的-this-不正確" class="headerlink" title="問題：回調函數中的 this 不正確"></a>問題：回調函數中的 this 不正確</h3><p>在回調函數（例如事件處理器、<code>setTimeout</code>）中，<code>this</code>的值通常會出現問題，因為它可能會指向全域物件或<code>undefined</code>。解決這個問題的方法包括使用<code>bind</code>或箭頭函數。</p><p><strong>使用<code>bind</code></strong></p><pre><code class="js">const button = document.getElementById(&#39;myButton&#39;);const obj = &#123;  name: &#39;Emily&#39;,  handleClick: function() &#123;    console.log(this.name);  &#125;&#125;;button.addEventListener(&#39;click&#39;, obj.handleClick.bind(obj));</code></pre><p><strong>使用箭頭函數</strong></p><p>箭頭函數不會自己綁定<code>this</code>，而是繼承外部環境中的<code>this</code>。</p><pre><code class="js">const obj = &#123;  name: &#39;Frank&#39;,  handleClick: function() &#123;    document.getElementById(&#39;myButton&#39;).addEventListener(&#39;click&#39;, () =&gt; &#123;      console.log(this.name);    &#125;);  &#125;&#125;;obj.handleClick(); // 點擊時輸出 &#39;Frank&#39;</code></pre><p><strong>範例</strong></p><pre><code class="js">const obj = &#123;  name: &#39;Alice&#39;,  showName: function() &#123;    console.log(this.name);  &#125;,  delayedShowName: function() &#123;    setTimeout(function() &#123;      console.log(this.name); // 這裡的 this 指向 window（非嚴格模式下），而不是 obj    &#125;, 1000);  &#125;&#125;;obj.showName(); // 正確，輸出 &#39;Alice&#39;obj.delayedShowName(); // 不正確，輸出 &#39;undefined&#39;（因為 this 指向 window）</code></pre><hr><p><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this</a></p><p><a href="https://medium.com/@hupinwei/javascript%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-this%E5%92%8C%E5%87%BD%E6%95%B8%E5%91%BC%E5%8F%AB%E6%96%B9%E5%BC%8F-6a2ea4eb14a">this和函數呼叫方式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這個(this)到底是哪個？&lt;br&gt;基本上這個(this)脫離物件呼叫，就沒有太大的意義。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>JS 的 Even Loop 是什麼？</title>
    <link href="http://example.com/2024/09/10/2024-09-10-js-event-loop/"/>
    <id>http://example.com/2024/09/10/2024-09-10-js-event-loop/</id>
    <published>2024-09-10T09:22:10.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>解釋 JS 中的 Even Loop 機制</p><span id="more"></span><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>簡單來說 JS 是單執行緒的機制，為了支援非同步的任務，而在<strong>JS引擎</strong>中引入的一個機制</p><p>機制內分為不同區塊 Stack、Queue、Heap</p><ul><li>JS 程式碼在執行時會依序將任務放入 Stack ，中並按照順序執行。</li><li>當一個任務呼叫為<strong>非同步</strong>任務時則會放在 Queue 內，待 Stack 內的任務完成後，會將 Queue 的任務放到 Stack 內最後按順序執行</li></ul><h2 id="Macrotask-Queue、Microtask-Queue"><a href="#Macrotask-Queue、Microtask-Queue" class="headerlink" title="Macrotask Queue、Microtask Queue"></a>Macrotask Queue、Microtask Queue</h2><p>Callback Queue 又分為 Macrotask Queue 和 Microtask Queue</p><h3 id="Macrotask-Queue"><a href="#Macrotask-Queue" class="headerlink" title="Macrotask Queue"></a>Macrotask Queue</h3><ul><li>從<code>&lt;script src=&quot;...&quot;&gt;</code>外部下載的 script</li><li>DOM event handlers，例如 mousemove event 的 callback function handler</li><li>各種 Web APIs，例如 setTimeout 的 callback function</li><li>ajax callback function</li></ul><p><img src="https://gcdeng.com/assets/images/Screen_Shot_2021-05-16_at_10.37.11_PM-82dd3d3de0ac10d80cccff54a783ea5e.png" alt="marcotask"></p><h3 id="Microtask-Queue​"><a href="#Microtask-Queue​" class="headerlink" title="Microtask Queue​"></a>Microtask Queue​</h3><ul><li>promise <code>.then/catch/finally</code> 中的 callback function</li><li><code>queueMicrotask(func)</code> 中的 func</li></ul><p>簡單來說，像是 Promise.then 在非同步任務中是屬於 Microtask Queue​ ，在 Even Loop 則會被分配到優先執行的 Microtask Queue​</p><p>每個 Macrotask 執行結束後會先將 Microtask queue 中的任務全部執行完，才會繼續執行瀏覽器渲染跟其他 Macrotask。</p><blockquote><p>舉例<br>這個執行印出答案為 1,3,4,2<br>Macrotask​ 為 console.log(1)<br>Microtask queue 為 Promise.then()<br>Macrotask Queue 為 setTimeout()</p></blockquote><pre><code class="js">console.log(1);setTimeout(function () &#123;  console.log(2);&#125;, 0);Promise.resolve()  .then(function () &#123;    console.log(3);  &#125;)  .then(function () &#123;    console.log(4);  &#125;);</code></pre><hr><p>附上更詳細的解釋，有影片和圖片解釋寫的非常完整</p><p><a href="https://www.youtube.com/watch?v=z4S6ZxRD2rA&pp=ygUKRXZlbnQgTG9vcA==">JavaScript Event Loop解說：單執行緒還能異步運算？</a></p><p><a href="https://gcdeng.com/series/Javascript/javascript-deep-dive-into-event-loop">深入了解事件迴圈(Event Loop)，Macrotask跟Microtask是什麼？</a></p><p><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">請說明瀏覽器中的事件循環 (Event Loop)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;解釋 JS 中的 Even Loop 機制&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vue 設定偽元素 content</title>
    <link href="http://example.com/2024/09/03/2024-09-03-Vue%20%E5%BE%9E%E6%A8%A1%E6%9D%BF%E5%82%B3%E5%80%BC%E5%88%B0%20CSS%20%E5%81%BD%E5%85%83%E7%B4%A0%20content%20%E5%85%A7%E5%AE%B9/"/>
    <id>http://example.com/2024/09/03/2024-09-03-Vue%20%E5%BE%9E%E6%A8%A1%E6%9D%BF%E5%82%B3%E5%80%BC%E5%88%B0%20CSS%20%E5%81%BD%E5%85%83%E7%B4%A0%20content%20%E5%85%A7%E5%AE%B9/</id>
    <published>2024-09-03T03:49:30.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 從模板傳值到 CSS 偽元素 content 內容</p><span id="more"></span><hr><h2 id="使用-Attr"><a href="#使用-Attr" class="headerlink" title="使用 Attr()"></a>使用 Attr()</h2><p>首先在模板定義<code>data-*</code>參數，並使用 Vue 模板傳入對應值</p><pre><code class="html">&lt;div class=&quot;dh-header&quot; :data-title=&quot;data.title&quot;&gt;&lt;/div&gt;</code></pre><p>然後在 CSS 中使用<code>attr()</code>引入自訂的變數</p><pre><code class="css">.dh-header:before &#123;    content:attr(data-title);    display:block;&#125;</code></pre><hr><p><a href="https://pjchender.dev/html/html-data-attribute/">什麼是 HTML 5 中的資料屬性（data-* attribute）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue 從模板傳值到 CSS 偽元素 content 內容&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://example.com/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://example.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>自傳履歷</title>
    <link href="http://example.com/2023/01/31/2023-01-31-%E8%87%AA%E5%82%B3%E5%B1%A5%E6%AD%B7/"/>
    <id>http://example.com/2023/01/31/2023-01-31-%E8%87%AA%E5%82%B3%E5%B1%A5%E6%AD%B7/</id>
    <published>2023-01-31T03:45:08.000Z</published>
    <updated>2024-11-08T03:30:43.107Z</updated>
    
    <content type="html"><![CDATA[<p>嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。</p><span id="more"></span><h2 id="學歷"><a href="#學歷" class="headerlink" title="學歷"></a>學歷</h2><p><strong>樹德科技大學 - 資訊管理系 2013&#x2F;09-2017&#x2F;09</strong></p><h2 id="經歷"><a href="#經歷" class="headerlink" title="經歷"></a>經歷</h2><h3 id="微樂應用科技有限公司-2024-3"><a href="#微樂應用科技有限公司-2024-3" class="headerlink" title="微樂應用科技有限公司 2024.3 -"></a>微樂應用科技有限公司 2024.3 -</h3><h4 id="前端工程師"><a href="#前端工程師" class="headerlink" title="前端工程師"></a>前端工程師</h4><ul><li>前端頁面切版、調整</li><li>後端 API 串接測試</li><li>Vue.js 模板撰寫</li></ul><h3 id="日易人工智慧有限公司-2023-10-2024-02"><a href="#日易人工智慧有限公司-2023-10-2024-02" class="headerlink" title="日易人工智慧有限公司 2023.10 - 2024.02"></a>日易人工智慧有限公司 2023.10 - 2024.02</h3><h4 id="前端工程師-1"><a href="#前端工程師-1" class="headerlink" title="前端工程師"></a>前端工程師</h4><ul><li>前端切版</li><li>前端 Nuxt 框架規劃</li><li>前端 API 資料串接</li><li>Socket 資料串接</li></ul><h3 id="冠宇數位科技股份有限公司-2023-03-2023-08"><a href="#冠宇數位科技股份有限公司-2023-03-2023-08" class="headerlink" title="冠宇數位科技股份有限公司 2023.03 - 2023.08"></a>冠宇數位科技股份有限公司 2023.03 - 2023.08</h3><h4 id="前端工程師-2"><a href="#前端工程師-2" class="headerlink" title="前端工程師"></a>前端工程師</h4><ul><li>後臺前端維護建置 Typescript + Vue +  Element UI 架構</li><li>遊戲官網獨立架設並串接 API 採 Vue 3 + Vite 打包工具</li><li>前端切版與規劃，配合SCSS框架工具與Tailwind進行開發</li></ul><h3 id="資策會-全端工程師就業養成班-2022-10-2023-02"><a href="#資策會-全端工程師就業養成班-2022-10-2023-02" class="headerlink" title="資策會-全端工程師就業養成班 2022.10 - 2023.02"></a>資策會-全端工程師就業養成班 2022.10 - 2023.02</h3><h4 id="培訓技能"><a href="#培訓技能" class="headerlink" title="培訓技能"></a>培訓技能</h4><ul><li>Html、CSS ，前端頁面切版設計</li><li>JavaScript，網站與使用者互動之程式語言</li><li>PHP，撰寫簡易後端 API</li><li>MySQL， 關聯式資料庫架設、 CRUD 指令取得資料</li><li>ReactJS，前端網頁框架</li></ul><h3 id="本能娛樂工作室-2019-10-2022-08"><a href="#本能娛樂工作室-2019-10-2022-08" class="headerlink" title="本能娛樂工作室 2019.10-2022.08"></a>本能娛樂工作室 2019.10-2022.08</h3><h4 id="遊戲企劃"><a href="#遊戲企劃" class="headerlink" title="遊戲企劃"></a>遊戲企劃</h4><ul><li>規劃 Android 遊戲流程與計畫，協調工程師修改至符合規格</li><li>撰寫遊戲文件、測試遊戲內容、協助處理上架與用戶反饋</li><li>公司硬體設備維修與維護</li></ul><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>Dear Reviewer， 你好！ 黃育緯，1994&#x2F;12&#x2F;15，畢業於國立岡山高中與樹德科技大學-資訊管理系，具企劃及程式設計之技術。</p><p>大學製作的畢業專題為 Wordpress 電商網站，使用 WooCommerce 套件製作，出社會後輾轉做了許多的行業，曾在3C 賣場銷售過，也曾經到科技廠擔任 QC 品管人員，有幸見到不同的人事物，也讓我對人生未來的價值觀有一定的影響，最後落腳的工作是在台中，在這二年多的學習，讓我對程式開發流程有滿深的影響，也參與了大小專案的開發過程。</p><p>離開上一份工作並尋找轉職的原因是我評估下自己具備的條件，讓我不滿足止步於企劃與溝通，現階段我的追求是”至少讓自己”不要裹足不前，進而在公司期滿後選擇進修前後端技術。</p><p>在進修學習的過程中不斷的學到新技術的同時，可以感受到自己在學習上的優勢，以往曾經自行架設遊戲伺服器擅長蒐集資料與閱讀英文文件的習慣讓我尋找資料與解決問題的的經驗要相較其他同學多，在上一份工作團隊使用的技術在我學習的過程中漸漸明白當初與同事溝通之間所使用的工具實際上是如何運作的。</p><p>很慶幸自己是在資訊發達的年代出生，運用網路上的資訊解決問題也改變了每個人的生活習慣，對於計算機網路的喜愛也讓我在轉職學習的過程中漸漸找到成就感與樂趣，使用工具不斷解決現有問題就是資訊發展得意義，對於求職路上也期許自己可以不斷精進自己的技能，對於每份工作盡力做到完美。</p><p>《工作經歷》</p><p><strong>本能工作室 (2019.10-2022.8)</strong></p><p>在本能工作室初期，主要擔任助理工程師一職，負責協同工程師業務需求與團隊人事招募等相關工作，並協助處理完成的程式功能之測試，而團隊人數招募漸滿後被指派到遊戲團隊擔任遊戲企劃，團隊內主要開發 Android App 遊戲，而我在這個職務內負責的內容為企劃發想、溝通協調需求、協助 App 上架等相關事宜，最後遊戲開發完成也有成功上架到 Google Store 上，最後離開原因為公司縮編。</p><hr><p><strong>資策會全端班(2022.8-2023.2)</strong></p><p>在上一份工作中，因考量未來職涯發展，故報名資策會全端班級進修技能，在此期間學習到了前端基本切版的技能、與前端 Javascript 程式邏輯撰寫、並且學習了後端語言 PHP ，MySQL資料庫等後端應用，在學習後期也學習了 React 框架，最終和同學組成團隊完成一項專案，而我在這個專案內所負則的部分為購物車的功能頁面包含前端切版與後端資料庫串接等，而我也閱讀了綠界相關 API 文件使用 PHP 完成測試的金流串接。</p><hr><p><strong>冠宇數位科技股份有限公司 (2023.3-2023.8)</strong></p><p>冠宇是我的第一份工程師工作，擔任的是前端工程師，在入職初期主要負責後端的相關功能維護與修復功能，在這時碰到的新技術為 Vue 框架、Typescript 等在學習時沒有碰到的相關技術，在下班時會抽空查閱相關文件與其使用方式，在一個禮拜內就上手專案與相關功能新增維護。</p><p>在職期間後期，被指派為主導開發 Startluo 遊戲官方網站的前端主工程師，專案前端均由我架構、切版、製作，架構時我採用的是 SPA 方式與 Vue 3 和 Vite 建構工具打包，也學習使用新的 CSS 框架 Tailwind 等相關技術，在架構與製作時一邊使用與學習，主要與美術配合負責前端頁面切版，與後端工程師協同 API 等相關功能串接，其中包含會員功能使用 Firebase OAuth 驗證、金流則與 MyCard 等第三方金流做串接。</p><p>最後離開原因為主動離職。</p><hr><p><strong>日易人工智慧有限公司 (2023.10-2024.2)</strong></p><p>在日易主要擔任前端工程師一職，負責開發後台介面，主要協同美術進行切版與後端工程師進行 API 資料串接．因開發後台沒有一個主要架構，所以在職的前端開發專案也是由我負責架構、撰寫功能，我在專案中使用較新的 Nuxt 框架，採用 Vue 撰寫，在架構與撰寫中學習與使用，而後碰到新的串接函式庫 socket.io 並學習 socket 相關功能串接。</p><p>最後離職原因為主動離職。</p><hr><p><strong>微樂應用科技有限公司 (2024.3-)</strong></p><p>目前在職中主要專精 JS 語言開發，與後端 API 串接，VueJs前端模板撰寫</p><hr><p>《自我期許》</p><p>在每一份工作中，我都期待接受新的挑戰，也不會排斥使用新的技術以及學習新的技術，最害怕的是職場太安逸，讓人沒有進步的空間與動力，期許自己可以在每份工作中都可以有一點收穫與回饋，不斷成長精進自己。</p><h2 id="電商網站-Lu-Shopping-大學期末專題"><a href="#電商網站-Lu-Shopping-大學期末專題" class="headerlink" title="電商網站 Lu-Shopping - 大學期末專題"></a>電商網站 Lu-Shopping - 大學期末專題</h2><p>使用 Wordpress 搭配 WooCommerce 建置</p>  <img src="https://i.imgur.com/dW00fox.png" alt="DSC_0253" style="zoom: 40%;"/>  <img src="https://i.imgur.com/9uOOeFf.jpg" alt="DSC_0254" style="zoom:30%;" /><h2 id="氣炸廚房-資策會全端培訓專題"><a href="#氣炸廚房-資策會全端培訓專題" class="headerlink" title="氣炸廚房 - 資策會全端培訓專題"></a>氣炸廚房 - 資策會全端培訓專題</h2><h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>因為平常有運動與飲食控制的習慣，也鑑於此餐廳的形象網站較為簡陋，因此假想此餐廳為用戶，並提出改進形象網站需求而製作此專題。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本專題使用原生 HTML、CSS、Javascript 製作而成。<br>使用套件有包含 Chart.js、Swiper 等<br>使用 Git 作為版控、並部署到 Github Pages 上</p><p><img src="https://i.imgur.com/OoF0QKA.png" alt="image-20230205164022292"></p><p><a href="https://aliceric27.github.io/littleweb/">網站連結</a></p><h2 id="SelectGo-資策會全端培訓專題"><a href="#SelectGo-資策會全端培訓專題" class="headerlink" title="SelectGo - 資策會全端培訓專題"></a>SelectGo - 資策會全端培訓專題</h2><h3 id="緣由-1"><a href="#緣由-1" class="headerlink" title="緣由"></a>緣由</h3><p>因日本代購盛行，且比較沒有冷門的商品代購，為此而開發的網站，每個用戶可以根據自己需求到許願池發佈文章並且加入購物車購買。</p><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><p>本專題使用原生 React 前端框架與 HTML、CSS、Javascript、製作而成，後端採用 PHP 與 MySQL 實現 API 資料抓取與處理。</p><p>我負責得部分為購物車與結帳頁面製作，並串接第三方金流 API ，完成站內購買。</p><h4 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h4><ul><li>從資料庫使用 API 獲得用戶購物車資料</li><li>前端 UX 設計 ，讓使用者精確知道金額異動</li><li>使用匯率 API 獲取即時匯率，並提供快速轉換金額功能</li><li>在購物車新增、移除商品資料</li><li>折扣碼輸入與改變金額</li><li>送出表單錯誤判定</li><li>串接第三方金流送出表單資料，並跳轉回網站取得成功或失敗付款提示</li></ul><p><a href="https://aliceric27.github.io/littleweb/">Source</a></p><p><a href="https://www.youtube.com/watch?v=ud2W5ibur4U">演示影片</a></p><img src="https://i.imgur.com/KINoMrc.png" alt="image-20230205174410740" style="zoom:50%;" /><h2 id="Startluo-官網-冠宇數位科技股份有限公司"><a href="#Startluo-官網-冠宇數位科技股份有限公司" class="headerlink" title="Startluo 官網 - 冠宇數位科技股份有限公司"></a>Startluo 官網 - 冠宇數位科技股份有限公司</h2><h3 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h3><p>主要替遊戲設計一個網站、該網站包含排行榜、用戶資料、儲值金額等功能</p><img src="https://i.imgur.com/ZTfMxMu.png" alt="image-20230205174410740" style="zoom:100%;" /><ul><li>與美術協同Figma網站規劃切版、功能撰寫</li><li>釐清PM與用戶需求並完成、新增功能</li><li>採用Vue3撰寫功能、Vite打包工具、Pinia狀態管理</li><li>採用SCSS、Tailwind框架</li><li>第三方Firebase登入驗證</li><li>Axios做API後端資料串接與整理</li></ul><h2 id="中央控制系統-日易人工智慧有限公司"><a href="#中央控制系統-日易人工智慧有限公司" class="headerlink" title="中央控制系統 - 日易人工智慧有限公司"></a>中央控制系統 - 日易人工智慧有限公司</h2><h3 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h3><p>飯店內的中央控制系統，可於頁面上查看設備資訊，並控制設備開關</p><img src="https://i.imgur.com/6RTpJr4.png" alt="image-20230205174410740" style="zoom:100%;" /><ul><li>Nuxt3、Vue3 框架撰寫</li><li>Figma 與美術對稿切版</li><li>Socket.io 套件串接 Socket 協議資料</li><li>Tailwind SCSS 等前端開發開套件進行樣式切版</li></ul><p><a href="https://github.com/aliceric27/FloramosHotel">Source</a><br><strong>為公司隱私設為私人專案，可於線下展示</strong></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;嘗試在 Blog 上更新履歷，如果有錯誤的話也比較好即時修正。&lt;/p&gt;</summary>
    
    
    
    <category term="Job" scheme="http://example.com/categories/Job/"/>
    
    
    <category term="Job" scheme="http://example.com/tags/Job/"/>
    
  </entry>
  
</feed>
